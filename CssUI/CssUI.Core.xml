<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CssUI</name>
    </assembly>
    <members>
        <member name="T:CssUI.CastTo`1">
            <summary>
            Class to cast to type <see cref="!:T"/>
            </summary>
            <typeparam name="T">Target type</typeparam>
        </member>
        <member name="M:CssUI.CastTo`1.From``1(``0)">
            <summary>
            Casts <see cref="!:S"/> to <see cref="!:T"/>.
            This does not cause boxing for value types.
            Useful in generic methods.
            </summary>
            <typeparam name="S">Source type to cast from. Usually a generic type.</typeparam>
        </member>
        <member name="T:CssUI.Internal.Unicode">
            <summary>
            ".NET uses the UTF-16 encoding (represented by the UnicodeEncoding class) to represent characters and strings."
            We just need to implement certain Unicode standards for interpretation of said strings
            </summary>
        </member>
        <member name="M:CssUI.Internal.Unicode.CaselessCompare(System.String,System.String)">
            <summary>
            Performs a culture invariant case-insensitive match on two strings
            </summary>
            <param name="Source"></param>
            <param name="Match"></param>
            <returns></returns>
        </member>
        <member name="T:CssUI.Internal.PropertyResolverFunc">
            <summary>
            Provides a function that can resolve a given property value into its next stage
            </summary>
            <param name="Property"></param>
            <param name="ComputedValue"></param>
            <returns></returns>
        </member>
        <member name="T:CssUI.Internal.CssValueList">
            <summary>
            Used to contain and track multiple <see cref="T:CssUI.CSS.CssValue"/>s
            </summary>
        </member>
        <member name="M:CssUI.Internal.CssValueList.#ctor(CssUI.Internal.CssValueList)">
            <summary>
            Creates a new <see cref="T:CssUI.Internal.CssValueList"/> as a deep copy of another
            </summary>
            <param name="cssValues"></param>
        </member>
        <member name="M:CssUI.Internal.CssValueList.#ctor(System.Collections.Generic.IEnumerable{CssUI.CSS.CssValue})">
            <summary>
            Creates a new <see cref="T:CssUI.Internal.CssValueList"/> populated by a given set of <see cref="T:CssUI.CSS.CssValue"/>s
            </summary>
            <param name="cssValues"></param>
        </member>
        <member name="T:CssUI.Common.Exceptions.ParserErrors">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CssUI.Common.Exceptions.ParserErrors.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CssUI.Common.Exceptions.ParserErrors.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CssUI.Common.Exceptions.ParserErrors.INVALID_CONTAINS_NON_DIGIT_CHARS">
            <summary>
              Looks up a localized string similar to Input string may only contain ascii digits (0 -9).
            </summary>
        </member>
        <member name="P:CssUI.Common.Exceptions.ParserErrors.PARSING_FAILED">
            <summary>
              Looks up a localized string similar to Unable to parse input string.
            </summary>
        </member>
        <member name="T:CssUI.Lookup">
            <summary>
            Provides utility functions for translating code values into their CSS string values
            </summary>
        </member>
        <member name="M:CssUI.Lookup.TryKeyword``1(``0,System.String@)">
            <summary>
            Attempts to retrieve the keyword value for the specified enum value
            </summary>
            <typeparam name="T">Enum for which the keyword is listed</typeparam>
            <param name="Value">Enum value to lookup</param>
            <param name="outKeyword">Returned value</param>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.Lookup.TryKeyword(System.Type,System.Object,System.String@)">
            <summary>
            Attempts to retrieve the keyword value for the specified enum value
            </summary>
            <typeparam name="T">Enum for which the keyword is listed</typeparam>
            <param name="Value">Enum value to lookup</param>
            <param name="outKeyword">Returned value</param>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.Lookup.Keyword``1(``0)">
            <summary>
            Retrieves the keyword for the specified enum value.
            </summary>
            <typeparam name="T">Enum for which the keyword is listed</typeparam>
            <param name="Value">Enum value to lookup</param>
            <returns>Keyword</returns>
            <exception cref="T:System.Exception">If the keyword cannot be found</exception>
        </member>
        <member name="M:CssUI.Lookup.Keyword(System.Type,System.Object)">
            <summary>
            Retrieves the keyword for the specified enum value.
            </summary>
            <param name="enumType">Enum for which the keyword is listed</param>
            <param name="Value">Enum value to lookup</param>
            <returns>Keyword</returns>
            <exception cref="T:System.Exception">If the keyword cannot be found</exception>
        </member>
        <member name="M:CssUI.Lookup.TryData``1(``0,CssUI.EnumData@)">
            <summary>
            Attempts to retrieve the metadata value for the specified enum value
            </summary>
            <typeparam name="T">Enum for which the metadata is listed</typeparam>
            <param name="Value">Enum value to lookup</param>
            <param name="outData">Returned value</param>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.Lookup.TryData(System.Type,System.Object,CssUI.EnumData@)">
            <summary>
            Attempts to retrieve the metadata value for the specified enum value
            </summary>
            <typeparam name="Ty">Enum for which the metadata is listed</typeparam>
            <param name="Value">Enum value to lookup</param>
            <param name="outData">Returned value</param>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.Lookup.Data``1(``0)">
            <summary>
            Retrieves the metadata for the specified enum value.
            </summary>
            <typeparam name="T">Enum for which the metadata is listed</typeparam>
            <param name="Value">Enum value to lookup</param>
            <returns>Enum metadata</returns>
            <exception cref="T:System.Exception">If the keyword cannot be found</exception>
        </member>
        <member name="M:CssUI.Lookup.Data(System.Type,System.Object)">
            <summary>
            Retrieves the metadata for the specified enum value.
            </summary>
            <typeparam name="Ty">Enum for which the metadata is listed</typeparam>
            <param name="Value">Enum value to lookup</param>
            <returns>Enum metadata</returns>
            <exception cref="T:System.Exception">If the keyword cannot be found</exception>
        </member>
        <member name="M:CssUI.Lookup.TryEnum``1(CssUI.AtomicString,``0@)">
            <summary>
            Attempts to retrieve an enum value from a given keyword
            </summary>
            <typeparam name="T">The enum type to return</typeparam>
            <param name="Keyword">Keyword to lookup enum value for</param>
            <param name="outEnum">Returned enum value</param>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.Lookup.TryEnum(System.Type,CssUI.AtomicString,System.Object@)">
            <summary>
            Attempts to retrieve an enum value from a given keyword
            </summary>
            <typeparam name="Ty">The enum type to return</typeparam>
            <param name="Keyword">Keyword to lookup enum value for</param>
            <param name="outEnum">Returned enum value</param>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.Lookup.Enum``1(CssUI.AtomicString)">
            <summary>
            Retrieves an enum value from a given keyword
            </summary>
            <typeparam name="T">The enum type to return</typeparam>
            <param name="Keyword">Keyword to lookup enum value for</param>
            <returns>Enum value</returns>
            <exception cref="T:System.Exception">Throws if the keyword does not exist in the lookup table</exception>
        </member>
        <member name="M:CssUI.Lookup.Enum(System.Type,CssUI.AtomicString)">
            <summary>
            Retrieves an enum value from a given keyword
            </summary>
            <typeparam name="T">The enum type to return</typeparam>
            <param name="Keyword">Keyword to lookup enum value for</param>
            <returns>Enum value</returns>
            <exception cref="T:System.Exception">Throws if the keyword does not exist in the lookup table</exception>
        </member>
        <member name="M:CssUI.Lookup.Get_Keywords(System.Type)">
            <summary>
            Returns ALL keywords defined for the given enum
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.Lookup.Get_Keywords``1">
            <summary>
            Returns ALL keywords defined for the given enum
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.ParsingCommon.Digits_To_Base10(System.ReadOnlyMemory{System.Char})">
            <summary>
            Converts a series of digits into a base10 number
            </summary>
        </member>
        <member name="M:CssUI.ParsingCommon.Digits_To_Base10(System.ReadOnlySpan{System.Char})">
            <summary>
            Converts a series of digits into a base10 number
            </summary>
        </member>
        <member name="M:CssUI.ParsingCommon.Digits_To_Base10_Unsigned(System.ReadOnlyMemory{System.Char})">
            <summary>
            Converts a series of digits into an unsigned base10 number
            </summary>
        </member>
        <member name="M:CssUI.ParsingCommon.Digits_To_Base10_Unsigned(System.ReadOnlySpan{System.Char})">
            <summary>
            Converts a series of digits into an unsigned base10 number
            </summary>
        </member>
        <member name="M:CssUI.StringCommon.StrEq(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Returns whether <paramref name="p"/> and <paramref name="q"/> contain the same values
            </summary>
            <returns>True if both strings are an exact match</returns>
        </member>
        <member name="M:CssUI.StringCommon.StriEq(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Returns whether <paramref name="p"/> and <paramref name="q"/> contain the same (case-insensitive) values
            </summary>
            <returns>True if both strings are an case-insensitive match</returns>
        </member>
        <member name="M:CssUI.StringCommon.Contains(System.ReadOnlySpan{System.Char},CssUI.Filters.Filter{System.Char})">
            <summary>
            Returns whether <paramref name="Str"/> contains any characters matching the given filter
            </summary>
            <returns>True if string contains a character which the given filter matches</returns>
        </member>
        <member name="M:CssUI.StringCommon.Contains(System.ReadOnlySpan{System.Char},System.Predicate{System.Char})">
            <summary>
            Returns whether <paramref name="Str"/> contains any characters matching the given filter
            </summary>
            <returns>True if string contains a character which the given filter matches</returns>
        </member>
        <member name="M:CssUI.StringCommon.Contains(System.ReadOnlySpan{System.Char},System.Char)">
            <summary>
            Returns whether <paramref name="Str"/> contains any characters matching the given filter
            </summary>
            <returns>True if string contains a character which the given filter matches</returns>
        </member>
        <member name="M:CssUI.StringCommon.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Returns whether <paramref name="Str"/> contains any characters matching the given filter
            </summary>
            <returns>True if string contains a character which the given filter matches</returns>
        </member>
        <member name="M:CssUI.StringCommon.ContainsOnly(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Returns the index of the first character which matches none of the <paramref name="Search"/> characters
            </summary>
        </member>
        <member name="M:CssUI.StringCommon.Count(System.ReadOnlySpan{System.Char},CssUI.Filters.Filter{System.Char})">
            <summary>
            Returns the number of characters within <paramref name="Str"/> matching the given <paramref name="Filter"/>
            </summary>
            <returns>Number of matching characters</returns>
        </member>
        <member name="M:CssUI.StringCommon.Count(System.ReadOnlySpan{System.Char},System.Predicate{System.Char})">
            <summary>
            Returns the number of characters within <paramref name="Str"/> matching the given <paramref name="Predicate"/>
            </summary>
            <returns>Number of matching characters</returns>
        </member>
        <member name="M:CssUI.StringCommon.Count(System.ReadOnlySpan{System.Char},System.Char)">
            <summary>
            Returns the number of characters within <paramref name="Str"/> matching the given <paramref name="Search"/> character
            </summary>
            <returns>Number of matching characters</returns>
        </member>
        <member name="M:CssUI.StringCommon.Strip_And_Collapse_Whitespace(System.ReadOnlySpan{System.Char})">
            <summary>
            Strips leading and trailing whitespace from a string and also collapses groups of whitespace characters with a single space
            </summary>
            <param name="buffMem">String memory</param>
            <returns>Altered string</returns>
        </member>
        <member name="M:CssUI.StringCommon.ToByteArray(System.String)">
            <summary>
            Transforms a <c>string</c> into a byte-array
            </summary>
            <returns>Byte-array containing the string data</returns>
        </member>
        <member name="M:CssUI.StringCommon.Concat(System.Char,System.Collections.Generic.IEnumerable{System.ReadOnlyMemory{System.Char}})">
            <summary>
            Concatenates an array of strings into a single string with each original string seperated from the next by a given delimiter
            </summary>
            <param name="Delim">The delimiter(s) that should seperate each token</param>
            <param name="Args">The strings to join</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.StringCommon.Concat(System.Char,CssUI.StringPtr[])">
            <summary>
            Concatenates an array of strings into a single string with each original string seperated from the next by a given delimiter
            </summary>
            <param name="Delim">The delimiter(s) that should seperate each token</param>
            <param name="Args">The strings to join</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.StringCommon.Concat(System.ReadOnlySpan{System.Char},System.Collections.Generic.IEnumerable{System.ReadOnlyMemory{System.Char}})">
            <summary>
            Concatenates an array of strings into a single string with each original string seperated from the next by a given delimiter
            </summary>
            <param name="Delim">The delimiter(s) that should seperate each token</param>
            <param name="Args">The strings to join</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.StringCommon.Concat(System.ReadOnlySpan{System.Char},CssUI.StringPtr[])">
            <summary>
            Concatenates an array of strings into a single string with each original string seperated from the next by a given delimiter
            </summary>
            <param name="Delim">The delimiter(s) that should seperate each token</param>
            <param name="Args">The strings to join</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.StringCommon.Concat(System.Collections.Generic.IEnumerable{System.ReadOnlyMemory{System.Char}})">
            <summary>
            Concatenates an array of strings into a single string
            </summary>
            <param name="Args">The strings to join</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.StringCommon.Concat(CssUI.StringPtr[])">
            <summary>
            Concatenates an array of strings into a single string
            </summary>
            <param name="Args">The strings to join</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.StringCommon.Trim(CssUI.StringPtr,System.Char)">
            <summary>
            Modifies the given <paramref name="Input"/>, removing any leading or trailing instances of <paramref name="Delim"/> by offsetting its start and end position without modifying its data or creating a new string instance
            </summary>
            <param name="Input">The string memory to trim</param>
            <param name="Delim">The character to trim out of the input</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.StringCommon.Trim(CssUI.StringPtr,System.Char[])">
            <summary>
            Modifies the given <paramref name="Input"/>, removing any leading or trailing instances of <paramref name="Delim"/> by offsetting its start and end position without modifying its data or creating a new string instance
            </summary>
            <param name="Input">The string memory to trim</param>
            <param name="Delims">The characters to trim out of the input</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.StringCommon.Trim(CssUI.StringPtr,CssUI.Filters.Filter{System.Char})">
            <summary>
            Modifies the given <paramref name="Input"/>, removing any leading or trailing code points which do not match the given <paramref name="Filter"/> by offsetting its start and end position without modifying its data or creating a new string instance
            </summary>
            <param name="Input">The string memory to trim</param>
            <param name="Filter">The filter used to trim characters out of the input</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.StringCommon.Trim(CssUI.StringPtr,System.Predicate{System.Char})">
            <summary>
            Modifies the given <paramref name="Input"/>, removing any leading or trailing code points which match the given <paramref name="Predicate"/> by offsetting its start and end position without modifying its data or creating a new string instance
            </summary>
            <param name="Input">The string memory to trim</param>
            <param name="Predicate">The filter used to trim characters out of the input</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.StringCommon.TrimStart(CssUI.StringPtr,System.Char)">
            <summary>
            Modifies the given <paramref name="Input"/>, removing any leading instances of <paramref name="Delim"/> by offsetting its start position without modifying its data or creating a new string instance
            </summary>
            <param name="Input">The string memory to trim</param>
            <param name="Delim">The character to trim out of the input</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.StringCommon.TrimStart(CssUI.StringPtr,System.Char[])">
            <summary>
            Modifies the given <paramref name="Input"/>, removing any leading instances of <paramref name="Delims"/> by offsetting its start position without modifying its data or creating a new string instance
            </summary>
            <param name="Input">The string memory to trim</param>
            <param name="Delims">The characters to trim out of the input</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.StringCommon.TrimStart(CssUI.StringPtr,CssUI.Filters.Filter{System.Char})">
            <summary>
            Modifies the given <paramref name="Input"/>, removing any leading code points which do not match the given <paramref name="Filter"/> by offsetting its start position without modifying its data or creating a new string instance
            </summary>
            <param name="Input">The string memory to trim</param>
            <param name="Filter">The filter used to trim characters out of the input</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.StringCommon.TrimStart(CssUI.StringPtr,System.Predicate{System.Char})">
            <summary>
            Modifies the given <paramref name="Input"/>, removing any leading code points which match the given <paramref name="Predicate"/> by offsetting its start position without modifying its data or creating a new string instance
            </summary>
            <param name="Input">The string memory to trim</param>
            <param name="Predicate">The filter used to trim characters out of the input</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.StringCommon.TrimEnd(CssUI.StringPtr,System.Char)">
            <summary>
            Modifies the given <paramref name="Input"/>, removing any trailing instances of <paramref name="Delim"/> by offsetting its end position without modifying its data or creating a new string instance
            </summary>
            <param name="Input">The string memory to trim</param>
            <param name="Delim">The character to trim out of the input</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.StringCommon.TrimEnd(CssUI.StringPtr,System.Char[])">
            <summary>
            Modifies the given <paramref name="Input"/>, removing any trailing instances of <paramref name="Delims"/> by offsetting its end position without modifying its data or creating a new string instance
            </summary>
            <param name="Input">The string memory to trim</param>
            <param name="Delims">The characters to trim out of the input</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.StringCommon.TrimEnd(CssUI.StringPtr,CssUI.Filters.Filter{System.Char})">
            <summary>
            Modifies the given <paramref name="Input"/>, removing any trailing code points which do not match the given <paramref name="Filter"/> by offsetting its end position without modifying its data or creating a new string instance
            </summary>
            <param name="Input">The string memory to trim</param>
            <param name="Filter">The filter used to trim characters out of the input</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.StringCommon.TrimEnd(CssUI.StringPtr,System.Predicate{System.Char})">
            <summary>
            Modifies the given <paramref name="Input"/>, removing any trailing code points which match the given <paramref name="Predicate"/> by offsetting its end position without modifying its data or creating a new string instance
            </summary>
            <param name="Input">The string memory to trim</param>
            <param name="Predicate">The filter used to trim characters out of the input</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.StringCommon.Strtok(CssUI.StringPtr,System.Char)">
            <summary>
            Splits a string <paramref name="Source"/> into tokens based on a given delimiter(s)
            </summary>
            <param name="Source">The string to tokenize</param>
            <param name="Delim">The delimiter(s) that should seperate each token</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.StringCommon.Strtok(CssUI.StringPtr,System.Char[])">
            <summary>
            Splits a string <paramref name="Source"/> into tokens based on a given delimiter(s)
            </summary>
            <param name="Source">The string to tokenize</param>
            <param name="Delims">The delimiter(s) that should seperate each token</param>
            <returns></returns>
            DO NOT INLINE THIS FUNCTION
        </member>
        <member name="M:CssUI.StringCommon.Strtok(CssUI.StringPtr,CssUI.Filters.Filter{System.Char})">
            <summary>
            Splits a string <paramref name="Source"/> into tokens based on a given delimeter(s)
            </summary>
            <param name="Source">The string to tokenize</param>
            <param name="Filter">The delimiter(s) that should seperate each token</param>
            <returns></returns>
            /// DO NOT INLINE THIS FUNCTION
        </member>
        <member name="M:CssUI.StringCommon.Replace(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.ValueTuple{System.Char,CssUI.StringPtr}[])">
            <summary>
            Replaces all characters indicated by the first value for each of the <paramref name="Replacements"/>, with the characters provided by their second value
            </summary>
            <param name="Source">Target string</param>
            <param name="Trim">If <c>True</c> then leading and trailing ends of the returned string will have the <paramref name="substituteData"/> stripped from them</param>
            <param name="Replacements">A series of tuples containing characters to be replaced and the characters which will replace each of them</param>
            <returns>Altered string</returns>
        </member>
        <member name="M:CssUI.StringCommon.Replace(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.ValueTuple{System.Predicate{System.Char},CssUI.StringPtr}[])">
            <summary>
            Replaces all characters indicated by the first value for each of the <paramref name="Replacements"/>, with the characters provided by their second value
            </summary>
            <param name="Source">Target string</param>
            <param name="Trim">If <c>True</c> then leading and trailing ends of the returned string will have the <paramref name="substituteData"/> stripped from them</param>
            <param name="Replacements">A series of tuples containing characters to be replaced and the characters which will replace each of them</param>
            <returns>Altered string</returns>
        </member>
        <member name="M:CssUI.StringCommon.Replace(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.ValueTuple{CssUI.Filters.Filter{System.Char},CssUI.StringPtr}[])">
            <summary>
            Replaces all characters indicated by the first value for each of the <paramref name="Replacements"/>, with the characters provided by their second value
            </summary>
            <param name="Source">Target string</param>
            <param name="Trim">If <c>True</c> then leading and trailing ends of the returned string will have the <paramref name="substituteData"/> stripped from them</param>
            <param name="Replacements">A series of tuples containing characters to be replaced and the characters which will replace each of them</param>
            <returns>Altered string</returns>
        </member>
        <member name="M:CssUI.StringCommon.Transform(System.ReadOnlyMemory{System.Char},System.Func{System.Char,System.Char})">
            <summary>
            Runs a transform function on every character in a string and returns a new string containing the transformed characters
            </summary>
            <param name="buffMem">String memory</param>
            <param name="Transform">Function that takes in a char and outputs one that should go into the new string. Returning a null char will cause that char to be omitted from the returned string</param>
            <returns>Altered string</returns>
        </member>
        <member name="M:CssUI.StringCommon.Transform(System.ReadOnlySpan{System.Char},System.Func{System.Char,System.Char})">
            <summary>
            Runs a transform function on every character in a string and returns a new string containing the transformed characters
            </summary>
            <param name="buffMem">String memory</param>
            <param name="Transform">Function that takes in a char and outputs one that should go into the new string. Returning a null char will cause that char to be omitted from the returned string</param>
            <returns>Altered string</returns>
        </member>
        <member name="M:CssUI.StringCommon.Scan_Match(System.ReadOnlySpan{System.Char},System.Char[],System.Int32,System.Int32@)">
            <summary>
            Searches the given string and returns the next location where its value matches the search value
            </summary>
            <param name="Offset">Offset to begin searching from</param>
            <returns>-1 on failure</returns>
        </member>
        <member name="M:CssUI.StringCommon.Scan_Mismatch(System.ReadOnlySpan{System.Char},System.Char[],System.Int32)">
            <summary>
            Searches the given string and returns the next location where its value doesn't match the search value
            </summary>
            <param name="Offset">Offset to begin searching from</param>
            <returns>-1 on failure</returns>
        </member>
        <member name="M:CssUI.StringCommon.Scan_Match(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Searches the given string and returns the next location where its value matches the search value
            </summary>
            <param name="Offset">Offset to begin searching from</param>
            <returns>-1 on failure</returns>
        </member>
        <member name="M:CssUI.StringCommon.Scan_Mismatch(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Searches the given string and returns the next location where its value doesn't match the search value
            </summary>
            <param name="Offset">Offset to begin searching from</param>
            <returns>-1 on failure</returns>
        </member>
        <member name="M:CssUI.StringCommon.Scan_Match(System.ReadOnlySpan{System.Char},System.Predicate{System.Char},System.Int32)">
            <summary>
            Searches the given string and returns the next location where its value matches the search value
            </summary>
            <param name="Offset">Offset to begin searching from</param>
            <returns>-1 on failure</returns>
        </member>
        <member name="M:CssUI.StringCommon.Scan_Mismatch(System.ReadOnlySpan{System.Char},System.Predicate{System.Char},System.Int32)">
            <summary>
            Searches the given string and returns the next location where its value doesn't match the search value
            </summary>
            <param name="Offset">Offset to begin searching from</param>
            <returns>-1 on failure</returns>
        </member>
        <member name="M:CssUI.StringCommon.Scan_Match(System.ReadOnlySpan{System.Char},System.Predicate{System.Char}[],System.Int32,System.Int32@)">
            <summary>
            Searches the given string and returns the next location where its value matches the search value
            </summary>
            <param name="Offset">Offset to begin searching from</param>
            <returns>-1 on failure</returns>
        </member>
        <member name="M:CssUI.StringCommon.Scan_Mismatch(System.ReadOnlySpan{System.Char},System.Predicate{System.Char}[],System.Int32)">
            <summary>
            Searches the given string and returns the next location where its value doesn't match the search value
            </summary>
            <param name="Offset">Offset to begin searching from</param>
            <returns>-1 on failure</returns>
        </member>
        <member name="M:CssUI.StringCommon.Scan_Match(System.ReadOnlySpan{System.Char},CssUI.Filters.Filter{System.Char},System.Int32)">
            <summary>
            Searches the given string and returns the next location where its value matches the search value
            </summary>
            <param name="Offset">Offset to begin searching from</param>
            <returns>-1 on failure</returns>
        </member>
        <member name="M:CssUI.StringCommon.Scan_Mismatch(System.ReadOnlySpan{System.Char},CssUI.Filters.Filter{System.Char},System.Int32)">
            <summary>
            Searches the given string and returns the next location where its value doesn't match the search value
            </summary>
            <param name="Offset">Offset to begin searching from</param>
            <returns>-1 on failure</returns>
        </member>
        <member name="M:CssUI.StringCommon.Scan_Match(System.ReadOnlySpan{System.Char},CssUI.Filters.Filter{System.Char}[],System.Int32,System.Int32@)">
            <summary>
            Searches the given string and returns the next location where its value matches the search value
            </summary>
            <param name="Offset">Offset to begin searching from</param>
            <returns>-1 on failure</returns>
        </member>
        <member name="M:CssUI.StringCommon.Scan_Mismatch(System.ReadOnlySpan{System.Char},CssUI.Filters.Filter{System.Char}[],System.Int32)">
            <summary>
            Searches the given string and returns the next location where its value doesn't match the search value
            </summary>
            <param name="Offset">Offset to begin searching from</param>
            <returns>-1 on failure</returns>
        </member>
        <member name="T:CssUI.EnumData">
            <summary>
            Holds ancillary data about an enum value
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_LINE_FEED">
            <summary>
            Newline (\n)
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_FORM_FEED">
            <summary>
            Form Feed
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_CARRIAGE_RETURN">
            <summary>
            Carriage Return (\r)
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_SPACE">
            <summary>
            " "
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_C0_INFO_SEPERATOR">
            <summary>
            C0 Control code: INFORMATION SEPARATOR ONE
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_EXCLAMATION_POINT">
            <summary>
            !
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_QUESTION_MARK">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_AT_SIGN">
            <summary>
            @
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_DOLLAR_SIGN">
            <summary>
            $
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:CssUI.UnicodeCommon.CHAR_AMPERSAND" -->
        <member name="F:CssUI.UnicodeCommon.CHAR_ASTERISK">
            <summary>
            *
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_CARET">
            <summary>
            ^
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_BACKTICK">
            <summary>
            `
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_TILDE">
            <summary>
            ~
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_PIPE">
            <summary>
            |
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_EQUALS">
            <summary>
            =
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_LEFT_CHEVRON">
            <summary>
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_RIGHT_CHEVRON">
            <summary>
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_LEFT_CURLY_BRACKET">
            <summary>
            {
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_RIGHT_CURLY_BRACKET">
            <summary>
            }
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_LEFT_SQUARE_BRACKET">
            <summary>
            [
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_RIGHT_SQUARE_BRACKET">
            <summary>
            ]
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_LEFT_PARENTHESES">
            <summary>
            (
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_RIGHT_PARENTHESES">
            <summary>
            )
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_QUOTATION_MARK">
            <summary>
            "
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_APOSTRAPHE">
            <summary>
            '
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_PLUS_SIGN">
            <summary>
            +
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_PERCENT">
            <summary>
            %
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_HYPHEN_MINUS">
            <summary>
            -
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_UNDERSCORE">
            <summary>
            _
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_FULL_STOP">
            <summary>
            .
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_SOLIDUS">
            <summary>
            /
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_REVERSE_SOLIDUS">
            <summary>
            \
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_HASH">
            <summary>
            #
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_COMMA">
            <summary>
            ,
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_COLON">
            <summary>
            :
            </summary>
        </member>
        <member name="F:CssUI.UnicodeCommon.CHAR_SEMICOLON">
            <summary>
            ;
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:CssUI.UnicodeCommon.CHAR_NBSP" -->
        <member name="M:CssUI.UnicodeCommon.Is_Surrogate_Code_Point(System.Char)">
            <summary>
            A surrogate is a code point that is in the range U+D800 to U+DFFF, inclusive.
            </summary>
            <param name="codePoint">Code point to check</param>
        </member>
        <member name="M:CssUI.UnicodeCommon.Is_NonCharacter_Code_Point(System.Char)">
            <summary>
            True if char is an non-character code point
            </summary>
            <param name="codePoint">Code point to check</param>
        </member>
        <member name="M:CssUI.UnicodeCommon.Is_Ascii_Whitespace(System.Char)">
            <summary>
            True if char is an ASCII whitespace character
            </summary>
            <param name="c">Code point to check</param>
        </member>
        <member name="M:CssUI.UnicodeCommon.Is_Ascii_Code_Point(System.Char)">
            <summary>
            True if code point is in the range U+0000 NULL to U+007F DELETE, inclusive.
            </summary>
            <param name="codePoint">Code point to check</param>
        </member>
        <member name="M:CssUI.UnicodeCommon.Is_Ascii_Plus_Or_Minus(System.Char)">
            <summary>
            True if code point is an ASCII plus or minus character
            </summary>
            <param name="codePoint">Code point to check</param>
        </member>
        <member name="M:CssUI.UnicodeCommon.Is_Ascii_Tab_Or_Newline(System.Char)">
            <summary>
            True if code point is an ASCII tab or newline character
            </summary>
            <param name="codePoint">Code point to check</param>
        </member>
        <member name="M:CssUI.UnicodeCommon.Is_Ascii_Control(System.Char)">
            <summary>
            True if code point is an ASCII control character
            </summary>
            <param name="codePoint">Code point to check</param>
        </member>
        <member name="M:CssUI.UnicodeCommon.Is_Ascii_Control_Or_Space(System.Char)">
            <summary>
            True if code point is an ASCII control or space character
            </summary>
            <param name="codePoint">Code point to check</param>
        </member>
        <member name="M:CssUI.UnicodeCommon.Is_Ascii_Alphanumeric(System.Char)">
            <summary>
            True if code point is an ASCII alphabet or digit character
            </summary>
            <param name="c">Code point to check</param>
        </member>
        <member name="M:CssUI.UnicodeCommon.Is_Ascii_Digit(System.Char)">
            <summary>
            True if code point is an ASCII digit character
            </summary>
            <param name="codePoint">Code point to check</param>
        </member>
        <member name="M:CssUI.UnicodeCommon.Is_Ascii_Alpha(System.Char)">
            <summary>
            True if code point is an ASCII alphabet character
            </summary>
            <param name="c">Code point to check</param>
        </member>
        <member name="M:CssUI.UnicodeCommon.Is_ASCII_Lower_Alpha(System.Char)">
            <summary>
            True if code point is ASCII alpha lowercase character
            </summary>
            <param name="codePoint">Code point to check</param>
        </member>
        <member name="M:CssUI.UnicodeCommon.Is_ASCII_Upper_Alpha(System.Char)">
            <summary>
            True if code point is ASCII alpha uppercase character
            </summary>
            <param name="codePoint">Code point to check</param>
        </member>
        <member name="M:CssUI.UnicodeCommon.Is_Ascii_Hex_Digit(System.Char)">
            <summary>
            True if code point is an ASCII hex-digit character (0-9 | a-f | A-F)
            </summary>
            <param name="codePoint">Code point to check</param>
        </member>
        <member name="M:CssUI.UnicodeCommon.Is_Ascii_Hex_Digit_Lower(System.Char)">
            <summary>
            True if code point is an ASCII hex-digit character excluding uppercase alpha characters
            </summary>
            <param name="codePoint">Code point to check</param>
        </member>
        <member name="M:CssUI.UnicodeCommon.Is_Ascii_Hex_Digit_Upper(System.Char)">
            <summary>
            True if code point is an ASCII hex-digit character excluding lowercase alpha characters
            </summary>
            <param name="codePoint">Code point to check</param>
        </member>
        <member name="M:CssUI.UnicodeCommon.To_ASCII_Lower_Alpha(System.Char)">
            <summary>
            Converts an ASCII uppercase character to its lowecase form
            </summary>
            <param name="codePoint">Code point to transform</param>
        </member>
        <member name="M:CssUI.UnicodeCommon.To_ASCII_Upper_Alpha(System.Char)">
            <summary>
            Converts an ASCII lowercase character to its uppercase form
            </summary>
            <param name="codePoint">Code point to transform</param>
        </member>
        <member name="M:CssUI.UnicodeCommon.Ascii_Digit_To_Value(System.Char)">
            <summary>
            Converts an ASCII digit character to its numeric value
            </summary>
            <param name="c">Code point to convert</param>
        </member>
        <member name="P:CssUI.UnicodeCommon.HexLookupTable">
            <summary>
            Map of ASCII code points to their hex value.
            0xFF is a placeholder.
            </summary>
        </member>
        <member name="M:CssUI.UnicodeCommon.Ascii_Hex_To_Value(System.Char)">
            <summary>
            Converts an ASCII hexadecimal character to its numeric value
            </summary>
            <param name="c">Code point to convert</param>
        </member>
        <member name="M:CssUI.UnicodeCommon.Ascii_Value_To_Hex(System.Char,System.UInt32)">
            <summary>
            Converts a numeric value to its ASCII hexadecimal character(s)
            </summary>
            <param name="codePoint">Code point to convert</param>
            <param name="Digits">Minimum number of digits to include</param>
            <returns>Characters representing the hexadecimal form of the given value</returns>
        </member>
        <member name="M:CssUI.UnicodeCommon.Ascii_Value_To_Hex(System.Int32,System.UInt32)">
            <summary>
            Converts a numeric value to its ASCII hexadecimal character(s)
            </summary>
            <param name="value">Value to convert</param>
            <param name="Digits">Minimum number of digits to include</param>
            <returns>Characters representing the hexadecimal form of the given value</returns>
        </member>
        <member name="M:CssUI.UnicodeCommon.Ascii_Value_To_Hex(System.UInt32,System.UInt32)">
            <summary>
            Converts a numeric value to its ASCII hexadecimal character(s)
            </summary>
            <param name="value">Value to convert</param>
            <param name="Digits">Minimum number of digits to include</param>
            <returns>Characters representing the hexadecimal form of the given value</returns>
        </member>
        <member name="M:CssUI.UnicodeCommon.Ascii_Value_To_Hex(System.Int64,System.UInt32)">
            <summary>
            Converts a numeric value to its ASCII hexadecimal character(s)
            </summary>
            <param name="value">Value to convert</param>
            <param name="Digits">Minimum number of digits to include</param>
            <returns>Characters representing the hexadecimal form of the given value</returns>
        </member>
        <member name="M:CssUI.UnicodeCommon.Ascii_Value_To_Hex(System.UInt64,System.UInt32)">
            <summary>
            Converts a numeric value to its ASCII hexadecimal character(s)
            </summary>
            <param name="value">Value to convert</param>
            <param name="Digits">Minimum number of digits to include</param>
            <returns>Characters representing the hexadecimal form of the given value</returns>
        </member>
        <member name="M:CssUI.UnicodeCommon.Has_ASCII_Lower_Alpha(System.ReadOnlySpan{System.Char})">
            <summary>
            True if string contains ASCII alpha lowercase characters
            </summary>
        </member>
        <member name="M:CssUI.UnicodeCommon.Has_ASCII_Upper_Alpha(System.ReadOnlySpan{System.Char})">
            <summary>
            True if string contains ASCII alpha uppercase characters
            </summary>
        </member>
        <member name="M:CssUI.UnicodeCommon.Convert_To_Scalar_Values(System.ReadOnlyMemory{System.Char})">
            <summary>
            Converts a given string into unicode scalar values
            </summary>
            <param name="stringMem"></param>
        </member>
        <member name="T:CssUI.UserAgent">
            <summary>
            Provides stuff related to our "user agent"
            </summary>
        </member>
        <member name="T:CssUI.UIWindowBridge">
            <summary>
            Bridges the gap between the abstracted DOM Window object and the platform specific windowing/rendering systems
            </summary>
        </member>
        <member name="M:CssUI.UIWindowBridge.Run_Event_Loop">
            <summary>
            Performs main-loop processing for the DOM window
            </summary>
        </member>
        <member name="M:CssUI.UIWindowBridge.Handle_Keyboard_Input(CssUI.Devices.KeyboardDevice,CssUI.UIWindowBridge.EKeyboardInputType,CssUI.Devices.EKeyboardCode,System.Char)">
            <summary>
            Passes keyboard input to the DOM window
            </summary>
        </member>
        <member name="M:CssUI.UIWindowBridge.Handle_Pointer_Input(CssUI.Devices.PointerDevice,CssUI.UIWindowBridge.EPointerInputType)">
            <summary>
            Passes pointer (Mouse/Touch/Tablet) inputs to the DOM window
            </summary>
        </member>
        <member name="T:CssUI.Filters.FilterHTTPWhitespace">
            <summary>
            Skips HTTP whitespace chars
            </summary>
        </member>
        <member name="T:CssUI.Filters.FilterCharNonSelectable">
            <summary>
            Rejects any non-selectable unicode code points
            </summary>
        </member>
        <member name="T:CssUI.Filters.FilterCRLF">
            <summary>
            Skips CR LF chars
            </summary>
        </member>
        <member name="T:CssUI.Filters.FilterUnicodeOOB">
            <summary>
            Filters any unicode characters which exceed 0xFFFF
            </summary>
        </member>
        <member name="T:CssUI.Filters.FilterWhitespace">
            <summary>
            Skips ASCII whitespace chars
            </summary>
        </member>
        <member name="T:CssUI.Devices.KeyboardDevice">
            <summary>
            Represents the systems keyboard device
            </summary>
        </member>
        <member name="M:CssUI.Devices.KeyboardDevice.IsDown(CssUI.Devices.EKeyboardCode)">
            <summary>
            Returns true if the given <paramref name="key"/> on the systems current keyboard device is currently in the 'down' state
            </summary>
            <param name="key">They key to check for</param>
        </member>
        <member name="M:CssUI.Devices.KeyboardDevice.Has_Key(CssUI.Devices.EKeyboardCode)">
            <summary>
            Returns true if the systems current keyboard device has the given <paramref name="key"/> on it
            </summary>
            <param name="key">They key to check for</param>
        </member>
        <member name="M:CssUI.Devices.KeyboardDevice.Has_Key(System.Char)">
            <summary>
            Returns true if the systems current keyboard device has the given <paramref name="key"/> on it
            </summary>
            <param name="key">They key to check for</param>
        </member>
        <member name="M:CssUI.Devices.KeyboardDevice.TranslateKey(System.Char)">
            <summary>
            Translates a given keyboard key into a key character
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Invalid">
            <summary>
            This value code should be used when no other value given in this specification is appropriate.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Backquote">
            <summary>
            `~ on a US keyboard. This is the 半角/全角/漢字 (hankaku/zenkaku/kanji) key on Japanese keyboards
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Backslash">
            <summary>
            Used for both the US \| (on the 101-key layout) and also for the key    located between the " and Enter keys on row C of the 102-, 104- and 106-key layouts. Labelled #~ on a UK (102) keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Backspace">
            <summary>
            Backspace or ⌫.	Labelled Delete on Apple keyboards.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.BracketLeft">
            <summary>
            [{ on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.BracketRight">
            <summary>
            ]} on a US keyboard.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:CssUI.Devices.EKeyboardCode.Comma" -->
        <member name="F:CssUI.Devices.EKeyboardCode.Digit0">
            <summary>
            0 ) on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Digit1">
            <summary>
            1 ! on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Digit2">
            <summary>
            2 @ on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Digit3">
            <summary>
            3 # on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Digit4">
            <summary>
            4 $ on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Digit5">
            <summary>
            5 % on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Digit6">
            <summary>
            6 ^ on a US keyboard.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:CssUI.Devices.EKeyboardCode.Digit7" -->
        <member name="F:CssUI.Devices.EKeyboardCode.Digit8">
            <summary>
            8 * on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Digit9">
            <summary>
            9 ( on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Equal">
            <summary>
            = + on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.IntlBackslash">
            <summary>
            Located between the left Shift and Z keys.	Labelled \| on a UK keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.IntlRo">
            <summary>
            Located between the / and right Shift keys.	Labelled \ (ro) on a Japanese keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.IntlYen">
            <summary>
            Located between the = and Backspace keys.	Labelled  (yen) on a Japanese keyboard. \/ on a Russian keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyA">
            <summary>
            a on a US keyboard.Labelled q on an AZERTY (e.g., French) keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyB">
            <summary>
            b on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyC">
            <summary>
            c on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyD">
            <summary>
            d on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyE">
            <summary>
            e on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyF">
            <summary>
            f on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyG">
            <summary>
            g on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyH">
            <summary>
            h on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyI">
            <summary>
            i on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyJ">
            <summary>
            j on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyK">
            <summary>
            k on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyL">
            <summary>
            l on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyM">
            <summary>
            m on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyN">
            <summary>
            n on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyO">
            <summary>
            o on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyP">
            <summary>
            p on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyQ">
            <summary>
            q on a US keyboard.Labelled a on an AZERTY (e.g., French) keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyR">
            <summary>
            r on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyS">
            <summary>
            s on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyT">
            <summary>
            t on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyU">
            <summary>
            u on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyV">
            <summary>
            v on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyW">
            <summary>
            w on a US keyboard.Labelled z on an AZERTY (e.g., French) keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyX">
            <summary>
            x on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyY">
            <summary>
            y on a US keyboard.Labelled z on a QWERTZ (e.g., German) keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KeyZ">
            <summary>
            z on a US keyboard.Labelled w on an AZERTY (e.g., French) keyboard, and y on a QWERTZ (e.g., German) keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Minus">
            <summary>
            -_ on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Period">
            <summary>
            .> on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Quote">
            <summary>
            '" on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Semicolon">
            <summary>
            ;: on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Slash">
            <summary>
            /? on a US keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.AltLeft">
            <summary>
            Alt, Option or ⌥.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.AltRight">
            <summary>
            Alt, Option or ⌥.	This is labelled AltGr key on many keyboard layouts.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.CapsLock">
            <summary>
            CapsLock or ⇪
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.ContextMenu">
            <summary>
            The application context menu key, which is typically found between the right Meta key and the right Control key.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.ControlLeft">
            <summary>
            Control or ⌃
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.ControlRight">
            <summary>
            Control or ⌃
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Enter">
            <summary>
            Enter or ↵. Labelled Return on Apple keyboards.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.MetaLeft">
            <summary>
            The Windows, ⌘, Command or other OS symbol key.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.MetaRight">
            <summary>
            The Windows, ⌘, Command or other OS symbol key.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.ShiftLeft">
            <summary>
            Shift or ⇧
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.ShiftRight">
            <summary>
            Shift or ⇧
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Space">
            <summary>
            (space)
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Tab">
            <summary>
            Tab or ⇥
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Convert">
            <summary>
            Japanese: 変換 (henkan)
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.KanaMode">
            <summary>
            Japanese: カタカナ/ひらがな/ローマ字 (katakana/hiragana/romaji)
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Lang1">
            <summary>
            Korean: HangulMode 한/영 (han/yeong) Japanese (Mac keyboard): かな (kana)
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Lang2">
            <summary>
            Korean: Hanja 한자 (hanja) Japanese (Mac keyboard): 英数 (eisu)
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Lang3">
            <summary>
            Japanese (word-processing keyboard): Katakana
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Lang4">
            <summary>
            Japanese (word-processing keyboard): Hiragana
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Lang5">
            <summary>
            Japanese (word-processing keyboard): Zenkaku/Hankaku
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NonConvert">
            <summary>
            Japanese: 無変換 (muhenkan)
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Delete">
            <summary>
            ⌦. The forward delete key.	Note that on Apple keyboards, the key labelled Delete on the main part of the keyboard should be encoded as "Backspace".
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.End">
            <summary>
            Page Down, End or ↘
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Help">
            <summary>
            Help. Not present on standard PC keyboards.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Home">
            <summary>
            Home or ↖
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Insert">
            <summary>
            Insert or Ins. Not present on Apple keyboards.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.PageDown">
            <summary>
            Page Down, PgDn or ⇟
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.PageUp">
            <summary>
            Page Up, PgUp or ⇞
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.ArrowDown">
            <summary>
            ↓
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.ArrowLeft">
            <summary>
            ←
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.ArrowRight">
            <summary>
            →
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.ArrowUp">
            <summary>
            ↑
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NumLock">
            <summary>
            On the Mac, the "NumLock" code should be used for the numpad Clear key.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Numpad0">
            <summary>
            0 Ins on a keyboard 0 on a phone or remote control
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Numpad1">
            <summary>
            1 End on a keyboard 1 or 1 QZ on a phone or remote control
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Numpad2">
            <summary>
            2 ↓ on a keyboard 2 ABC on a phone or remote control
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Numpad3">
            <summary>
            3 PgDn on a keyboard 3 DEF on a phone or remote control
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Numpad4">
            <summary>
            4 ← on a keyboard 4 GHI on a phone or remote control
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Numpad5">
            <summary>
            5 on a keyboard 5 JKL on a phone or remote control
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Numpad6">
            <summary>
            6 → on a keyboard 6 MNO on a phone or remote control
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Numpad7">
            <summary>
            7 Home on a keyboard 7 PQRS or 7 PRS on a phone  or remote control
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Numpad8">
            <summary>
            8 ↑ on a keyboard 8 TUV on a phone or remote control
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Numpad9">
            <summary>
            9 PgUp on a keyboard 9 WXYZ or 9 WXY on a phone  or remote control
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NumpadAdd">
            <summary>
            +
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NumpadBackspace">
            <summary>
            Found on the Microsoft Natural Keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NumpadClear">
            <summary>
            C or AC (All Clear). Also for use with numpads that have a Clear key that is separate from the NumLock key. On the Mac, the numpad Clear key should always be encoded as "NumLock".
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NumpadClearEntry">
            <summary>
            CE (Clear Entry)
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NumpadComma">
            <summary>
            , (thousands separator). For locales where the thousands separator	is a "." (e.g., Brazil), this key may generate a ..
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NumpadDecimal">
            <summary>
            . Del. For locales where the decimal separator is "," (e.g., Brazil), this key may generate a,.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NumpadDivide">
            <summary>
            /
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NumpadEnter">
            <summary>
            Newline
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NumpadEqual">
            <summary>
            =
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NumpadHash">
            <summary>
            # on a phone or remote control device. This key is typically found	below the 9 key and to the right of the 0 key.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NumpadMemoryAdd">
            <summary>
            M+ Add current entry to the value stored in memory.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NumpadMemoryClear">
            <summary>
            MC Clear the value stored in memory.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NumpadMemoryRecall">
            <summary>
            MR Replace the current entry with the value stored in memory.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NumpadMemoryStore">
            <summary>
            MS Replace the value stored in memory with the current entry.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NumpadMemorySubtract">
            <summary>
            M- Subtract current entry from the value stored in memory.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NumpadMultiply">
            <summary>
            * on a keyboard. For use with numpads that provide mathematical operations (+, -, * and /). Use "NumpadStar" for the * key on phones and remote controls.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NumpadParenLeft">
            <summary>
            ( Found on the Microsoft Natural Keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NumpadParenRight">
            <summary>
            ) Found on the Microsoft Natural Keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NumpadStar">
            <summary>
            * on a phone or remote control device.	This key is typically found below the 7 key and to the left of the 0 key. Use "NumpadMultiply" for the * key on numeric keypads.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.NumpadSubtract">
            <summary>
            -
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Escape">
            <summary>
            Esc or ⎋
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.F1">
            <summary>
            F1
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.F2">
            <summary>
            F2
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.F3">
            <summary>
            F3
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.F4">
            <summary>
            F4
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.F5">
            <summary>
            F5
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.F6">
            <summary>
            F6
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.F7">
            <summary>
            F7
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.F8">
            <summary>
            F8
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.F9">
            <summary>
            F9
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.F10">
            <summary>
            F10
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.F11">
            <summary>
            F11
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.F12">
            <summary>
            F12
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Fn">
            <summary>
            Fn This is typically a hardware key that does not generate a separate   code. Most keyboards do not place this key in the function section, but it is included here to keep it with related keys.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.FnLock">
            <summary>
            FLock or FnLock. Function Lock key. Found on the Microsoft  Natural Keyboard.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.PrintScreen">
            <summary>
            PrtScr SysRq or Print Screen
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.ScrollLock">
            <summary>
            Scroll Lock
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Pause">
            <summary>
            Pause Break
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.BrowserBack">
            <summary>
            Some laptops place this key to the left of the ↑ key.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.BrowserFavorites">
            <summary>
            No definition
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.BrowserForward">
            <summary>
            Some laptops place this key to the right of the ↑ key.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.BrowserHome">
            <summary>
                    
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.BrowserRefresh">
            <summary>
                    
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.BrowserSearch">
            <summary>
                    
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.BrowserStop">
            <summary>
                    
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Eject">
            <summary>
            Eject or ⏏. This key is placed in the function  section on some Apple keyboards.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.LaunchApp1">
            <summary>
            Sometimes labelled My Computer on the keyboard
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.LaunchApp2">
            <summary>
            Sometimes labelled Calculator on the keyboard
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.LaunchMail">
            <summary>
                    
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.MediaPlayPause">
            <summary>
                    
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.MediaSelect">
            <summary>
                    
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.MediaStop">
            <summary>
                    
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.MediaTrackNext">
            <summary>
                    
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.MediaTrackPrevious">
            <summary>
                    
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Power">
            <summary>
            This key is placed in the function section on some Apple keyboards, replacing the Eject key.
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.Sleep">
            <summary>
                    
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.AudioVolumeDown">
            <summary>
                    
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.AudioVolumeMute">
            <summary>
                    
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.AudioVolumeUp">
            <summary>
                    
            </summary>
        </member>
        <member name="F:CssUI.Devices.EKeyboardCode.WakeUp">
            <summary>
            
            </summary>
        </member>
        <member name="T:CssUI.Devices.MouseDevice">
            <summary>
            Represents the systems mouse device
            </summary>
        </member>
        <member name="F:CssUI.Devices.EMouseButton.Left">
            <summary>Left mouse button</summary>
        </member>
        <member name="F:CssUI.Devices.EMouseButton.Middle">
            <summary>Middle mouse button (mouse wheel)</summary>
        </member>
        <member name="F:CssUI.Devices.EMouseButton.Right">
            <summary>Right mouse button</summary>
        </member>
        <member name="F:CssUI.Devices.EMouseButton.X1">
            <summary>Forwards button</summary>
        </member>
        <member name="F:CssUI.Devices.EMouseButton.X2">
            <summary>Backwards button</summary>
        </member>
        <member name="F:CssUI.Devices.PointerDevice.PointerID">
            <summary>
            A unique identifier for the pointer causing the event.
            This identifier MUST be unique from all other active pointers in the top-level browsing context (as defined by [HTML5]) at the time.
            A user agent MAY recycle previously retired values for pointerId from previous active pointers, if necessary.
            </summary>
        </member>
        <member name="F:CssUI.Devices.PointerDevice.IsPrimary">
            <summary>
            If <c>True</c> this device is the "master" pointer
            </summary>
            Docs: https://w3c.github.io/pointerevents/#the-primary-pointer
        </member>
        <member name="P:CssUI.Devices.PointerDevice.Buttons">
            <summary>
            All of the currently pressed buttons for this pointer device
            </summary>
        </member>
        <member name="P:CssUI.Devices.PointerDevice.Width">
            <summary>
            The width (magnitude on the X axis), in CSS pixels (see [CSS21]), of the contact geometry of the pointer.
            This value MAY be updated on each event for a given pointer.
            For inputs that typically lack contact geometry (such as a traditional mouse), and in cases where the actual geometry of the input is not detected by the hardware, this MUST return a default value of 1.
            </summary>
        </member>
        <member name="P:CssUI.Devices.PointerDevice.Height">
            <summary>
            The height (magnitude on the Y axis), in CSS pixels (see [CSS21]), of the contact geometry of the pointer.
            This value MAY be updated on each event for a given pointer.
            For inputs that typically lack contact geometry (such as a traditional mouse), and in cases where the actual geometry of the input is not detected by the hardware, this MUST return a default value of 1.
            </summary>
        </member>
        <member name="P:CssUI.Devices.PointerDevice.Pressure">
            <summary>
            The normalized pressure of the pointer input in the range of [0,1], where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively.
            For hardware and platforms that do not support pressure, the value MUST be 0.5 when in the active buttons state and 0 otherwise.
            Note: all pointerup events will have pressure 0.
            </summary>
        </member>
        <member name="P:CssUI.Devices.PointerDevice.TangentalPressure">
            <summary>
            The normalized tangential pressure (also known as barrel pressure), typically set by an additional control (e.g. a finger wheel on an airbrush stylus), of the pointer input in the range of [-1,1], where 0 is the neutral position of the control.
            Note that some hardware may only support positive values in the range of [0,1].
            For hardware and platforms that do not support tangential pressure, the value MUST be 0.
            </summary>
        </member>
        <member name="P:CssUI.Devices.PointerDevice.TiltX">
            <summary>
            The plane angle (in degrees, in the range of [-90,90]) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis.
            A positive tiltX is to the right.
            tiltX can be used along with tiltY to represent the tilt away from the normal of a transducer with the digitizer.
            For hardware and platforms that do not report tilt, the value MUST be 0.
            </summary>
        </member>
        <member name="P:CssUI.Devices.PointerDevice.TiltY">
            <summary>
            The plane angle (in degrees, in the range of [-90,90]) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis.
            A positive tiltY is towards the user.
            tiltY can be used along with tiltX to represent the tilt away from the normal of a transducer with the digitizer.
            For hardware and platforms that do not report tilt, the value MUST be 0.
            </summary>
        </member>
        <member name="P:CssUI.Devices.PointerDevice.Twist">
            <summary>
            The clockwise rotation (in degrees, in the range of [0,359]) of a transducer (e.g. pen stylus) around its own major axis.
            For hardware and platforms that do not report twist, the value MUST be 0.
            </summary>
        </member>
        <member name="F:CssUI.Enums.EAtomicStringFlags.CaseInsensitive">
            <summary>
            When comparing these strings compare them case-insensitively
            </summary>
        </member>
        <member name="F:CssUI.Enums.EAtomicStringFlags.HasUppercase">
            <summary>
            This atomic string contains uppercase characters
            </summary>
        </member>
        <member name="T:CssUI.Enums.EISO_15924">
            <summary>
            ISO 15924 language codes
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Adlam">
            <summary>
            Adlam
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Afaka">
            <summary>
            Afaka
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Caucasian_Albanian">
            <summary>
            Caucasian Albanian
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Ahom_Tai_Ahom">
            <summary>
            Ahom, Tai Ahom
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Arabic">
            <summary>
            Arabic
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Arabic_Nastaliq_variant">
            <summary>
            Arabic (Nastaliq variant)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Imperial_Aramaic">
            <summary>
            Imperial Aramaic
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Armenian">
            <summary>
            Armenian
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Avestan">
            <summary>
            Avestan
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Balinese">
            <summary>
            Balinese
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Bamum">
            <summary>
            Bamum
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Bassa_Vah">
            <summary>
            Bassa Vah
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Batak">
            <summary>
            Batak
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Bengali_Bangla">
            <summary>
            Bengali (Bangla)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Bhaiksuki">
            <summary>
            Bhaiksuki
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Blissymbols">
            <summary>
            Blissymbols
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Bopomofo">
            <summary>
            Bopomofo
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Brahmi">
            <summary>
            Brahmi
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Braille">
            <summary>
            Braille
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Buginese">
            <summary>
            Buginese
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Buhid">
            <summary>
            Buhid
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Chakma">
            <summary>
            Chakma
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Unified_Canadian_Aboriginal_Syllabics">
            <summary>
            Unified Canadian Aboriginal Syllabics
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Carian">
            <summary>
            Carian
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Cham">
            <summary>
            Cham
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Cherokee">
            <summary>
            Cherokee
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Cirth">
            <summary>
            Cirth
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Coptic">
            <summary>
            Coptic
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Cypro_Minoan">
            <summary>
            Cypro-Minoan
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Cypriot_syllabary">
            <summary>
            Cypriot syllabary
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Cyrillic">
            <summary>
            Cyrillic
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Cyrillic_Old_Church_Slavonic_variant">
            <summary>
            Cyrillic (Old Church Slavonic variant)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Devanagari_Nagari">
            <summary>
            Devanagari (Nagari)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Dogra">
            <summary>
            Dogra
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Deseret_Mormon">
            <summary>
            Deseret (Mormon)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Duployan_shorthand_Duployan_stenography">
            <summary>
            Duployan shorthand, Duployan stenography
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Egyptian_demotic">
            <summary>
            Egyptian demotic
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Egyptian_hieratic">
            <summary>
            Egyptian hieratic
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Egyptian_hieroglyphs">
            <summary>
            Egyptian hieroglyphs
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Elbasan">
            <summary>
            Elbasan
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Elymaic">
            <summary>
            Elymaic
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Ethiopic_Ge_ez">
            <summary>
            Ethiopic (Geʻez)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Khutsuri_Asomtavruli_and_Nuskhuri">
            <summary>
            Khutsuri (Asomtavruli and Nuskhuri)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Georgian_Mkhedruli_and_Mtavruli">
            <summary>
            Georgian (Mkhedruli and Mtavruli)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Glagolitic">
            <summary>
            Glagolitic
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Gunjala_Gondi">
            <summary>
            Gunjala Gondi
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Masaram_Gondi">
            <summary>
            Masaram Gondi
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Gothic">
            <summary>
            Gothic
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Grantha">
            <summary>
            Grantha
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Greek">
            <summary>
            Greek
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Gujarati">
            <summary>
            Gujarati
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Gurmukhi">
            <summary>
            Gurmukhi
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Han_with_Bopomofo_alias_for_Han__Bopomofo">
            <summary>
            Han with Bopomofo (alias for Han + Bopomofo)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Hangul_Hang_l_Hangeul">
            <summary>
            Hangul (Hangŭl, Hangeul)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Han_Hanzi_Kanji_Hanja">
            <summary>
            Han (Hanzi, Kanji, Hanja)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Hanunoo_Hanun_o">
            <summary>
            Hanunoo (Hanunóo)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Han_Simplified_variant">
            <summary>
            Han (Simplified variant)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Han_Traditional_variant">
            <summary>
            Han (Traditional variant)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Hatran">
            <summary>
            Hatran
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Hebrew">
            <summary>
            Hebrew
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Hiragana">
            <summary>
            Hiragana
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Anatolian_Hieroglyphs_Luwian_Hieroglyphs_Hittite_Hieroglyphs">
            <summary>
            Anatolian Hieroglyphs (Luwian Hieroglyphs, Hittite Hieroglyphs)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Pahawh_Hmong">
            <summary>
            Pahawh Hmong
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Nyiakeng_Puachue_Hmong">
            <summary>
            Nyiakeng Puachue Hmong
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Japanese_syllabaries_alias_for_Hiragana__Katakana">
            <summary>
            Japanese syllabaries (alias for Hiragana + Katakana)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Old_Hungarian_Hungarian_Runic">
            <summary>
            Old Hungarian (Hungarian Runic)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Indus_Harappan">
            <summary>
            Indus (Harappan)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Old_Italic_Etruscan_Oscan_etc">
            <summary>
            Old Italic (Etruscan, Oscan, etc.)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Jamo_alias_for_Jamo_subset_of_Hangul">
            <summary>
            Jamo (alias for Jamo subset of Hangul)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Javanese">
            <summary>
            Javanese
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Japanese_alias_for_Han__Hiragana__Katakana">
            <summary>
            Japanese (alias for Han + Hiragana + Katakana)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Jurchen">
            <summary>
            Jurchen
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Kayah_Li">
            <summary>
            Kayah Li
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Katakana">
            <summary>
            Katakana
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Kharoshthi">
            <summary>
            Kharoshthi
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Khmer">
            <summary>
            Khmer
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Khojki">
            <summary>
            Khojki
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Khitan_large_script">
            <summary>
            Khitan large script
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Khitan_small_script">
            <summary>
            Khitan small script
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Kannada">
            <summary>
            Kannada
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Korean_alias_for_Hangul__Han">
            <summary>
            Korean (alias for Hangul + Han)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Kpelle">
            <summary>
            Kpelle
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Kaithi">
            <summary>
            Kaithi
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Tai_Tham_Lanna">
            <summary>
            Tai Tham (Lanna)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Lao">
            <summary>
            Lao
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Latin_Fraktur_variant">
            <summary>
            Latin (Fraktur variant)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Latin_Gaelic_variant">
            <summary>
            Latin (Gaelic variant)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Latin">
            <summary>
            Latin
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Leke">
            <summary>
            Leke
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Lepcha_R_ng">
            <summary>
            Lepcha (Róng)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Limbu">
            <summary>
            Limbu
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Linear_A">
            <summary>
            Linear A
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Linear_B">
            <summary>
            Linear B
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Lisu_Fraser">
            <summary>
            Lisu (Fraser)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Loma">
            <summary>
            Loma
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Lycian">
            <summary>
            Lycian
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Lydian">
            <summary>
            Lydian
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Mahajani">
            <summary>
            Mahajani
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Makasar">
            <summary>
            Makasar
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Mandaic_Mandaean">
            <summary>
            Mandaic, Mandaean
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Manichaean">
            <summary>
            Manichaean
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Marchen">
            <summary>
            Marchen
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Mayan_hieroglyphs">
            <summary>
            Mayan hieroglyphs
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Medefaidrin_Oberi_Okaime_Oberi_kaim">
            <summary>
            Medefaidrin (Oberi Okaime, Oberi Ɔkaimɛ)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Mende_Kikakui">
            <summary>
            Mende Kikakui
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Meroitic_Cursive">
            <summary>
            Meroitic Cursive
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Meroitic_Hieroglyphs">
            <summary>
            Meroitic Hieroglyphs
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Malayalam">
            <summary>
            Malayalam
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Modi_Mo">
            <summary>
            Modi, Moḍī
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Mongolian">
            <summary>
            Mongolian
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Moon_Moon_code_Moon_script_Moon_type">
            <summary>
            Moon (Moon code, Moon script, Moon type)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Mro_Mru">
            <summary>
            Mro, Mru
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Meitei_Mayek_Meithei_Meetei">
            <summary>
            Meitei Mayek (Meithei, Meetei)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Multani">
            <summary>
            Multani
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Myanmar_Burmese">
            <summary>
            Myanmar (Burmese)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Nandinagari">
            <summary>
            Nandinagari
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Old_North_Arabian_Ancient_North_Arabian">
            <summary>
            Old North Arabian (Ancient North Arabian)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Nabataean">
            <summary>
            Nabataean
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Newa_Newar_Newari_Nep_la_lipi">
            <summary>
            Newa, Newar, Newari, Nepāla lipi
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Naxi_Dongba_na__i__to_ba__Nakhi_Tomba">
            <summary>
            Naxi Dongba (na²¹ɕi³³ to³³ba²¹, Nakhi Tomba)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Naxi_Geba_na__i__g__ba___Na_Khi_Gg__baw_Nakhi_Geba">
            <summary>
            Naxi Geba (na²¹ɕi³³ gʌ²¹ba²¹, 'Na-'Khi ²Ggŏ-¹baw, Nakhi Geba)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.N_Ko">
            <summary>
            N’Ko
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.N_shu">
            <summary>
            Nüshu
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Ogham">
            <summary>
            Ogham
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Ol_Chiki_Ol_Cemet__Ol_Santali">
            <summary>
            Ol Chiki (Ol Cemet’, Ol, Santali)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Old_Turkic_Orkhon_Runic">
            <summary>
            Old Turkic, Orkhon Runic
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Oriya_Odia">
            <summary>
            Oriya (Odia)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Osage">
            <summary>
            Osage
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Osmanya">
            <summary>
            Osmanya
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Palmyrene">
            <summary>
            Palmyrene
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Pau_Cin_Hau">
            <summary>
            Pau Cin Hau
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Old_Permic">
            <summary>
            Old Permic
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Phags_pa">
            <summary>
            Phags-pa
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Inscriptional_Pahlavi">
            <summary>
            Inscriptional Pahlavi
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Psalter_Pahlavi">
            <summary>
            Psalter Pahlavi
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Book_Pahlavi">
            <summary>
            Book Pahlavi
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Phoenician">
            <summary>
            Phoenician
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Miao_Pollard">
            <summary>
            Miao (Pollard)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Klingon_KLI_pIqaD">
            <summary>
            Klingon (KLI pIqaD)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Inscriptional_Parthian">
            <summary>
            Inscriptional Parthian
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Reserved_for_private_use_start">
            <summary>
            Reserved for private use (start)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Reserved_for_private_use_end">
            <summary>
            Reserved for private use (end)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Rejang_Redjang_Kaganga">
            <summary>
            Rejang (Redjang, Kaganga)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Hanifi_Rohingya">
            <summary>
            Hanifi Rohingya
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Rongorongo">
            <summary>
            Rongorongo
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Runic">
            <summary>
            Runic
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Samaritan">
            <summary>
            Samaritan
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Sarati">
            <summary>
            Sarati
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Old_South_Arabian">
            <summary>
            Old South Arabian
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Saurashtra">
            <summary>
            Saurashtra
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.SignWriting">
            <summary>
            SignWriting
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Shavian_Shaw">
            <summary>
            Shavian (Shaw)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Sharada__rad">
            <summary>
            Sharada, Śāradā
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Shuishu">
            <summary>
            Shuishu
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Siddham_Siddha__Siddham_t_k">
            <summary>
            Siddham, Siddhaṃ, Siddhamātṛkā
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Khudawadi_Sindhi">
            <summary>
            Khudawadi, Sindhi
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Sinhala">
            <summary>
            Sinhala
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Sogdian">
            <summary>
            Sogdian
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Old_Sogdian">
            <summary>
            Old Sogdian
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Sora_Sompeng">
            <summary>
            Sora Sompeng
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Soyombo">
            <summary>
            Soyombo
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Sundanese">
            <summary>
            Sundanese
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Syloti_Nagri">
            <summary>
            Syloti Nagri
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Syriac">
            <summary>
            Syriac
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Syriac_Estrangelo_variant">
            <summary>
            Syriac (Estrangelo variant)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Syriac_Western_variant">
            <summary>
            Syriac (Western variant)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Syriac_Eastern_variant">
            <summary>
            Syriac (Eastern variant)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Tagbanwa">
            <summary>
            Tagbanwa
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Takri__kr___kr">
            <summary>
            Takri, Ṭākrī, Ṭāṅkrī
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Tai_Le">
            <summary>
            Tai Le
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.New_Tai_Lue">
            <summary>
            New Tai Lue
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Tamil">
            <summary>
            Tamil
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Tangut">
            <summary>
            Tangut
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Tai_Viet">
            <summary>
            Tai Viet
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Telugu">
            <summary>
            Telugu
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Tengwar">
            <summary>
            Tengwar
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Tifinagh_Berber">
            <summary>
            Tifinagh (Berber)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Tagalog_Baybayin_Alibata">
            <summary>
            Tagalog (Baybayin, Alibata)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Thaana">
            <summary>
            Thaana
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Thai">
            <summary>
            Thai
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Tibetan">
            <summary>
            Tibetan
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Tirhuta">
            <summary>
            Tirhuta
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Ugaritic">
            <summary>
            Ugaritic
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Vai">
            <summary>
            Vai
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Visible_Speech">
            <summary>
            Visible Speech
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Warang_Citi_Varang_Kshiti">
            <summary>
            Warang Citi (Varang Kshiti)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Wancho">
            <summary>
            Wancho
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Woleai">
            <summary>
            Woleai
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Old_Persian">
            <summary>
            Old Persian
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Cuneiform_Sumero_Akkadian">
            <summary>
            Cuneiform, Sumero-Akkadian
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Yi">
            <summary>
            Yi
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Zanabazar_Square_Zanabazarin_D_rb_ljin_Useg_Xewtee_D_rb_ljin_Bicig_Horizontal_Square_Script">
            <summary>
            Zanabazar Square (Zanabazarin Dörböljin Useg, Xewtee Dörböljin Bicig, Horizontal Square Script)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Code_for_inherited_script">
            <summary>
            Code for inherited script
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Mathematical_notation">
            <summary>
            Mathematical notation
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Symbols_Emoji_variant">
            <summary>
            Symbols (Emoji variant)
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Symbols">
            <summary>
            Symbols
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Code_for_unwritten_documents">
            <summary>
            Code for unwritten documents
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Code_for_undetermined_script">
            <summary>
            Code for undetermined script
            </summary>
        </member>
        <member name="F:CssUI.Enums.EISO_15924.Code_for_uncoded_script">
            <summary>
            Code for uncoded script
            </summary>
        </member>
        <member name="T:CssUI.Enums.ETreePosition">
            <summary>
            Indicates the relative position between two TreeNodes
            </summary>
        </member>
        <member name="F:CssUI.Enums.ETreePosition.DISCONNECTED">
            <summary>
            Set when node and other are not in the same tree.
            </summary>
        </member>
        <member name="F:CssUI.Enums.ETreePosition.PRECEDING">
            <summary>
            Set when other is preceding node.
            </summary>
        </member>
        <member name="F:CssUI.Enums.ETreePosition.FOLLOWING">
            <summary>
            Set when other is following node.
            </summary>
        </member>
        <member name="F:CssUI.Enums.ETreePosition.CONTAINS">
            <summary>
            Set when other is an ancestor of node.
            </summary>
        </member>
        <member name="F:CssUI.Enums.ETreePosition.CONTAINED_BY">
            <summary>
            Set when other is a descendant of node.
            </summary>
        </member>
        <member name="M:CssUI.Difference.DiffEngine`1.Compile_Transformations(CssUI.DataConsumer{`0},CssUI.DataConsumer{`0},System.Int32@)">
            <summary>
            Compiles a list of positions and data to insert at said positions in order to make <paramref name="OldData"/> match <paramref name="NewData"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.Difference.DiffEngine`1.Compile(`0[]@,`0[]@)">
            <summary>
            Compiles a list of data-nodes which represent sequences of data and indicates what kind of change happened, if any.
            </summary>
        </member>
        <member name="M:CssUI.Difference.DiffEngine`1.Compile(CssUI.DataConsumer{`0},CssUI.DataConsumer{`0})">
            <summary>
            Compiles a list of data-nodes which represent sequences of data and indicates what kind of change happened, if any.
            </summary>
        </member>
        <member name="M:CssUI.Difference.DiffEngine`1.Get_Difference(`0[]@,`0[]@)">
            <summary>
            Compiles a list of differences between the <paramref name="New"/> and <paramref name="Old"/> data consumers
            </summary>
            <param name="Old"></param>
            <param name="New"></param>
            <returns>List of start/end ranges</returns>
        </member>
        <member name="M:CssUI.Difference.DiffEngine`1.Get_Difference(CssUI.DataConsumer{`0},CssUI.DataConsumer{`0})">
            <summary>
            Compiles a list of differences between the <paramref name="New"/> and <paramref name="Old"/> data consumers
            </summary>
            <param name="Old"></param>
            <param name="New"></param>
            <returns>List of start/end ranges</returns>
        </member>
        <member name="M:CssUI.Difference.DiffEngine`1.Consume(CssUI.DataConsumer{`0},CssUI.DataConsumer{`0})">
            <summary>
            Locates the next difference point between the <paramref name="New"/> and <paramref name="Old"/> data consumers
            </summary>
            <param name="Old"></param>
            <param name="New"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.Difference.DiffEngine`1.Scan_Lockstep_Match(CssUI.DataConsumer{`0},CssUI.DataConsumer{`0},System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Lockstep searches the two given streams and returns the next location where they match
            </summary>
            <param name="Offset">Offset to begin searching from</param>
        </member>
        <member name="M:CssUI.Difference.DiffEngine`1.Scan_Lockstep_Mismatch(CssUI.DataConsumer{`0},CssUI.DataConsumer{`0},System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Lockstep searches the two given streams returns the next location where they don't match
            </summary>
            <param name="Offset">Offset to begin searching from</param>
        </member>
        <member name="M:CssUI.Difference.DiffEngine`1.Scan_Match(CssUI.DataConsumer{`0},CssUI.DataConsumer{`0},System.Int32@,System.Int32)">
            <summary>
            Searches the given stream and returns the next location where its value matches the search value
            </summary>
            <param name="Offset">Offset to begin searching from</param>
        </member>
        <member name="M:CssUI.Difference.DiffEngine`1.Scan_Mismatch(CssUI.DataConsumer{`0},CssUI.DataConsumer{`0},System.Int32@,System.Int32)">
            <summary>
            Searches the given stream and returns the next location where its value doesn't match the search value
            </summary>
            <param name="Offset">Offset to begin searching from</param>
        </member>
        <member name="M:CssUI.Difference.DiffEngine`1.Scan_Match(CssUI.DataConsumer{`0},`0,System.Int32@,System.Int32)">
            <summary>
            Searches the given stream and returns the next location where its value matches the search value
            </summary>
            <param name="Offset">Offset to begin searching from</param>
        </member>
        <member name="M:CssUI.Difference.DiffEngine`1.Scan_Mismatch(CssUI.DataConsumer{`0},`0,System.Int32@,System.Int32)">
            <summary>
            Searches the given stream and returns the next location where its value doesn't match the search value
            </summary>
            <param name="Offset">Offset to begin searching from</param>
        </member>
        <member name="F:CssUI.Difference.EDiffAction.None">
            <summary>
            Data was unmodified
            </summary>
        </member>
        <member name="F:CssUI.Difference.EDiffAction.Insertion">
            <summary>
            New data was added, total data length might increase
            </summary>
        </member>
        <member name="F:CssUI.Difference.EDiffAction.Removal">
            <summary>
            Existing data was removed, total data length might decrease
            </summary>
        </member>
        <member name="F:CssUI.Difference.EDiffAction.Modify">
            <summary>
            Existing data was altered in place, total data length is unchanged
            </summary>
        </member>
        <member name="T:CssUI.EPixelFormat">
            <summary>
            Specifys the format of pixel data
            </summary>
        </member>
        <member name="F:CssUI.EPixelFormat.RGB">
            <summary>Each pixel is comprised of 3 color components using 8-bits, making a pixel 24-bits.</summary>
        </member>
        <member name="F:CssUI.EPixelFormat.RGBA">
            <summary>Each pixel is comprised of 4 color components using 8-bits, making a pixel 32-bits.</summary>
        </member>
        <member name="T:CssUI.Geometry">
            <summary>
            Provides helpful functions for things like shape intersection
            </summary>
        </member>
        <member name="M:CssUI.Geometry.Intersects(CssUI.DOM.Geometry.DOMRectReadOnly@,System.Int32,System.Int32)">
            <summary>
            Returns True if the given point lies within this area
            </summary>
        </member>
        <member name="M:CssUI.Geometry.Intersects(CssUI.DOM.Geometry.DOMRectReadOnly@,System.Double,System.Double)">
            <summary>
            Returns True if the given point lies within this area
            </summary>
        </member>
        <member name="M:CssUI.Geometry.Intersects(CssUI.DOM.Geometry.DOMRectReadOnly@,CssUI.Point2i@)">
            <summary>
            Returns True if the given point lies within this area
            </summary>
        </member>
        <member name="M:CssUI.Geometry.Intersects(CssUI.DOM.Geometry.DOMRectReadOnly@,CssUI.DOM.Geometry.DOMPointReadOnly@)">
            <summary>
            Returns True if the given point lies within this area
            </summary>
        </member>
        <member name="M:CssUI.Geometry.Intersects(CssUI.DOM.Geometry.DOMRectReadOnly@,CssUI.DOM.Geometry.DOMRectReadOnly@)">
            <summary>
            Returns True if the given <see cref="T:CssUI.DOM.Geometry.DOMRect"/> intersects this area
            </summary>
        </member>
        <member name="M:CssUI.Geometry.Intersects(CssUI.Rect4f@,System.Int32,System.Int32)">
            <summary>
            Returns True if the given point lies within this area
            </summary>
        </member>
        <member name="M:CssUI.Geometry.Intersects(CssUI.Rect4f@,System.Double,System.Double)">
            <summary>
            Returns True if the given point lies within this area
            </summary>
        </member>
        <member name="M:CssUI.Geometry.Intersects(CssUI.Rect4f@,CssUI.Point2i@)">
            <summary>
            Returns True if the given point lies within this area
            </summary>
        </member>
        <member name="M:CssUI.Geometry.Intersects(CssUI.Rect4f@,CssUI.Point2f@)">
            <summary>
            Returns True if the given point lies within this area
            </summary>
        </member>
        <member name="M:CssUI.Geometry.Intersects(CssUI.Rect4f@,CssUI.Rect4f@)">
            <summary>
            Returns True if the given <see cref="T:CssUI.DOM.Geometry.DOMRect"/> intersects this area
            </summary>
        </member>
        <member name="M:CssUI.MathExt.Pow(System.Int32,System.UInt32)">
            <summary>
            A cached power function which fetches low values from a cache before defaulting to the frameworks implementation
            </summary>
        </member>
        <member name="M:CssUI.MathExt.Pow(System.UInt32,System.UInt32)">
            <summary>
            A cached power function which fetches low values from a cache before defaulting to the frameworks implementation
            </summary>
        </member>
        <member name="M:CssUI.MathExt.Pow(System.Int64,System.UInt64)">
            <summary>
            A cached power function which fetches low values from a cache before defaulting to the frameworks implementation
            </summary>
        </member>
        <member name="M:CssUI.MathExt.Pow(System.UInt64,System.UInt64)">
            <summary>
            A cached power function which fetches low values from a cache before defaulting to the frameworks implementation
            </summary>
        </member>
        <member name="M:CssUI.MathExt.NPow(System.Int32,System.UInt32)">
            <summary>
            A cached wrapper around Math.Pow which specifically calculates the Negative power
            </summary>
        </member>
        <member name="M:CssUI.MathExt.NPow(System.UInt32,System.UInt32)">
            <summary>
            A cached wrapper around Math.Pow which specifically calculates the Negative power
            </summary>
        </member>
        <member name="M:CssUI.MathExt.NPow(System.Int64,System.UInt64)">
            <summary>
            A cached wrapper around Math.Pow which specifically calculates the Negative power
            </summary>
        </member>
        <member name="M:CssUI.MathExt.NPow(System.UInt64,System.UInt64)">
            <summary>
            A cached wrapper around Math.Pow which specifically calculates the Negative power
            </summary>
        </member>
        <member name="T:CssUI.EnumMetaTable">
            <summary>
            Compiles (at runtime) a table of metadata for all values of any enums marked with the <see cref="T:CssUI.Internal.MetaEnumAttribute"/>.
            Metadata is specified for each member of an enum using the <see cref="T:CssUI.Internal.MetaKeywordAttribute"/>.
            </summary>
        </member>
        <member name="F:CssUI.EnumMetaTable.KEYWORD">
            <summary>
            Maps enum meta-keyword strings to their actual code constant
            </summary>
        </member>
        <member name="F:CssUI.EnumMetaTable.IS_FLAGS">
            <summary>
            Stores whether the given meta enum is a flags enum 
            </summary>
        </member>
        <member name="M:CssUI.EnumMetaTable.#cctor">
            <summary>
            Populates the metadata tables
            </summary>
        </member>
        <member name="M:CssUI.EnumMetaTable.Get(System.Int32,System.Int32)">
            <summary>
            Retreives enum metadata from the LUT
            </summary>
            <param name="enumIndex"></param>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.EnumMetaTable.Count(System.Int32)">
            <summary>
            Retreives the length of an enums LUT
            </summary>
            <param name="enumIndex"></param>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.EnumMetaTable.Dump_Metadata(System.String)">
            <summary>
            Dumps all compiled metadata into the given file as a Json structure
            </summary>
            <param name="filename"></param>
        </member>
        <member name="T:CssUI.CORE.MetaTable`1">
            <summary>
            A genericized object which compiles a lookup-table for any code object with a given attribute present in the executing assembly
            </summary>
            <typeparam name="TAttribute">Attribute type to search for</typeparam>
        </member>
        <member name="F:CssUI.CORE.MetaTable`1.Items">
            <summary>
            A list of all metadata items
            </summary>
        </member>
        <member name="F:CssUI.CORE.MetaTable`1.TypeHandleMap">
            <summary>
            A speedy map of type handles to their index within the table
            </summary>
        </member>
        <member name="M:CssUI.CORE.MetaTable`1.Lookup(System.RuntimeTypeHandle,System.Int32@)">
            <summary>
            Lookup the index of an item within the LUT by its runtime type handle (fastest method)
            </summary>
            <param name="Handle">Runtime type handle of the item to lookup</param>
            <param name="outIndex">Index of the item within the LUT</param>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CORE.MetaTable`1.Lookup(System.RuntimeTypeHandle)">
            <summary>
            Lookup the index of an item within the LUT by its runtime type handle (fastest method)
            </summary>
            <param name="Handle">Runtime type handle of the item to lookup</param>
            <param name="outIndex">Index of the item within the LUT</param>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CORE.MetaTable`1.Lookup``1(System.Int32@)">
            <summary>
            Lookup the index of an item within the LUT by its <see cref="T:System.Type"/>
            </summary>
            <param name="outIndex">Index of the item within the LUT</param>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CORE.MetaTable`1.Lookup``1">
            <summary>
            Lookup the index of an item within the LUT by its <see cref="T:System.Type"/>
            </summary>
            <typeparam name="T">Item type</typeparam>
            <returns>Index of the item within the LUT</returns>
        </member>
        <member name="P:CssUI.NodeTree.ITreeNode.nodeType">
            <summary> An integer representing an arbitrary 'type' for this node, used for filtering nodes when traversing the tree. </summary>
        </member>
        <member name="P:CssUI.NodeTree.ITreeNode.hasChildNodes">
            <summary></summary>
        </member>
        <member name="P:CssUI.NodeTree.ITreeNode.parentNode">
            <summary> The node immediately containing this one </summary>
        </member>
        <member name="P:CssUI.NodeTree.ITreeNode.firstChild">
            <summary> The first child in this nodes list of children </summary>
        </member>
        <member name="P:CssUI.NodeTree.ITreeNode.lastChild">
            <summary> The last child in this nodes list of children </summary>
        </member>
        <member name="P:CssUI.NodeTree.ITreeNode.nextSibling">
            <summary> The node which is directly adjacent to this one within the parent </summary>
        </member>
        <member name="P:CssUI.NodeTree.ITreeNode.previousSibling">
            <summary> The node which is directly adjacent to this one within the parent </summary>
        </member>
        <member name="P:CssUI.NodeTree.ITreeNode.index">
            <summary> Index of this node within its parent's list of children </summary>
        </member>
        <member name="P:CssUI.NodeTree.ITreeNode.childNodes">
            <summary> List of all nodes which are direct descendents of this one </summary>
        </member>
        <member name="M:CssUI.NodeTree.ITreeNode.ComparePosition(CssUI.NodeTree.ITreeNode)">
            <summary>
            Returns the relative position of this node compared to another
            </summary>
            <param name="other">Node to compare against</param>
            <returns>Relative position compared to other node</returns>
        </member>
        <member name="M:CssUI.NodeTree.ITreeNode.Contains(CssUI.NodeTree.ITreeNode)">
            <summary> Returns true if <paramref name="other"/> is an inclusive descendant of this node, and false otherwise. </summary>
        </member>
        <member name="M:CssUI.NodeTree.ITreeNode.GetRootNode">
            <summary> Returns the nodes root </summary>
        </member>
        <member name="T:CssUI.NodeTree.Tree">
            <summary>
            Provides functionality for retreiving information from within a node tree
            </summary>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Is_Descendant(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.ITreeNode)">
            <summary>
            An object A is called a descendant of an object B, if either A is a child of B or A is a child of an object C that is a descendant of B.
            </summary>
            <returns>If <paramref name="A"/> is a descendant of <paramref name="B"/></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Is_Inclusive_Descendant(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.ITreeNode)">
            <summary>
            An inclusive descendant is an object or one of its descendants.
            </summary>
            <returns>If <paramref name="A"/> is an (inclusive) descendant of <paramref name="B"/></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Is_Ancestor(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.ITreeNode)">
            <summary>
            An object A is called an ancestor of an object B if and only if B is a descendant of A.
            </summary>
            <returns>If <paramref name="A"/> is an ancestor of <paramref name="B"/></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Is_Inclusive_Ancestor(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.ITreeNode)">
            <summary>
            An inclusive ancestor is an object or one of its ancestors.
            </summary>
            <returns>If <paramref name="A"/> is an (inclusive) ancestor of <paramref name="B"/></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Is_Sibling(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.ITreeNode)">
            <summary>
            An object A is called a sibling of an object B, if and only if B and A share the same non-null parent.
            </summary>
            <returns>If <paramref name="A"/> is a sibling of <paramref name="B"/></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Is_Inclusive_Sibling(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.ITreeNode)">
            <summary>
            An inclusive sibling is an object or one of its siblings.
            </summary>
            <returns>If <paramref name="A"/> is an (inclusive) sibling of <paramref name="B"/></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Is_Preceeding(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.ITreeNode)">
            <summary>
            An object A is preceding an object B if A and B are in the same tree and A comes before B in tree order.
            </summary>
            <returns>If <paramref name="A"/> is preeceding <paramref name="B"/></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Is_Following(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.ITreeNode)">
            <summary>
            An object A is following an object B if A and B are in the same tree and A comes after B in tree order.
            </summary>
            <returns>If <paramref name="A"/> is following <paramref name="B"/></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Ancestors(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.NodeTreeFilter@,System.UInt64)">
            <summary>
            Returns a list of all ancestors for the given node, that is; the chain of parent elements all the way up to the root element.
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which IWalkableTreeNode types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Ancestors_OfType``1(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.NodeTreeFilter@,System.UInt64)">
            <summary>
            Returns a list of all ancestors for the given node whom match the given <typeparamref name="NodeType"/>
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which IWalkableTreeNode types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Nth_Ancestor(CssUI.NodeTree.ITreeNode,System.UInt32,CssUI.NodeTree.NodeTreeFilter@,System.UInt64)">
            <summary>
            Returns Nth ancestor for the given node, that is; the Nth parent element along the chain of elements going all the way up to the root element.
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Nth">The number of elements to traverse</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which IWalkableTreeNode types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Nth_Ancestor_OfType``1(CssUI.NodeTree.ITreeNode,System.UInt32,CssUI.NodeTree.NodeTreeFilter@,System.UInt64)">
            <summary>
            Returns Nth ancestor for the given node whom matches the given <typeparamref name="NodeType"/>
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Nth">The number of elements to traverse</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which IWalkableTreeNode types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Inclusive_Ancestors(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.NodeTreeFilter@,System.UInt64)">
            <summary>
            Returns a list of all (inclusive) ancestors for the given node, that is; the chain of parent elements all the way up to the root element.
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which IWalkableTreeNode types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Descendents(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.NodeTreeFilter@,System.UInt64)">
            <summary>
            Returns a list of all descendents for the given node
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which IWalkableTreeNode types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Descendents_OfType``1(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.NodeTreeFilter@,System.UInt64)">
            <summary>
            Returns a list of all descendents for the given node whom match the given <typeparamref name="NodeType"/>
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which IWalkableTreeNode types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Nth_Descendant(CssUI.NodeTree.ITreeNode,System.UInt32,CssUI.NodeTree.NodeTreeFilter@,System.UInt64)">
            <summary>
            Returns Nth descendant for the given node
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Nth">The number of elements to traverse</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which IWalkableTreeNode types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Nth_Descendant_OfType``1(CssUI.NodeTree.ITreeNode,System.UInt32,CssUI.NodeTree.NodeTreeFilter@,System.UInt64)">
            <summary>
            Returns Nth descendant for the given node whom matches the given <typeparamref name="NodeType"/>
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Nth">The number of elements to traverse</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which IWalkableTreeNode types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Inclusive_Descendents(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.NodeTreeFilter@,System.UInt64)">
            <summary>
            Returns a list of all (inclusive) descendents for the given node
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which IWalkableTreeNode types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Previous(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.NodeTreeFilter@)">
            <summary>
            Returns a list of all previous and adjacent sibling nodes for the given node
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Nth_Previous(CssUI.NodeTree.ITreeNode,System.UInt32,CssUI.NodeTree.NodeTreeFilter@)">
            <summary>
            Returns Nth previous and adjacent sibling for the given node
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Nth">The number of elements to traverse</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Preceeding(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.NodeTreeFilter@,System.UInt64)">
            <summary>
            Returns a list of all tree-order preceeding (sibling) nodes for the given node 
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which IWalkableTreeNode types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Preceeding_OfType``1(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.NodeTreeFilter@,System.UInt64)">
            <summary>
            Returns a list of all tree-order preceeding (sibling) nodes for the given node whom match the given <typeparamref name="NodeType"/>
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which IWalkableTreeNode types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Nth_Preceeding(CssUI.NodeTree.ITreeNode,System.UInt32,CssUI.NodeTree.NodeTreeFilter@,System.UInt64)">
            <summary>
            Returns Nth tree-order preceeding sibling for the given node
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Nth">The number of elements to traverse</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which IWalkableTreeNode types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Following(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.NodeTreeFilter@,System.UInt64)">
            <summary>
            Returns a list of all tree-order following (sibling) nodes for the given node 
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which IWalkableTreeNode types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Following_OfType``1(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.NodeTreeFilter@,System.UInt64)">
            <summary>
            Returns a list of all tree-order following (sibling) nodes for the given node whom match the given <typeparamref name="NodeType"/>
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which IWalkableTreeNode types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Nth_Following(CssUI.NodeTree.ITreeNode,System.UInt32,CssUI.NodeTree.NodeTreeFilter@,System.UInt64)">
            <summary>
            Returns Nth tree-order following sibling for the given node
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Nth">The number of elements to traverse</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which IWalkableTreeNode types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Next(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.NodeTreeFilter@)">
            <summary>
            Returns a list of all nodes after and adjacent to the given node (siblings)
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Nth_Next(CssUI.NodeTree.ITreeNode,System.UInt32,CssUI.NodeTree.NodeTreeFilter@)">
            <summary>
            Returns Nth next sibling for the given node
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Nth">The number of elements to traverse</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Junction(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.ITreeNode)">
            <summary>
            Returns the node where a given <paramref name="node"/> node meets the given <paramref name="ancestor"/>, if any.
            </summary>
            <param name="node">Node to begin searching from</param>
            <param name="ancestor">Target stopping point for the search</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Children(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.NodeTreeFilter@)">
            <summary>
            Returns a list of all descendents of <paramref name="node"/> whose parent node is <paramref name="node"/>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            </summary>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Nth_Child(CssUI.NodeTree.ITreeNode,System.UInt32,CssUI.NodeTree.NodeTreeFilter@)">
            <summary>
            Returns the Nth descendent of <paramref name="node"/> whose parent node is <paramref name="node"/>
            <param name="node">The node to start searching from</param>
            <param name="Nth">The number of elements to traverse</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            </summary>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Children_OfType``1(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.NodeTreeFilter@)">
            <summary>
            Returns a list of all descendents of <paramref name="node"/> whose parent node is <paramref name="node"/> and whom match the given <typeparamref name="NodeType"/>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            </summary>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Nth_Child_OfType``1(CssUI.NodeTree.ITreeNode,System.UInt32,CssUI.NodeTree.NodeTreeFilter@)">
            <summary>
            Returns the Nth descendent of <paramref name="node"/> whose parent node is <paramref name="node"/> and whom matches the given <typeparamref name="NodeType"/>
            <param name="node">The node to start searching from</param>
            <param name="Nth">The number of elements to traverse</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            </summary>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_First_Child_OfType``1(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.NodeTreeFilter@)">
            <summary>
            Returns the first immediate descendent which matches the given <paramref name="Filter"/> and Type <typeparamref name="NodeType"/>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            </summary>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Last_Child_OfType``1(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.NodeTreeFilter@)">
            <summary>
            Returns the first descendent of <paramref name="node"/> whose parent node is <paramref name="node"/> and which matches the given <paramref name="Filter"/> and <typeparamref name="NodeType"/>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            </summary>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Root(CssUI.NodeTree.ITreeNode)">
            <summary>
            Returns the root of a given node
            </summary>
            <param name="node">The node to start searching from</param>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Previous_Sibling(CssUI.NodeTree.ITreeNode)">
            <summary>
            Returns the sibling that comes before the given node within it's parent node
            </summary>
            <param name="node">The node to start searching from</param>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Next_Sibling(CssUI.NodeTree.ITreeNode)">
            <summary>
            Returns the sibling that comes after the given node within it's parent node
            </summary>
            <param name="node">The node to start searching from</param>
        </member>
        <member name="M:CssUI.NodeTree.Tree.Get_Node_Index(CssUI.NodeTree.ITreeNode)">
            <summary>
            Returns the index of the given node within it's parent node
            </summary>
            <param name="node">The node to start searching from</param>
        </member>
        <member name="M:CssUI.NodeTree.Tree.ComparePosition(CssUI.NodeTree.ITreeNode,CssUI.NodeTree.ITreeNode)">
            <summary>
            Returns the index of the given node within it's parent node
            </summary>
            <param name="node">The node to start searching from</param>
        </member>
        <member name="P:CssUI.NodeTree.TreeNode.index">
            <summary> Index of this node within its parent's list of children </summary>
        </member>
        <member name="P:CssUI.NodeTree.TreeNode.nodeType">
            <summary> An integer representing an arbitrary 'type' for this node, used for filtering nodes when traversing the tree. </summary>
        </member>
        <member name="P:CssUI.NodeTree.TreeNode.hasChildNodes">
            <summary></summary>
        </member>
        <member name="P:CssUI.NodeTree.TreeNode.childNodes">
            <summary> List of all nodes which are direct descendents of this one </summary>
        </member>
        <member name="P:CssUI.NodeTree.TreeNode.parentNode">
            <summary> The node immediately containing this one </summary>
        </member>
        <member name="P:CssUI.NodeTree.TreeNode.firstChild">
            <summary> The first child in this nodes list of children </summary>
        </member>
        <member name="P:CssUI.NodeTree.TreeNode.lastChild">
            <summary> The last child in this nodes list of children </summary>
        </member>
        <member name="P:CssUI.NodeTree.TreeNode.nextSibling">
            <summary> The node which is directly adjacent to this one within the parent </summary>
        </member>
        <member name="P:CssUI.NodeTree.TreeNode.previousSibling">
            <summary> The node which is directly adjacent to this one within the parent </summary>
        </member>
        <member name="M:CssUI.NodeTree.TreeNode.ComparePosition(CssUI.NodeTree.ITreeNode)">
            <summary>
            Returns the relative position of this node compared to another
            </summary>
            <param name="other">Node to compare against</param>
            <returns>Relative position compared to other node</returns>
        </member>
        <member name="M:CssUI.NodeTree.TreeNode.Contains(CssUI.NodeTree.ITreeNode)">
            <summary> Returns true if <paramref name="other"/> is an inclusive descendant of this node, and false otherwise. </summary>
        </member>
        <member name="M:CssUI.NodeTree.TreeNode.GetRootNode">
            <summary> Returns the nodes root </summary>
        </member>
        <member name="T:CssUI.NodeTree.NodeTreeWalker">
            <summary>
            A more generic tree walker based on the one from the DOM web standards
            </summary>
        </member>
        <member name="M:CssUI.NodeTree.NodeTreeWalker.ParentNode">
            <summary>
            Returns the next node in a sequence containing all nodes in the parent chain(in reverse tree order)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.NodeTreeWalker.FirstChild">
            <summary>
            Returns the next node in a sequence containing all first-child descendant nodes and the siblings of the bottom-most node(in tree order)
            </summary>
        </member>
        <member name="M:CssUI.NodeTree.NodeTreeWalker.LastChild">
            <summary>
            Returns the next node in a sequence containing all descendant nodes (in reverse tree order)
            </summary>
        </member>
        <member name="M:CssUI.NodeTree.NodeTreeWalker.NextSibling">
            <summary>
            Returns the next node in a sequence containing all sibling nodes of the root and their children (in tree order)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.NodeTreeWalker.PreviousSibling">
            <summary>
            Returns the next node in a sequence containing all sibling nodes of the root and their children (in reverse tree order)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.NodeTree.NodeTreeWalker.PreviousNode">
            <summary>
            Returns the next node in a sequence containing all ancestor nodes of the root (in reverse tree order)
            </summary>
        </member>
        <member name="M:CssUI.NodeTree.NodeTreeWalker.NextNode">
            <summary>
            Returns the next node in a sequence containing the complete tree of all descendant nodes from the root (in tree order)
            <para>Basically itterates through the first child of every descendent node until it hits one it doesnt accept, then starts returning the rest of the nodes within the roots tree in order from left-right and from bottom-top</para>
            </summary>
        </member>
        <member name="T:CssUI.NodeTree.TreeNodeList">
            <summary>
            Manages and allows indexing of a list of child-nodes, updating their previous/next siblings to the correct values
            </summary>
        </member>
        <member name="T:CssUI.NodeTree.TreeNodeList.TreeNode_Item_Handler">
            <summary>
            The list changed in size
            </summary>
            <param name="Index">Index where change occured</param>
            <param name="Source">Item responsible</param>
        </member>
        <member name="T:CssUI.NodeTree.TreeNodeList.TreeNode_Value_Change_Handler">
            <summary>
            An item changed value
            </summary>
            <param name="OldValue"></param>
            <param name="NewValue"></param>
        </member>
        <member name="E:CssUI.NodeTree.TreeNodeList.onAdded">
            <summary> An item was added to the list </summary>
        </member>
        <member name="E:CssUI.NodeTree.TreeNodeList.onRemoved">
            <summary> An item was removed from the list </summary>
        </member>
        <member name="E:CssUI.NodeTree.TreeNodeList.onChanged">
            <summary> a node changed value </summary>
        </member>
        <member name="M:CssUI.NodeTree.TreeNodeList.#ctor(CssUI.NodeTree.ITreeNode)">
            <summary>
            Creates a new list of tree nodes
            </summary>
        </member>
        <member name="M:CssUI.NodeTree.TreeNodeList.Update_Node_Links(System.Int32)">
            <summary>
            Updates the previous and next siblings of the node at <paramref name="index"/> as well as its neighbors
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:CssUI.Platform.PlatformFactoryBase">
            <summary>
            Implements IPlatformFactory functionality that is common among all platforms.
            IPlatformFactory implementations should inherit from this class.
            </summary>
        </member>
        <member name="P:CssUI.Platform.PlatformFactoryBase.SystemMetrics">
            <summary>
            Provides access to important system dependant configuration information such as double click time, drag drop distance, and screen DPI
            </summary>
        </member>
        <member name="P:CssUI.Platform.PlatformFactoryBase.SystemScreens">
            <summary>
            Provides access to handling screens/monitors
            </summary>
        </member>
        <member name="P:CssUI.Platform.PlatformFactoryBase.SystemWindows">
            <summary>
            Provides access to handling application windows
            </summary>
        </member>
        <member name="T:CssUI.Platform.ScrollBar_Params">
            <summary>
            Holds settings for scrollbars.
            </summary>
        </member>
        <member name="F:CssUI.Platform.ScrollBar_Params.Size">
            <summary>
            The width or height of the scrollbar (depending on if it is a horizontal or vertical bar)
            </summary>
        </member>
        <member name="F:CssUI.Platform.ScrollBar_Params.ThumbSize">
            <summary>
            The width or height of the scrollbars thumb (depending on if it is a horizontal or vertical bar)
            </summary>
        </member>
        <member name="F:CssUI.Platform.ScrollBar_Params.BtnArrowSize">
            <summary>
            The width or height which the arrow graphic on the buttons should be
            </summary>
        </member>
        <member name="M:CssUI.Platform.Factory.#cctor">
            <summary>
            Creates the applicable IPlatformMethods implementation for the current operating system
            </summary>
            <returns></returns>
        </member>
        <member name="T:CssUI.Platform.ISystemMetricsHandler">
            <summary>
            The base implementation for System-Metrics implementations
            </summary>
        </member>
        <member name="M:CssUI.Platform.ISystemMetricsHandler.Get_Drag_Event_Distance">
            <summary>
            Returns the minimum distance the mouse needs to click down on something and then move for it to turn into a 'drag' event
            </summary>
        </member>
        <member name="M:CssUI.Platform.ISystemMetricsHandler.Get_Vertical_Scrollbar_Params">
            <summary>
            Get the system parameters for vertical scrollbars
            </summary>
        </member>
        <member name="M:CssUI.Platform.ISystemMetricsHandler.Get_Horizontal_Scrollbar_Params">
            <summary>
            Get the system parameters for horizontal scrollbars
            </summary>
        </member>
        <member name="M:CssUI.Platform.ISystemMetricsHandler.Get_DoubleClick_Distance_Threshold">
            <summary>
            Returns the maximum distance from the first location that a second mouse down event can be for it to fire a DoubleClick event
            </summary>
        </member>
        <member name="M:CssUI.Platform.ISystemMetricsHandler.Get_Double_Click_Time">
            <summary>
            Returns the maximum delay between two consecutive mouse down events before the 'click' event turns into a 'double click' event
            </summary>
            <returns>Double-click time threshold, in seconds</returns>
        </member>
        <member name="M:CssUI.Platform.ISystemMetricsHandler.Get_DPI(System.IntPtr)">
            <summary>
            Returns the DPI this system is currently running at
            </summary>
            <returns>System Dpi X/Y values</returns>
        </member>
        <member name="T:CssUI.Platform.ISystemScreen">
            <summary>
            This interface represents the basis for what any monitor object should consist of reguardless of platform
            </summary>
        </member>
        <member name="M:CssUI.Platform.ISystemScreensHandler.Get_Screen_From_window(System.IntPtr)">
            <summary>
            Returns the system screen which the given application window resides in.
            </summary>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.Platform.ISystemWindowHandler.Get_Window">
            <summary>
            Returns a handle to the window belonging calling threads message queue
            </summary>
            <returns></returns>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.DeviceCap.LOGPIXELSX">
            <summary>
            Logical pixels inch in X
            </summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.DeviceCap.LOGPIXELSY">
            <summary>
            Logical pixels inch in Y
            </summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.GUITHREADINFO.flags">
            <summary>
            The thread state. This member can be one or more of the following values: https://docs.microsoft.com/en-us/windows/desktop/api/winuser/ns-winuser-tagguithreadinfo
            </summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.GUITHREADINFO.hwndActive">
            <summary>
            A handle to the active window within the thread.
            </summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.GUITHREADINFO.hwndFocus">
            <summary>
            A handle to the window that has the keyboard focus.
            </summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.GUITHREADINFO.hwndCapture">
            <summary>
            A handle to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.GUITHREADINFO.hwndMenuOwner">
            <summary>
            A handle to the window that owns any active menus.
            </summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.GUITHREADINFO.hwndMoveSize">
            <summary>
            A handle to the window in a move or size loop.
            </summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.GUITHREADINFO.hwndCaret">
            <summary>
            A handle to the window that is displaying the caret.
            </summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.GUITHREADINFO.rcCaret">
            <summary>
            The caret's bounding rectangle, in client coordinates, relative to the window specified by the hwndCaret member.
            </summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.MONITORINFOEX.rcMonitor">
            <summary>
            A RECT structure that specifies the display monitor rectangle, expressed in virtual-screen coordinates. Note that if the monitor is not the primary display monitor, some of the rectangle's coordinates may be negative values.
            </summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.MONITORINFOEX.rcWork">
            <summary>
            A RECT structure that specifies the work area rectangle of the display monitor, expressed in virtual-screen coordinates. Note that if the monitor is not the primary display monitor, some of the rectangle's coordinates may be negative values.
            </summary>
        </member>
        <member name="M:CssUI.Platform.Windows.Win32.User32.GetDesktopWindow">
            <summary>
            Returns a handle to the desktop window
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.Platform.Windows.Win32.User32.GetDoubleClickTime">
            <summary>
            Retrieves the current double-click time for the mouse. A double-click is a series of two clicks of the mouse button, the second occurring within a specified time after the first. The double-click time is the maximum number of milliseconds that may occur between the first and second click of a double-click. The maximum double-click time is 5000 milliseconds.
            </summary>
            <returns>Double-click time threshold, in milliseconds</returns>
        </member>
        <member name="M:CssUI.Platform.Windows.Win32.User32.MonitorFromWindow(System.IntPtr,CssUI.Platform.Windows.Win32.MONITOR_FLAG)">
            <summary>
            https://msdn.microsoft.com/en-us/library/dd145064(v=vs.85).aspx
            <para>Retrieves a handle to the display monitor that has the largest area of intersection with the bounding rectangle of a specified window.</para>
            </summary>
            <param name="hWnd"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.User32.TVM_HITTEST">
            <summary>
            Used with SendMessage to perform a hit test at a given location and return which TreeNode (if any) was hit
            </summary>
        </member>
        <member name="T:CssUI.Platform.Windows.Win32.SYSTEM_METRICS">
            <summary>
            Windows system-metrics item ID's.
            (Used with <see cref="M:CssUI.Platform.Windows.Win32.User32.GetSystemMetrics(System.Int32)"/>)
            </summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.SYSTEM_METRICS.SM_CXVSCROLL">
            <summary>The width of a vertical scroll bar, in pixels.</summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.SYSTEM_METRICS.SM_CYHSCROLL">
            <summary>The height of a horizontal scroll bar, in pixels.</summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.SYSTEM_METRICS.SM_CYVTHUMB">
            <summary>The height of the thumb box in a vertical scroll bar, in pixels.</summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.SYSTEM_METRICS.SM_CXHTHUMB">
            <summary>The width of the thumb box in a horizontal scroll bar, in pixels.</summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.SYSTEM_METRICS.SM_CYVSCROLL">
            <summary>The height of the arrow bitmap on a vertical scroll bar, in pixels.</summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.SYSTEM_METRICS.SM_CXHSCROLL">
            <summary>The width of the arrow bitmap on a horizontal scroll bar, in pixels.</summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.SYSTEM_METRICS.SM_CXSIZE">
            <summary>The width of a button in a window caption or title bar, in pixels.</summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.SYSTEM_METRICS.SM_CYSIZE">
            <summary>The height of a button in a window caption or title bar, in pixels.</summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.SYSTEM_METRICS.SM_CXDOUBLECLK">
            <summary>double-click sequence distance X-Axis threshold, in pixels</summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.SYSTEM_METRICS.SM_CYDOUBLECLK">
            <summary>double-click sequence distance Y-Axis threshold, in pixels</summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.SYSTEM_METRICS.SM_CXDRAG">
            <summary>Mouse drag distance X-Axis threshold, in pixels</summary>
        </member>
        <member name="F:CssUI.Platform.Windows.Win32.SYSTEM_METRICS.SM_CYDRAG">
            <summary>Mouse drag distance Y-Axis threshold, in pixels</summary>
        </member>
        <member name="T:CssUI.Platform.Windows.WindowsMetricsHandler">
            <summary>
            Windows system metrics implementation
            </summary>
        </member>
        <member name="T:CssUI.Platform.Windows.WinFactory">
            <summary>
            Provides access to generic functions that change depending on the current builds targeted OS
            </summary>
        </member>
        <member name="T:CssUI.AtomicName`1">
            <summary>
            Implements an efficient way of referring to common string names without constantly performing costly string comparisons.
            Allows identifying common names via an enum which maps to a lookup table
            This is used for things like DOM element attributes, and CSS property names.
            <para>AtomicNames can effectively be thought of as self indexing strings, Maps and lists of AtomicNames cease being indexed by strings and instead are effectively indexed by their self assigned integer values</para>
            </summary>
        </member>
        <member name="F:CssUI.AtomicName`1.Value">
            <summary>
            The value of this name for comparison purposes
            </summary>
        </member>
        <member name="M:CssUI.AtomicName`1.#ctor(`0)">
            <summary>
            Creates an event specifier from the given <see cref="!:EEventName"/> value.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CssUI.AtomicName`1.#ctor(System.String)">
            <summary>
            Creates an name specifier from a string
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:CssUI.AtomicName`1.#ctor(System.Int32)">
            <summary>
            Creates an name specifier from a Value index
            </summary>
            <param name="ValueID"></param>
        </member>
        <member name="M:CssUI.AtomicName`1.Value_To_Name(System.Int32)">
            <summary>
            Converts our integer value into its string name, supposedly through an enum lookup table
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:CssUI.AtomicName`1.Name_To_Value(System.String)">
            <summary>
            Converts a string name into a positive integer value, preferrably via enum lookup.
            A return value of <c>null</c> will cause the name to be registered as a custom one.
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:CssUI.AtomicName`1.Enum_To_Value(`0)">
            <summary>
            Converts an enum value into a positive integer value, preferrably via LUT lookup or else this class wont be performant.
            </summary>
            <param name="enumValue"></param>
        </member>
        <member name="M:CssUI.AtomicName`1.Name_To_Enum(System.String)">
            <summary>
            Converts a string name into an enum value, preferrably via LUT lookup or else this class wont be performant.
            </summary>
            <param name="Name"></param>
        </member>
        <member name="T:CssUI.AtomicString">
            <summary>
            Wrapper around the string class that caches the value from GetHashCode() to improve string lookup performance
            </summary>
        </member>
        <member name="F:CssUI.AtomicString.Hash">
            <summary>
            Stores the case sensitive hash
            </summary>
        </member>
        <member name="F:CssUI.AtomicString.Hash_Lower">
            <summary>
            Stores the case-insensitive hash
            </summary>
        </member>
        <member name="M:CssUI.BitOperations.PopulationCount(System.UInt32)">
            <summary>
            The population count of a binary integer value is the number of one bits in the value.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.BitOperations.PopulationCount(System.Int32)">
            <summary>
            The population count of a binary integer value is the number of one bits in the value.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.BitOperations.CountLeadingZeros(System.UInt32)">
            <summary>
            Returns the number of zero bits preceding the highest-order
            ("leftmost") one-bit in the two's complement binary representation
            of the specified <paramref name="input"/>
            value.
            Returns 32 if the specified value has no one-bits in its two's complement representation,
            in other words if it is equal to zero.
            </summary>
            <returns>Number of leading zero bits in the integer</returns>
        </member>
        <member name="M:CssUI.BitOperations.CountLeadingZeros(System.Int32)">
            <summary>
            Returns the number of zero bits preceding the highest-order
            ("leftmost") one-bit in the two's complement binary representation
            of the specified <paramref name="input"/>
            value.
            Returns 32 if the specified value has no one-bits in its two's complement representation,
            in other words if it is equal to zero.
            </summary>
            <returns>Number of leading zero bits in the integer</returns>
        </member>
        <member name="M:CssUI.BitOperations.CountLeadingZeros(System.UInt64)">
            <summary>
            Returns the number of zero bits preceding the highest-order
            ("leftmost") one-bit in the two's complement binary representation
            of the specified <paramref name="input"/>
            value.
            Returns 64 if the specified value has no one-bits in its two's complement representation,
            in other words if it is equal to zero.
            </summary>
            <returns>Number of leading zero bits in the integer</returns>
        </member>
        <member name="M:CssUI.BitOperations.CountLeadingZeros(System.Int64)">
            <summary>
            Returns the number of zero bits preceding the highest-order
            ("leftmost") one-bit in the two's complement binary representation
            of the specified <paramref name="input"/>
            value.
            Returns 64 if the specified value has no one-bits in its two's complement representation,
            in other words if it is equal to zero.
            </summary>
            <returns>Number of leading zero bits in the integer</returns>
        </member>
        <member name="M:CssUI.BitOperations.CountTrailingZeros(System.UInt32)">
            <summary>
            Returns the number of trailing zero bits in a binary integer
            </summary>
        </member>
        <member name="M:CssUI.BitOperations.CountTrailingZeros(System.Int32)">
            <summary>
            Returns the number of trailing zero bits in a binary integer
            </summary>
        </member>
        <member name="M:CssUI.BitOperations.CountTrailingZeros(System.UInt64)">
            <summary>
            Returns the number of trailing zero bits in a binary integer
            </summary>
        </member>
        <member name="M:CssUI.BitOperations.CountTrailingZeros(System.Int64)">
            <summary>
            Returns the number of trailing zero bits in a binary integer
            </summary>
        </member>
        <member name="T:CssUI.CachedValue`1">
            <summary>
            Simplifies the process of resolving a value once and caching it for future references
            </summary>
        </member>
        <member name="M:CssUI.CachedValue`1.Clear">
            <summary>
            Clears the cached value(if any)
            </summary>
        </member>
        <member name="M:CssUI.CachedValue`1.Get">
            <summary>
            Resolves and caches the value if unset, otherwise returns the cached value
            </summary>
            <param name="Resolver"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CachedValue`1.Get(System.Func{`0})">
            <summary>
            Resolves and caches the value if unset, otherwise returns the cached value
            </summary>
            <param name="Resolver"></param>
            <returns></returns>
        </member>
        <member name="T:CssUI.ConcurrentHashSet`1">
            <summary>
            A concurrently accessible HashSet, thread safe.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:CssUI.DataConsumer`1">
            <summary>
            Provides access to a genericized, consumable stream of data.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:CssUI.DataConsumer`1.Data">
            <summary>
            Our stream of tokens
            </summary>
        </member>
        <member name="P:CssUI.DataConsumer`1.LongPosition">
            <summary>
            The current position at which data will be read from the stream
            </summary>
        </member>
        <member name="M:CssUI.DataConsumer`1.#ctor(System.ReadOnlyMemory{`0})">
            <summary>
            Creates a new stream from a memory pointer
            </summary>
            <param name="Memory"></param>
            <param name="EOF_ITEM"></param>
        </member>
        <member name="M:CssUI.DataConsumer`1.#ctor(System.ReadOnlyMemory{`0},`0)">
            <summary>
            Creates a new stream from a memory pointer
            </summary>
            <param name="Memory"></param>
            <param name="EOF_ITEM"></param>
        </member>
        <member name="M:CssUI.DataConsumer`1.#ctor(`0[])">
            <summary>
            Creates a new stream from an array
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:CssUI.DataConsumer`1.#ctor(`0[],`0)">
            <summary>
            Creates a new stream from an array
            </summary>
            <param name="Items"></param>
            <param name="EOF_ITEM"></param>
        </member>
        <member name="P:CssUI.DataConsumer`1.Next">
            <summary>
            Returns the next item to be consumed, equivalent to calling Peek(0)
            </summary>
        </member>
        <member name="P:CssUI.DataConsumer`1.NextNext">
            <summary>
            Returns the next item to be consumed, equivalent to calling Peek(1)
            </summary>
        </member>
        <member name="P:CssUI.DataConsumer`1.NextNextNext">
            <summary>
            Returns the next item to be consumed, equivalent to calling Peek(2)
            </summary>
        </member>
        <member name="P:CssUI.DataConsumer`1.atEnd">
            <summary>
            Returns whether the stream position is currently at the end of the stream
            </summary>
        </member>
        <member name="P:CssUI.DataConsumer`1.atEOF">
            <summary>
            Returns whether the next character in the stream is the EOF character
            </summary>
        </member>
        <member name="M:CssUI.DataConsumer`1.AsMemory">
            <summary>
            Direct accessor to the Data <see cref="T:System.Memory`1"/> instance
            </summary>
        </member>
        <member name="M:CssUI.DataConsumer`1.AsSpan">
            <summary>
            Direct accessor to the Data <see cref="T:System.Memory`1"/> instances' span
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Seek(System.Int32,System.Boolean)">
            <summary>
            Seeks to a specific position in the stream
            </summary>
            <param name="Position"></param>
        </member>
        <member name="M:CssUI.DataConsumer`1.Seek(System.UInt32,System.Boolean)">
            <summary>
            Seeks to a specific position in the stream
            </summary>
            <param name="Position"></param>
        </member>
        <member name="M:CssUI.DataConsumer`1.Seek(System.Int64,System.Boolean)">
            <summary>
            Seeks to a specific position in the stream
            </summary>
            <param name="Position"></param>
        </member>
        <member name="M:CssUI.DataConsumer`1.Seek(System.UInt64,System.Boolean)">
            <summary>
            Seeks to a specific position in the stream
            </summary>
            <param name="Position"></param>
        </member>
        <member name="M:CssUI.DataConsumer`1.Get(System.Int32)">
            <summary>
            Returns the item at <paramref name="Index"/>
            </summary>
        </member>
        <member name="M:CssUI.DataConsumer`1.Get(System.UInt32)">
            <summary>
            Returns the item at <paramref name="Index"/>
            </summary>
        </member>
        <member name="M:CssUI.DataConsumer`1.Get(System.Int64)">
            <summary>
            Returns the item at <paramref name="Index"/>
            </summary>
        </member>
        <member name="M:CssUI.DataConsumer`1.Get(System.UInt64)">
            <summary>
            Returns the item at <paramref name="Index"/>
            </summary>
        </member>
        <member name="M:CssUI.DataConsumer`1.Peek(System.Int32)">
            <summary>
            Returns the item at +<paramref name="Offset"/> from the current read position
            </summary>
            <param name="Offset">Distance from the current read position at which to peek</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Peek(System.UInt32)">
            <summary>
            Returns the item at +<paramref name="Offset"/> from the current read position
            </summary>
            <param name="Offset">Distance from the current read position at which to peek</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Peek(System.Int64)">
            <summary>
            Returns the item at +<paramref name="Offset"/> from the current read position
            </summary>
            <param name="Offset">Distance from the current read position at which to peek</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Peek(System.UInt64)">
            <summary>
            Returns the item at +<paramref name="Offset"/> from the current read position
            </summary>
            <param name="Offset">Distance from the current read position at which to peek</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Scan(`0,System.Int32@,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Returns the index of the first item matching the given <paramref name="Subject"/>  or -1 if none was found
            </summary>
            <returns>Index of first item matching the given one or -1 if none was found</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Scan(`0,System.UInt32@,System.UInt32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Returns the index of the first item matching the given <paramref name="Subject"/>  or -1 if none was found
            </summary>
            <returns>Index of first item matching the given one or -1 if none was found</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Scan(`0,System.Int64@,System.Int64,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Returns the index of the first item matching the given <paramref name="Subject"/>  or -1 if none was found
            </summary>
            <returns>Index of first item matching the given one or -1 if none was found</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Scan(`0,System.UInt64@,System.UInt64,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Returns the index of the first item matching the given <paramref name="Subject"/>  or -1 if none was found
            </summary>
            <returns>Index of first item matching the given one or -1 if none was found</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Scan(System.Predicate{`0},System.Int32@,System.Int32)">
            <summary>
            Returns the index of the first item matching the given predicate or -1 if none was found
            </summary>
            <returns>Index of first item matching the given predicate or -1 if none was found</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Scan(System.Predicate{`0},System.UInt32@,System.UInt32)">
            <summary>
            Returns the index of the first item matching the given predicate or -1 if none was found
            </summary>
            <returns>Index of first item matching the given predicate or -1 if none was found</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Scan(System.Predicate{`0},System.Int64@,System.Int64)">
            <summary>
            Returns the index of the first item matching the given predicate or -1 if none was found
            </summary>
            <returns>Index of first item matching the given predicate or -1 if none was found</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Scan(System.Predicate{`0},System.UInt64@,System.UInt64)">
            <summary>
            Returns the index of the first item matching the given predicate or -1 if none was found
            </summary>
            <returns>Index of first item matching the given predicate or -1 if none was found</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Consume">
            <summary>
            Returns the first unconsumed item from the stream and progresses the current reading position
            </summary>
        </member>
        <member name="M:CssUI.DataConsumer`1.Consume``1">
            <summary>
            Returns the first unconsumed item from the stream and progresses the current reading position
            </summary>
        </member>
        <member name="M:CssUI.DataConsumer`1.Consume(System.Int32)">
            <summary>
            Returns the specified number of items from the stream and progresses the current reading position by that number
            </summary>
            <param name="Count">Number of characters to consume</param>
        </member>
        <member name="M:CssUI.DataConsumer`1.Consume(System.UInt32)">
            <summary>
            Returns the specified number of items from the stream and progresses the current reading position by that number
            </summary>
            <param name="Count">Number of characters to consume</param>
        </member>
        <member name="M:CssUI.DataConsumer`1.Consume(System.Int64)">
            <summary>
            Returns the specified number of items from the stream and progresses the current reading position by that number
            </summary>
            <param name="Count">Number of characters to consume</param>
        </member>
        <member name="M:CssUI.DataConsumer`1.Consume(System.UInt64)">
            <summary>
            Returns the specified number of items from the stream and progresses the current reading position by that number
            </summary>
            <param name="Count">Number of characters to consume</param>
        </member>
        <member name="M:CssUI.DataConsumer`1.Consume_While(System.Predicate{`0})">
            <summary>
            Consumes items until reaching the first one that does not match the given predicate, then returns all matched items and progresses the current reading position by that number
            </summary>
            <param name="Predicate"></param>
            <returns>True if atleast a single item was consumed</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Consume_While(System.Predicate{`0},System.Int32)">
            <summary>
            Consumes items until reaching the first one that does not match the given predicate, then returns all matched items and progresses the current reading position by that number
            </summary>
            <param name="Predicate"></param>
            <returns>True if atleast a single item was consumed</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Consume_While(System.Predicate{`0},System.UInt32)">
            <summary>
            Consumes items until reaching the first one that does not match the given predicate, then returns all matched items and progresses the current reading position by that number
            </summary>
            <param name="Predicate"></param>
            <returns>True if atleast a single item was consumed</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Consume_While(System.Predicate{`0},System.Int64)">
            <summary>
            Consumes items until reaching the first one that does not match the given predicate, then returns all matched items and progresses the current reading position by that number
            </summary>
            <param name="Predicate"></param>
            <returns>True if atleast a single item was consumed</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Consume_While(System.Predicate{`0},System.UInt64)">
            <summary>
            Consumes items until reaching the first one that does not match the given predicate, then returns all matched items and progresses the current reading position by that number
            </summary>
            <param name="Predicate"></param>
            <returns>True if atleast a single item was consumed</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Consume_While(System.Predicate{`0},System.ReadOnlyMemory{`0}@)">
            <summary>
            Consumes items until reaching the first one that does not match the given predicate, then returns all matched items and progresses the current reading position by that number
            </summary>
            <param name="Predicate"></param>
            <returns>True if atleast a single item was consumed</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Consume_While(System.Predicate{`0},System.ReadOnlySpan{`0}@)">
            <summary>
            Consumes items until reaching the first one that does not match the given predicate, then returns all matched items and progresses the current reading position by that number
            </summary>
            <param name="Predicate"></param>
            <returns>True if atleast a single item was consumed</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Consume_While(System.Predicate{`0},System.ReadOnlyMemory{`0}@,System.Int32)">
            <summary>
            Consumes items until reaching the first one that does not match the given predicate, then returns all matched items and progresses the current reading position by that number
            </summary>
            <param name="Predicate"></param>
            <returns>True if atleast a single item was consumed</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Consume_While(System.Predicate{`0},System.ReadOnlyMemory{`0}@,System.UInt32)">
            <summary>
            Consumes items until reaching the first one that does not match the given predicate, then returns all matched items and progresses the current reading position by that number
            </summary>
            <param name="Predicate"></param>
            <returns>True if atleast a single item was consumed</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Consume_While(System.Predicate{`0},System.ReadOnlyMemory{`0}@,System.Int64)">
            <summary>
            Consumes items until reaching the first one that does not match the given predicate, then returns all matched items and progresses the current reading position by that number
            </summary>
            <param name="Predicate"></param>
            <returns>True if atleast a single item was consumed</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Consume_While(System.Predicate{`0},System.ReadOnlyMemory{`0}@,System.UInt64)">
            <summary>
            Consumes items until reaching the first one that does not match the given predicate, then returns all matched items and progresses the current reading position by that number
            </summary>
            <param name="Predicate"></param>
            <returns>True if atleast a single item was consumed</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Consume_While(System.Predicate{`0},System.ReadOnlySpan{`0}@,System.Int32)">
            <summary>
            Consumes items until reaching the first one that does not match the given predicate, then returns all matched items and progresses the current reading position by that number
            </summary>
            <param name="Predicate"></param>
            <returns>True if atleast a single item was consumed</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Consume_While(System.Predicate{`0},System.ReadOnlySpan{`0}@,System.UInt32)">
            <summary>
            Consumes items until reaching the first one that does not match the given predicate, then returns all matched items and progresses the current reading position by that number
            </summary>
            <param name="Predicate"></param>
            <returns>True if atleast a single item was consumed</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Consume_While(System.Predicate{`0},System.ReadOnlySpan{`0}@,System.Int64)">
            <summary>
            Consumes items until reaching the first one that does not match the given predicate, then returns all matched items and progresses the current reading position by that number
            </summary>
            <param name="Predicate"></param>
            <returns>True if atleast a single item was consumed</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Consume_While(System.Predicate{`0},System.ReadOnlySpan{`0}@,System.UInt64)">
            <summary>
            Consumes items until reaching the first one that does not match the given predicate, then returns all matched items and progresses the current reading position by that number
            </summary>
            <param name="Predicate"></param>
            <returns>True if atleast a single item was consumed</returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Reconsume(System.Int32)">
            <summary>
            Pushes the given number of items back onto the front of the stream
            </summary>
            <param name="Count"></param>
        </member>
        <member name="M:CssUI.DataConsumer`1.Reconsume(System.UInt32)">
            <summary>
            Pushes the given number of items back onto the front of the stream
            </summary>
            <param name="Count"></param>
        </member>
        <member name="M:CssUI.DataConsumer`1.Reconsume(System.Int64)">
            <summary>
            Pushes the given number of items back onto the front of the stream
            </summary>
            <param name="Count"></param>
        </member>
        <member name="M:CssUI.DataConsumer`1.Reconsume(System.UInt64)">
            <summary>
            Pushes the given number of items back onto the front of the stream
            </summary>
            <param name="Count"></param>
        </member>
        <member name="M:CssUI.DataConsumer`1.Substream(System.Int32)">
            <summary>
            Consumes the number of items specified by <paramref name="Count"/> and then returns them as a new stream, progressing this streams reading position to the end of the consumed items
            </summary>
            <param name="Predicate"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Substream(System.UInt32)">
            <summary>
            Consumes the number of items specified by <paramref name="Count"/> and then returns them as a new stream, progressing this streams reading position to the end of the consumed items
            </summary>
            <param name="Predicate"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Substream(System.Int64)">
            <summary>
            Consumes the number of items specified by <paramref name="Count"/> and then returns them as a new stream, progressing this streams reading position to the end of the consumed items
            </summary>
            <param name="Predicate"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Substream(System.UInt64)">
            <summary>
            Consumes the number of items specified by <paramref name="Count"/> and then returns them as a new stream, progressing this streams reading position to the end of the consumed items
            </summary>
            <param name="Predicate"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Substream(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Consumes the number of items specified by <paramref name="Count"/> and then returns them as a new stream, progressing this streams reading position to the end of the consumed items
            </summary>
            <param name="Predicate"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Substream(System.UInt32,System.Nullable{System.UInt32})">
            <summary>
            Consumes the number of items specified by <paramref name="Count"/> and then returns them as a new stream, progressing this streams reading position to the end of the consumed items
            </summary>
            <param name="Predicate"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Substream(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Consumes the number of items specified by <paramref name="Count"/> and then returns them as a new stream, progressing this streams reading position to the end of the consumed items
            </summary>
            <param name="Predicate"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Substream(System.UInt64,System.Nullable{System.UInt64})">
            <summary>
            Consumes the number of items specified by <paramref name="Count"/> and then returns them as a new stream, progressing this streams reading position to the end of the consumed items
            </summary>
            <param name="Predicate"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Substream(System.Predicate{`0})">
            <summary>
            Consumes items until reaching the first one that does not match the given <paramref name="Predicate"/>, progressing this streams reading position by that number and then returning all matched items as new stream
            </summary>
            <param name="Predicate"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Slice(System.Int32)">
            <summary>
            Returns a slice of this streams memory containing all of the data after current stream position + <paramref name="offset"/>
            </summary>
            <param name="offset">Offset from the current stream position where the memory slice to begin</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Slice(System.UInt32)">
            <summary>
            Returns a slice of this streams memory containing all of the data after current stream position + <paramref name="offset"/>
            </summary>
            <param name="offset">Offset from the current stream position where the memory slice to begin</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Slice(System.Int64)">
            <summary>
            Returns a slice of this streams memory containing all of the data after current stream position + <paramref name="offset"/>
            </summary>
            <param name="offset">Offset from the current stream position where the memory slice to begin</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Slice(System.UInt64)">
            <summary>
            Returns a slice of this streams memory containing all of the data after current stream position + <paramref name="offset"/>
            </summary>
            <param name="offset">Offset from the current stream position where the memory slice to begin</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Slice(System.Int32,System.Int32)">
            <summary>
            Returns a slice of this streams memory containing all of the data after current stream position + <paramref name="offset"/>
            </summary>
            <param name="offset">Offset from the current stream position where the memory slice to begin</param>
            <param name="count">The number of items to include in the slice</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Slice(System.UInt32,System.UInt32)">
            <summary>
            Returns a slice of this streams memory containing all of the data after current stream position + <paramref name="offset"/>
            </summary>
            <param name="offset">Offset from the current stream position where the memory slice to begin</param>
            <param name="count">The number of items to include in the slice</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Slice(System.Int64,System.Int64)">
            <summary>
            Returns a slice of this streams memory containing all of the data after current stream position + <paramref name="offset"/>
            </summary>
            <param name="offset">Offset from the current stream position where the memory slice to begin</param>
            <param name="count">The number of items to include in the slice</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Slice(System.UInt64,System.UInt64)">
            <summary>
            Returns a slice of this streams memory containing all of the data after current stream position + <paramref name="offset"/>
            </summary>
            <param name="offset">Offset from the current stream position where the memory slice to begin</param>
            <param name="count">The number of items to include in the slice</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DataConsumer`1.Clone">
            <summary>
            Creates and returns a copy of this stream
            </summary>
            <returns></returns>
        </member>
        <member name="T:CssUI.OrderedDictionary`2">
            <summary>
            Implementation of an ordered/indexed dictionary backed by a list.
            </summary>
            <typeparam name="KeyTy"></typeparam>
            <typeparam name="ValueTy"></typeparam>
        </member>
        <member name="M:CssUI.OrderedDictionary`2.Remove(`0)">
            <summary>
            Removes the key-value pair specified by the given key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.OrderedDictionary`2.RemoveValue(`1)">
            <summary>
            Removes the key-value pair specified by the given value
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.OrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Removes the key-value pair specified by the given index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.ReversableDictionary`2.Update(`0,`1,`1)">
            <summary>
            Updates the value for the given <paramref name="key"/> only if the old value matches the <paramref name="comparisonValue"/>
            </summary>
            <param name="key"></param>
            <param name="newValue"></param>
            <param name="comparisonValue"></param>
            <returns></returns>
        </member>
        <member name="T:CssUI.CSS.FlagCollection`1">
            <summary>
            Manages multiple boolean values as single bits which allows for atomic operations and quick comparisons between large sets of boolean values
            </summary>
        </member>
        <member name="F:CssUI.CSS.FlagCollection`1.Length">
            <summary>
            Number of fields (bits) in this collection
            </summary>
        </member>
        <member name="F:CssUI.CSS.FlagCollection`1.Size">
            <summary>
            Size in bytes of collection
            </summary>
        </member>
        <member name="P:CssUI.CSS.FlagCollection`1.ActiveFlags">
            <summary>
            Number of flags currently set to an active(true) state
            </summary>
        </member>
        <member name="M:CssUI.CSS.FlagCollection`1.Clear">
            <summary>
            Clears all flags
            </summary>
        </member>
        <member name="M:CssUI.CSS.FlagCollection`1.Tally_Active">
            <summary>
            Manually tallys all of the set flags
            </summary>
        </member>
        <member name="M:CssUI.CSS.FlagCollection`1.IsEmpty">
            <summary>
            Returns <c>True</c> if this collection has no set flags
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.FlagCollection`1.IsSubsetOf(CssUI.CSS.FlagCollection{`0})">
            <summary>
            Returns <c>True</c> if the given collection also has all of this collections active flags set
            </summary>
        </member>
        <member name="M:CssUI.CSS.FlagCollection`1.op_OnesComplement(CssUI.CSS.FlagCollection{`0})">
            <summary>
            Returns the inverse of this collection
            </summary>
        </member>
        <member name="M:CssUI.CSS.FlagCollection`1.op_BitwiseAnd(CssUI.CSS.FlagCollection{`0},CssUI.CSS.FlagCollection{`0})">
            <summary>
            Returns a new collection with all flags that are in both this and the other collection
            </summary>
        </member>
        <member name="M:CssUI.CSS.FlagCollection`1.op_BitwiseOr(CssUI.CSS.FlagCollection{`0},CssUI.CSS.FlagCollection{`0})">
            <summary>
            Returns a new collection with all flags that are in either this or the other collection
            </summary>
        </member>
        <member name="M:CssUI.CSS.FlagCollection`1.op_ExclusiveOr(CssUI.CSS.FlagCollection{`0},CssUI.CSS.FlagCollection{`0})">
            <summary>
            Returns a new collection with all flags that are in either this or the other collection but not both
            </summary>
        </member>
        <member name="M:CssUI.CSS.FlagCollection`1.Invert">
            <summary>
            Inverts this collections flags
            </summary>
        </member>
        <member name="M:CssUI.CSS.FlagCollection`1.And(CssUI.CSS.FlagCollection{`0})">
            <summary>
            Adds all of the set flags from the given collection to this one
            </summary>
        </member>
        <member name="M:CssUI.CSS.FlagCollection`1.GetEnumerator">
            <summary>
            Returns all of the set flags
            </summary>
        </member>
        <member name="M:CssUI.CSS.FlagCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns all of the set flags
            </summary>
        </member>
        <member name="T:CssUI.CSS.BoxTree.CssAnonymousBox">
            <summary>
            An anonymous box is a box that is not associated with any element. Anonymous boxes are generated in certain circumstances to fix up the box tree when 
            it requires a particular nested structure that is not provided by the boxes generated from the element tree.
            <para>(Holds children and its style data is linked to its parent nodes but can have style properties individually overriden)</para>
            </summary>
        </member>
        <member name="T:CssUI.CSS.BoxTree.CssBox">
            <summary>
            Represents a box-model object which holds other box-model objects as children
            </summary>
        </member>
        <member name="M:CssUI.CSS.BoxTree.CssBox.Flag(CssUI.CSS.Enums.EBoxInvalidationReason)">
            <summary>
            Adds a flag to the dirty bit
            </summary>
        </member>
        <member name="M:CssUI.CSS.BoxTree.CssBox.Unflag(CssUI.CSS.Enums.EBoxInvalidationReason)">
            <summary>
            Removes a flag for the dirty bit
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssBox.IsBlockContainer">
            <summary>
            A block container either contains only inline-level boxes participating in an inline formatting context, 
            or contains only block-level boxes participating in a block formatting context (possibly generating anonymous block boxes to ensure this constraint, as defined in CSS2§9.2.1.1).
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssBox.IsBlockLevel">
            <summary> 
            Content that participates in block layout. Specifically, block-level boxes have an Outer display type of 'Block'
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssBox.IsInlineLevel">
            <summary>
            Content that participates in inline layout. Specifically, inline-level boxes and text runs.
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssBox.IsBlockBox">
            <summary>
            A block-level box that is also a block container.
            <para>Note: Not all block container boxes are block-level boxes: non-replaced inline blocks and non-replaced table cells, for example.</para>
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssBox.IsInlineBox">
            <summary>
            A non-replaced inline-level box whose inner display type is flow. The contents of an inline box participate in the same inline formatting context as the inline box itself.
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssBox.IsAtomicInline">
            <summary>
            An inline-level box that is replaced (such as an image) or that establishes a new formatting context (such as an inline-block or inline-table) and cannot split across lines (as inline boxes and ruby containers can).
            Any inline-level box whose inner display type is not flow establishes a new formatting context of the specified inner display type.
            </summary>
        </member>
        <member name="T:CssUI.CSS.BoxTree.CssBoxTreeNode">
            <summary>
            Simplest form of an object that participates in the CSS box-model.
            Has a Position, Size, Start, and End.
            All objects participating in the box-model must inherit from this.
            </summary>
        </member>
        <member name="F:CssUI.CSS.BoxTree.CssBoxTreeNode.RenderObject">
            <summary>
            Represents the object responsible for rendering this boxs' objects/contents.
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssBoxTreeNode.parentBox">
            <summary>
            The parent object from which this one descends
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssBoxTreeNode.Position">
            <summary>
            Layout position
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssBoxTreeNode.Size">
            <summary>
            Layout dimensions
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssBoxTreeNode.parentNode">
            <inheritdoc/>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssBoxTreeNode.firstChild">
            <inheritdoc/>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssBoxTreeNode.lastChild">
            <inheritdoc/>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssBoxTreeNode.nextSibling">
            <inheritdoc/>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssBoxTreeNode.previousSibling">
            <inheritdoc/>
        </member>
        <member name="M:CssUI.CSS.BoxTree.CssBoxTreeNode.Unlink(CssUI.NodeTree.TreeNode)">
            <summary>
            Unlinks a series or chain of nodes starting at this one and traversing upwards before finally ending at the given <paramref name="TerminationPoint"/>
            </summary>
            <returns>Root of the unlinked chain</returns>
        </member>
        <member name="T:CssUI.CSS.BoxTree.CssPrincipalBox">
            <summary>
            A box as defined in the CSS level 3 box model standards, containing all of the 4 areas: content, padding, border, and margin.
            Origin: Top, Left.
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.DependsOnChildren">
            <summary> Does this box's size depend on the size of it's children? </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.DependsOnContainer">
            <summary> Does this box's size depend on the size of it's containing-block? </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.HasBlockLevelChildren">
            <summary> </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.DisplayGroup">
            <summary> Determines how the box's boundaries are calculated </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.Replaced">
            <summary>
            The edge positions of the Replaced-Content-Area 
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.Content">
            <summary>
            The edge positions of the Content-Area 
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.Padding">
            <summary>
            The edge positions of the Padding-Area 
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.Border">
            <summary>
            The edge positions of the Border-Area 
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.Margin">
            <summary>
            The edge positions of the Margin-Area 
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.ClickArea">
            <summary>
            The block which represents the hitbox for mouse related input events
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.IsAbsolutelyPositioned">
            <summary>
            Is this box absolutely positioned? (eg. <see cref="F:CssUI.CSS.EBoxPositioning.Absolute"/> or <see cref="F:CssUI.CSS.EBoxPositioning.Fixed"/>)
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.IsWidthExplicit">
            <summary>
            Returns <c>True</c> if the Width was given an explicit value (i.e. it doesn't depend on content size)
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.IsHeightExplicit">
            <summary>
            Returns <c>True</c> if the Height was given an explicit value (i.e. it doesn't depend on content size)
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.InFragmentedFlow">
            <summary>
            <c>True</c> is this box is in a fragmentainer and being laid out in fragmented flow
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.Top">
            <summary>
            The margin area edge
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.Right">
            <summary>
            The margin area edge
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.Bottom">
            <summary>
            The margin area edge
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.Left">
            <summary>
            The margin area edge
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.Size">
            <inheritdoc/>
        </member>
        <member name="F:CssUI.CSS.BoxTree.CssPrincipalBox._containing_box">
            <summary>
            Backing value for <see cref="P:CssUI.CSS.BoxTree.CssPrincipalBox.Containing_Box"/>
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.Containing_Box">
            <summary>
            The containing block of this element
            <para>If the control has an ancestor this will be said ancestors content-area block</para>
            <para>Otherwise, if the element is a root element, this should have the dimensions of the viewport</para>
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.Containing_Box_Dependent">
            <summary>
            Returns whether or not our containing block depends on our size
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.Containing_Box_Explicit_Width">
            <summary>
            Returns whether or not our containing boxes Width depends on our size
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.Containing_Box_Explicit_Height">
            <summary>
            Returns whether or not our containing boxes Height depends on our size
            </summary>
        </member>
        <member name="E:CssUI.CSS.BoxTree.CssPrincipalBox.onChange">
            <summary>
            One of the areas from this box has changed
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.Layout_Pos_X">
            <summary>
            The x-axis layout offset given to us by our parent
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.Layout_Pos_Y">
            <summary>
            The y-axis layout offset given to us by our parent
            </summary>
        </member>
        <member name="P:CssUI.CSS.BoxTree.CssPrincipalBox.Intrinsic_Ratio">
            <summary>
            The intrinsic ratio of Height/Width
            </summary>
        </member>
        <member name="F:CssUI.CSS.BoxTree.CssPrincipalBox.Min_Content">
            <summary>
            The smallest size a box could take that doesn’t lead to overflow that could be avoided by choosing a larger size. (See §4 Intrinsic Size Determination.)
            </summary>
        </member>
        <member name="F:CssUI.CSS.BoxTree.CssPrincipalBox.Min_Content_Inline">
            <summary>
            The narrowest inline size a box could take that doesn’t lead to inline-dimension overflow that could be avoided by choosing a larger inline size. Roughly, the inline size that would fit around its contents if all soft wrap opportunities within the box were taken.
            </summary>
        </member>
        <member name="F:CssUI.CSS.BoxTree.CssPrincipalBox.Min_Content_Block">
            <summary>
            In general, and definitely for block-level and inline-level boxes, this is equivalent to the max-content block size.
            </summary>
        </member>
        <member name="F:CssUI.CSS.BoxTree.CssPrincipalBox.Max_Content">
            <summary>
            A box’s “ideal” size in a given axis when given infinite available space. Usually this is the smallest size the box could take in that axis while still fitting around its contents, i.e. minimizing unfilled space while avoiding overflow.
            </summary>
        </member>
        <member name="F:CssUI.CSS.BoxTree.CssPrincipalBox.Max_Content_Inline">
            <summary>
            The box’s “ideal” size in the inline axis. Usually the narrowest inline size it could take while fitting around its contents if none of the soft wrap opportunities within the box were taken. (See §4 Intrinsic Size Determination.)
            </summary>
        </member>
        <member name="F:CssUI.CSS.BoxTree.CssPrincipalBox.Max_Content_Block">
            <summary>
            The box’s “ideal” size in the block axis. Usually the block size of the content after layout.
            </summary>
        </member>
        <member name="M:CssUI.CSS.BoxTree.CssPrincipalBox.Fit_Rect_Around(CssUI.Rect4f,CssUI.Rect4f,CssUI.ReadOnlyRect4f@)">
            <summary>
            Alters the TRBL values of the <paramref name="Left"/> rect such that it fits AROUND the <paramref name="Right"/> rect with the given <paramref name="Left_Offsets"/>.
            </summary>
            <param name="Right"></param>
            <param name="Left"></param>
            <param name="Left_Offsets"></param>
        </member>
        <member name="M:CssUI.CSS.BoxTree.CssPrincipalBox.Fit_Rect_Within(CssUI.Rect4f,CssUI.Rect4f,CssUI.ReadOnlyRect4f@)">
            <summary>
            Alters the TRBL values of the <paramref name="Left"/> rect such that it fits WITHIN the <paramref name="Right"/> rect with the given <paramref name="Right_Offsets"/>.
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <param name="Right_Offsets"></param>
        </member>
        <member name="M:CssUI.CSS.BoxTree.CssPrincipalBox.Update_Bounds">
            <summary>
            Update the box's boundaries, areas, and edges
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="Width"></param>
            <param name="Height"></param>
        </member>
        <member name="M:CssUI.CSS.BoxTree.CssPrincipalBox.Update_Area_Bounds(System.Double,System.Double)">
            <summary>
            Recalculates the coordinates for all sides of the Margin, Border, Padding, and Content areas of this box
            </summary>
            <param name="off_x"></param>
            <param name="off_y"></param>
        </member>
        <member name="M:CssUI.CSS.BoxTree.CssPrincipalBox.Update_Replaced_Bounds">
            <summary>
            Recalculates the coordinates for all sides of the replaced-content area
            </summary>
        </member>
        <member name="M:CssUI.CSS.BoxTree.CssPrincipalBox.Rebuild(System.Boolean)">
            <summary>
            Rebuilds this box's boundaries from the style information given
            </summary>
            <param name="Style"></param>
        </member>
        <member name="M:CssUI.CSS.BoxTree.CssPrincipalBox.Update_Depends_Flag">
            <summary>
            Checks if any of properties used to calculate the block will depend on our parent block
            </summary>
        </member>
        <member name="M:CssUI.CSS.BoxTree.CssPrincipalBox.Get_Replaced_Block_Size">
            <summary>
            Uses the appropriate sizing rules to find the replaced block size
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.BoxTree.CssPrincipalBox.HitTest(System.Double,System.Double)">
            <summary>
            Returns <c>True</c> if the given x/y coordinates lie within the click area of this box
            </summary>
        </member>
        <member name="M:CssUI.CSS.BoxModel.Resolve_Box_Properties_Used_Value(CssUI.CSS.BoxTree.CssPrincipalBox,CssUI.CSS.CssComputedStyle,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@)">
            <summary>
            Resolves 'Used' values for the following properties:
            Width, Height, Top, Right, Bottom, Left, Margin-Left, Margin-Right
            </summary>
        </member>
        <member name="M:CssUI.CSS.BoxModel.Resolve_Horizontal(CssUI.CSS.BoxTree.CssPrincipalBox,CssUI.CSS.CssComputedStyle,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@)">
            <summary>
            Resolves all horizontal sizing properties
            </summary>
        </member>
        <member name="M:CssUI.CSS.BoxModel.Resolve_Vertical(CssUI.CSS.BoxTree.CssPrincipalBox,CssUI.CSS.CssComputedStyle,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@)">
            <summary>
            Resolves all vertical sizing properties
            </summary>
        </member>
        <member name="M:CssUI.CSS.BoxModel.Constrain_Width_Height(CssUI.CSS.CssComputedStyle,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@)">
            <summary>
            Constrains a given Width/Height value according to the CSS specifications for constraining Replaced element sizes
            </summary>
            <param name="Width"></param>
            <param name="Height"></param>
            <param name="outWidth"></param>
            <param name="outHeight"></param>
            <returns><c>True</c> is the values changed</returns>
        </member>
        <member name="M:CssUI.CSS.BoxModel.Calculate_Horizontal(CssUI.CSS.BoxTree.CssPrincipalBox,CssUI.CSS.CssComputedStyle,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@)">
            <summary>
            Calculates all horizontal property values using the ones given
            </summary>
        </member>
        <member name="M:CssUI.CSS.BoxModel.Calculate_Horizontal(CssUI.CSS.BoxTree.CssPrincipalBox,CssUI.CSS.CssComputedStyle,CssUI.CSS.CssValue,CssUI.CSS.CssValue,CssUI.CSS.CssValue,CssUI.CSS.CssValue,CssUI.CSS.CssValue,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@)">
            <summary>
            Calculates all horizontal property values using the ones given
            </summary>
        </member>
        <member name="M:CssUI.CSS.BoxModel.Calculate_Vertical(CssUI.CSS.BoxTree.CssPrincipalBox,CssUI.CSS.CssComputedStyle,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue)">
            <summary>
            Calculates all horizontal property values using the ones given
            </summary>
        </member>
        <member name="M:CssUI.CSS.BoxModel.Calculate_Vertical(CssUI.CSS.BoxTree.CssPrincipalBox,CssUI.CSS.CssComputedStyle,CssUI.CSS.CssValue,CssUI.CSS.CssValue,CssUI.CSS.CssValue,CssUI.CSS.CssValue,CssUI.CSS.CssValue,CssUI.CSS.CssValue,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@,CssUI.CSS.CssValue@)">
            <summary>
            Calculates all horizontal property values using the ones given
            </summary>
        </member>
        <member name="T:CssUI.CSS.Enums.EBoxDisplayGroup">
            <summary>
            Describes how to calculate the boundaries of a CSS box
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EBoxDisplayGroup.INLINE">
            <summary>
            This box does not break flow, it's size is determined by it's contents
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EBoxDisplayGroup.BLOCK">
            <summary>
            This box breaks flow, and it's size is determined by CSS properties
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EBoxDisplayGroup.INLINE_BLOCK">
            <summary>
            This box does not break flow, but it's size is determined by CSS properties
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EBoxDisplayGroup.ABSOLUTELY_POSITIONED">
            <summary>
            This box's position is not determined by the flow system, it is specified by CSS properties
            </summary>
        </member>
        <member name="T:CssUI.CSS.Enums.EBoxFlags">
            <summary>
            Specififes important flags for a box which distinguish it's flow-behaviour and certain element types
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EBoxFlags.IsReplaced">
            <summary>
            This box belongs to a replaced-type element
            </summary>
        </member>
        <member name="T:CssUI.CSS.Enums.EBoxInvalidationReason">
            <summary>
            Specifies all of the reasons for which a cssElement's block may be flagged as dirty.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EBoxInvalidationReason.Clean">
            <summary>
            This block is still valid
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EBoxInvalidationReason.Unknown">
            <summary>
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EBoxInvalidationReason.Reparented">
            <summary>
            The element has changed parents.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EBoxInvalidationReason.Containing_Block_Changed">
            <summary>
            The elements containing block changed and it has properties which depend on it.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EBoxInvalidationReason.Layout_Pos_Changed">
            <summary>
            The element has been repositioned by it's parent's layout system.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EBoxInvalidationReason.Scroll_Offset_Change">
            <summary>
            The elements scroll-offset changed.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EBoxInvalidationReason.Block_Changed">
            <summary>
            The element's block values changed.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EBoxInvalidationReason.Property_Changed">
            <summary>
            A property value affecting the block changed
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EBoxInvalidationReason.Content_Changed">
            <summary>
            The contents of the element have changed
            </summary>
        </member>
        <member name="T:CssUI.CSS.Enums.ECssBoxType">
            <summary>
            Specifies an area-type for a CSS box
            </summary>
        </member>
        <member name="T:CssUI.CSS.Enums.EInnerDisplayType">
            <summary>
            the inner display type, which defines (if it is a non-replaced element) the kind of formatting context it generates, 
            dictating how its descendant boxes are laid out. (The inner display of a replaced element is outside the scope of CSS.)
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EInnerDisplayType.None">
            <summary>
            This element does not generate boxes.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EInnerDisplayType.Flow">
            <summary>
            The element lays out its contents using flow layout (block-and-inline layout).
            If its outer display type is inline or run-in, and it is participating in a block or inline formatting context, then it generates an inline box.
            Otherwise it generates a block container box.
            Depending on the value of other properties (such as position, float, or overflow) and whether it is itself participating in a block or inline formatting context, it either establishes a new block formatting context for its contents or integrates its contents into its parent formatting context.See CSS2.1 Chapter 9. [CSS2] A block container that establishes a new block formatting context is considered to have a used inner display type of flow-root.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EInnerDisplayType.Flow_Root">
            <summary>
            The element generates a block container box, and lays out its contents using flow layout. It always establishes a new block formatting context for its contents.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EInnerDisplayType.Table">
            <summary>
            The element generates a principal table wrapper box that establishes a block formatting context, and which contains an additionally-generated table grid box that establishes a table formatting context.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EInnerDisplayType.Flex">
            <summary>
            The element generates a principal flex container box and establishes a flex formatting context.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EInnerDisplayType.Grid">
            <summary>
            The element generates a principal grid container box, and establishes a grid formatting context.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EInnerDisplayType.Ruby">
            <summary>
            The element generates a ruby container box and establishes a ruby formatting context in addition to integrating its base-level contents into its parent formatting context (if it is inline) or generating a wrapper box of the appropriate outer display type (if it is not).
            </summary>
        </member>
        <member name="T:CssUI.CSS.Enums.EOuterDisplayType">
            <summary>
            Defines the *-level of a box, whether it is block-level, inline-level, or other.
            Dictates how the principal box itself participates in flow layout.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EOuterDisplayType.None">
            <summary>
            This element does not generate boxes.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EOuterDisplayType.Block">
            <summary>
            Block-level elements – those elements of the source document that are formatted visually as blocks (e.g., paragraphs) – are elements which generate a block-level principal box. 
            Values of the 'display' property that make an element block-level include: 'block', 'list-item', and 'table'. 
            Block-level boxes are boxes that participate in a block formatting context.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EOuterDisplayType.Inline">
            <summary>
            The element generates a box that is inline-level when placed in flow layout.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EOuterDisplayType.Run_In">
            <summary>
            The element generates an run-in box, which is a type of inline-level box with special behavior that attempts to merge it into a subsequent block container. See § 3 Run-In Layout for details.
            </summary>
        </member>
        <member name="T:CssUI.CSS.Enums.EFlowDirection">
            <summary>
            Used by the scrolling system
            </summary>
        </member>
        <member name="T:CssUI.CSS.Enums.EOverflowDirection">
            <summary>
            Used by <see cref="T:CssUI.DOM.ScrollBox"/>
            </summary>
        </member>
        <member name="T:CssUI.CSS.Enums.EPropertyDirtFlags">
            <summary>
            Defines the parts of an element that a property can affect
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EPropertyDirtFlags.Visual">
            <summary>
            Property affects the visual appearence (rendering) of the element
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EPropertyDirtFlags.Flow">
            <summary>
            Property will change the flow(layout) positions of child elements
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EPropertyDirtFlags.Text">
            <summary>
            Property will change how the elements text is rendered
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EPropertyDirtFlags.Box">
            <summary>
            Property changes the size of an elements box
            (MASKS ALL box area flags)
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EPropertyDirtFlags.Content_Area">
            <summary>
            Property changes the size of an element boxes Content area
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EPropertyDirtFlags.Padding_Area">
            <summary>
            Property changes the size of an element boxes Padding area
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EPropertyDirtFlags.Border_Area">
            <summary>
            Property changes the size of an element boxes Border area
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EPropertyDirtFlags.Margin_Area">
            <summary>
            Property changes the size of an element boxes Margin area
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EPropertyDirtFlags.Replaced_Area">
            <summary>
            Property changes the size of an element boxes Replaced-Content area
            </summary>
        </member>
        <member name="T:CssUI.CSS.Enums.EPropertyStage">
            <summary>
            Describes all of the different value stages for a Css property
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EPropertyStage.Declared">
            <summary>
            A value that has been declared in a stylesheet, it is likely one of many possibilities for its given property.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EPropertyStage.Assigned">
            <summary>
            Also known as the Cascaded value, this is the stage where a value has won out over all of the other defined for an element.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EPropertyStage.Specified">
            <summary>
            A value that has been interpreted through inheritence or defaulting.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EPropertyStage.Computed">
            <summary>
            A value that has been interpreted to an actual number, rather then a percentage or function
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EPropertyStage.Used">
            <summary>
            A value that has been further interpreted from the computed one, for example a computed value can be [width: auto], the used value is calculated from the computed to be an actual number
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EPropertyStage.Actual">
            <summary>
            A value that can be used in the rendering process as it has been fully interpreted from the used value and any platform restrictions have been imposed on the value
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EPropertySystemDirtFlags.Clean">
            <summary>
            Not dirty
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EPropertySystemDirtFlags.NeedsToCascade">
            <summary>
            The property system needs to re-cascade its properties
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EPropertySystemDirtFlags.NeedsToResolveBlock">
            <summary>
            The property system needs to resolve its block property values
            </summary>
        </member>
        <member name="F:CssUI.CSS.Enums.EPropertySystemDirtFlags.NeedsToResolveFont">
            <summary>
            The property system needs to resolve its font values
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssBoxTree.Generate_Tree(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node)">
            <summary>
            Generates an appropriate CSS principal box object for the given element, populated with any appropriate child boxes
            </summary>
            <param name="E"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.CssBoxTree.Generate_TextRun(CssUI.DOM.Text@)">
            <summary>
            Generates an appropriate CSS text-run object for the given node
            </summary>
            <param name="Node"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.CssBoxTree.Generate_Box(CssUI.DOM.Element@)">
            <summary>
            Generates an appropriate CSS principal-box object for the given element
            </summary>
            <param name="Node"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.CssBoxTree.Populate(CssUI.CSS.BoxTree.CssPrincipalBox@)">
            <summary>
            Populates a given principal box with all of the appropriate boxes of it's owning element's children
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssBoxTree.Get_Closest_Box_Generating_Ancestor(CssUI.DOM.Nodes.Node@)">
            <summary>
            In constructing the box tree, boxes generated by an element are descendants of the principal box of any ancestor elements.
            In the general case, the direct parent box of an element’s principal box is the principal box of its nearest ancestor element that generates a box; 
            however, there are some exceptions, such as for run-in boxes, display types(like tables) that generate multiple container boxes, and intervening anonymous boxes.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.CssBoxTree.Is_Compatable_Parent_Box(CssUI.DOM.Element@,CssUI.DOM.Element@)">
            <summary>
            Returns <c>True</c> if the parent box is a valid container for the given child
            </summary>
            <param name="child"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="P:CssUI.CSS.CssBoxFragment.Replaced">
            <summary>
            The edge positions of the Repalced-Content-Area 
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssBoxFragment.Content">
            <summary>
            The edge positions of the Content-Area 
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssBoxFragment.Padding">
            <summary>
            The edge positions of the Padding-Area 
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssBoxFragment.Border">
            <summary>
            The edge positions of the Border-Area 
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssBoxFragment.Margin">
            <summary>
            The edge positions of the Margin-Area 
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssBoxFragment.ClickArea">
            <summary>
            The block which represents the hitbox for mouse related input events
            </summary>
        </member>
        <member name="M:CssUI.CSS.Formatting.IFormattingContext.Flow(CssUI.CSS.BoxTree.CssBoxTreeNode)">
            <summary>
            Performs layout on all elements within the target
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:CssUI.CSS.ICssBoxFragment.Parent">
            <summary>
            The box that this one resides within
            </summary>
        </member>
        <member name="T:CssUI.CSS.CssBoxArea">
            <summary>
            Represents an sub-area within a CSS box
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssBoxArea.Pos">
            <summary>
            Holds the origin location for the bounds
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssBoxArea.Dimensions">
            <summary>
            Holds the size of the bounds
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssBoxArea.Edge">
            <summary>
            The edges of this area
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssBoxArea.Size">
            <summary>
            The edge sizes of this area
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssBoxArea.Top">
            <summary>
            Top edge position of this area
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssBoxArea.Right">
            <summary>
            Right edge position of this area
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssBoxArea.Bottom">
            <summary>
            Bottom edge position of this area
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssBoxArea.Left">
            <summary>
            Left edge position of this area
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssBoxArea.Size_Top">
            <summary>
            Top edge size of this area
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssBoxArea.Size_Right">
            <summary>
            Right edge size of this area
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssBoxArea.Size_Bottom">
            <summary>
            Bottom edge size of this area
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssBoxArea.Size_Left">
            <summary>
            Left edge size of this area
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssBoxArea.Size_Horizontal">
            <summary>
            The combined Left/Right sizes for this edge
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssBoxArea.Size_Vertical">
            <summary>
            The combined Top/Bottom sizes for this edge
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssBoxArea.Get_Center_Pos">
            <summary>
            Returns the box's current APPROXIMATE center position
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssBoxArea.Get_Pos">
            <summary>
            Returns the box's Position
            </summary>
            <returns></returns>
            We return a new object because destructive calculations will likely be done on this
        </member>
        <member name="M:CssUI.CSS.CssBoxArea.Get_Dimensions">
            <summary>
            Returns the box's Dimensions
            </summary>
            <returns></returns>
            We return a new object because destructive calculations will likely be done on this
        </member>
        <member name="M:CssUI.CSS.CssBoxArea.Get_Rect">
            <summary>
            Returns a copy of this areas edges
            </summary>
            <returns></returns>
        </member>
        <member name="P:CssUI.CSS.CssBoxArea.LogicalWidth">
            <summary>
            The logical-width for this area
            </summary>
            Docs: https://www.w3.org/TR/css-writing-modes-4/#logical-width
        </member>
        <member name="P:CssUI.CSS.CssBoxArea.LogicalHeight">
            <summary>
            The logical-height for this area
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssBoxArea.#ctor(CssUI.CSS.CssBoxArea)">
            <summary>
            Makes a copy of the given <see cref="T:CssUI.CSS.CssBoxArea"/>
            </summary>
            <param name="Area"></param>
        </member>
        <member name="M:CssUI.CSS.CssBoxArea.#ctor(CssUI.CSS.BoxTree.CssBox,CssUI.Point2i,CssUI.Rect2i)">
            <summary>
            
            </summary>
            <param name="Box"></param>
            <param name="Position"></param>
            <param name="Size"></param>
        </member>
        <member name="M:CssUI.CSS.CssBoxArea.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssBoxArea.#ctor(CssUI.DOM.Geometry.DOMRect)">
            <summary>
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssBoxArea.Update_Bounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Update this edge area to be the size given and positioned at the given coordinates
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="Width"></param>
            <param name="Height"></param>
        </member>
        <member name="M:CssUI.CSS.CssBoxArea.Encapsulate(CssUI.CSS.CssBoxArea)">
            <summary>
            Updates this edge area to encapsulate the given edge area
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:CssUI.CSS.CssBoxArea.Fit(CssUI.CSS.CssBoxArea)">
            <summary>
            Updates this edge area to fit within the given edge area
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:CssUI.CSS.CssBoxArea.Fit(CssUI.CSS.CssBoxArea,CssUI.Point2i,CssUI.Rect2i)">
            <summary>
            Updates this edge area to fit within the given edge area and sets it's dimensions within that area
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:CssUI.CSS.CssBoxArea.Clear">
            <summary>
            Zeroes out all position and size values
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssBoxArea.Intersects(CssUI.Point2i)">
            <summary>
            Returns True if the given point lies within this area
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssBoxArea.Intersects(System.Int32,System.Int32)">
            <summary>
            Returns True if the given point lies within this area
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssBoxArea.Intersects(CssUI.CSS.CssBoxArea)">
            <summary>
            Returns True if the given <see cref="T:CssUI.CSS.CssBoxArea"/> intersects this area
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssBoxArea.Intersects(CssUI.DOM.Geometry.DOMRectReadOnly)">
            <summary>
            Returns True if the given <see cref="T:CssUI.DOM.Geometry.DOMRect"/> intersects this area
            </summary>
        </member>
        <member name="F:CssUI.CSS.DisplayType.Outer">
            <summary>
            The 'Inner Display Type'
            Defines the *-level of this box, whether it is block-level, inline-level, or other.
            Dictates how the principal box itself participates in flow layout.
            </summary>
        </member>
        <member name="F:CssUI.CSS.DisplayType.Inner">
            <summary>
            The 'Inner Display Type'
            Defines (if it is a non-replaced element) the kind of formatting context it generates, dictating how its descendant boxes are laid out. (The inner display of a replaced element is outside the scope of CSS.)
            </summary>
        </member>
        <member name="P:CssUI.CSS.DisplayType.IsBlockContainer">
            <summary>
            A block container either contains only inline-level boxes participating in an inline formatting context, 
            or contains only block-level boxes participating in a block formatting context (possibly generating anonymous block boxes to ensure this constraint, as defined in CSS2§9.2.1.1).
            </summary>
        </member>
        <member name="P:CssUI.CSS.DisplayType.IsBlockLevel">
            <summary> 
            Content that participates in block layout. Specifically, block-level boxes have an Outer display type of 'Block'
            </summary>
        </member>
        <member name="P:CssUI.CSS.DisplayType.IsInlineLevel">
            <summary>
            Content that participates in inline layout. Specifically, inline-level boxes and text runs.
            </summary>
        </member>
        <member name="T:CssUI.CSS.CssAlgorithms">
            <summary>
            Holds various commonly used CSS specification defined algorithms
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssAlgorithms.Solve_Object_Axis_Position(System.Double,System.Double,System.Double)">
            <summary>
            Applies (Along a single axis) the CSS specification formula for resolving object relative positions using the values given
            </summary>
            <param name="Percent">Percentage along the axis to resolve</param>
            <param name="ObjectArea">Axis-Size of the area the object resides in</param>
            <param name="ObjectSize">Axis-Size of the object itsself</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.CssAlgorithms.Solve_Object_Axis_Position(CssUI.CSS.CssValue,System.Double,System.Double)">
            <summary>
            Applies (Along a single axis) the CSS specification formula for resolving object relative positions using the values given
            </summary>
            <param name="Pos">Axis-Position to resolve</param>
            <param name="ObjectArea">Axis-Size of the area the object resides in</param>
            <param name="ObjectSize">Axis-Size of the object itsself</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.CssAlgorithms.Solve_Object_Position(CssUI.CSS.CssValue,CssUI.CSS.CssValue,CssUI.Rect2f,CssUI.Rect2f)">
            <summary>
            Applies the CSS specification formula for resolving object relative positions using the values given
            </summary>
            <param name="xPos">Positioning (along x-axis) to resolve </param>
            <param name="yPos">Positioning (along y-axis) to resolve </param>
            <param name="ObjectArea">Size of the area the object resides in</param>
            <param name="ObjectSize">Size of the object itsself</param>
        </member>
        <member name="M:CssUI.CSS.CssAlgorithms.Default_Sizing_Algorithm(CssUI.CSS.BoxTree.CssPrincipalBox,CssUI.CSS.CssValue,CssUI.CSS.CssValue,System.Double,System.Double)">
            <summary>
            The default sizing algorithm is a set of rules commonly used to find an object's concrete object size. 
            It resolves the simultaneous constraints presented by the object's intrinsic dimensions and either an unconstrained specified size or one consisting of only a definite width and/or height.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:CssUI.CSS.Internal.CssCommon.FONT_SCALE" -->
        <member name="F:CssUI.CSS.Internal.CssCommon.FONT_SCALE_STEP_AVG">
            <summary>
            The average difference between font-scale table entries
            </summary>
        </member>
        <member name="M:CssUI.CSS.Internal.CssCommon.Normalize_Non_Finite(System.Double)">
            <summary>
            Normalizess a decimal value such that it is not NaN nor Infinity
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CssUI.CSS.Internal.CssCommon.Get_Font_Size_Keyword_Scaling_Factor(CssUI.CSS.EFontSize)" -->
        <member name="M:CssUI.CSS.Internal.CssCommon.Get_Font_Scaling_Step_Index_From_Size(System.Double)">
            <summary>
            Converts a font size into its CSS standard font scale index
            </summary>
            <param name="size">Font size</param>
            <returns>Index into the font scaling table</returns>
        </member>
        <member name="M:CssUI.CSS.Internal.CssCommon.Get_Font_Scaling_From_Size(System.Double)">
            <summary>
            Converts a font size into its CSS standard font scale
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.Internal.CssCommon.Get_Font_Scaling_From_Step_Index(System.Int32)">
            <summary>
            Converts a font size into its CSS standard font scale
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.Internal.CssCommon.Is_Containing_Block_Ancestor_Of(CssUI.DOM.Element,CssUI.DOM.Element)">
            <summary>
            Returns <c>True</c> if the owner of the containing block for the <paramref name="A"/> element is an ancestor of <paramref name="B"/>
            </summary>
        </member>
        <member name="M:CssUI.CSS.Internal.CssCommon.Find_Formatting_Container(CssUI.DOM.Element)">
            <summary>
            Returns the nearest ancestor which is participating in flow(Establishes a new formatting-context)
            </summary>
            <param name="Target"></param>
            <returns></returns>
        </member>
        <member name="T:CssUI.CSS.Internal.ECssValueFlags">
            <summary>
            Flags which describe the attributes for a <see cref="!:CSSValue"/>
            </summary>
        </member>
        <member name="F:CssUI.CSS.Internal.ECssValueFlags.None">
            <summary>
            </summary>
        </member>
        <member name="F:CssUI.CSS.Internal.ECssValueFlags.Depends">
            <summary>
            The final value will depend on values from other propertys
            </summary>
        </member>
        <member name="F:CssUI.CSS.Internal.ECssValueFlags.Absolute">
            <summary>
            Value can be already be resolved to a concrete number, it is "absolutely" defined and does not depend on the state of any other values.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Internal.EPropertySetOrigin.UserAgent">
            <summary>
            Applies to Properties which would normally be set by a browser, default properties
            </summary>
        </member>
        <member name="F:CssUI.CSS.Internal.EPropertySetOrigin.Author">
            <summary>
            Applies to proerties which are specified within a stylesheet
            </summary>
        </member>
        <member name="F:CssUI.CSS.Internal.ESelectorCombinator.Descendant">
            <summary>
            '>>' or ' '
            Descendant combinators express such a relationship. 
            A descendant combinator is whitespace that separates two sequences of simple selectors. 
            A selector of the form "A B" represents an element B that is an arbitrary descendant of some ancestor element A.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Internal.ESelectorCombinator.Child">
            <summary>
            '>'
            A child combinator describes a childhood relationship between two elements. 
            A child combinator is made of the "greater-than sign" (U+003E, >) character and separates two sequences of simple selectors.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Internal.ESelectorCombinator.Sibling_Adjacent">
            <summary>
            '+'
            The next-sibling combinator is made of the "plus sign" (U+002B, +) character that separates two sequences of simple selectors. 
            The elements represented by the two sequences share the same parent in the document tree and the element represented by 
            the first sequence immediately precedes the element represented by the second one.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Internal.ESelectorCombinator.Sibling_Subsequent">
            <summary>
            '~'
            The subsequent-sibling combinator is made of the "tilde" (U+007E, ~) character that separates two sequences of simple selectors. 
            The elements represented by the two sequences share the same parent in the document tree and the element represented 
            by the first sequence precedes (not necessarily immediately) the element represented by the second one.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.CssPropertyBase.Owner">
            <summary>
            The UI element which contains this property
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.CssPropertyBase.CssName">
            <summary>
            The propertys identifier token in stylesheets.
            <para>EG; "box-sizing", "margin-left", "margin-top", etc </para>
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.CssPropertyBase.SourcePtr">
            <summary>
            Tracks which styling rule block this property came from
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.CssPropertyBase.Selector">
            <summary>
            Tracks which styling rule block this property came from
            </summary>
        </member>
        <member name="F:CssUI.CSS.Internal.CssPropertyBase.Locked">
            <summary>
            If true then this propertys values cannot be set externally
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.CssPropertyBase.Flags">
            <summary>
            All flags which are present for all currently computed <see cref="T:CssUI.CSS.CssValue"/>'s
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.CssPropertyBase.IsInheritable">
            <summary>
            Returns TRUE if this property is inheritable according to its definition
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.CssPropertyBase.HasValue">
            <summary>
            Returns TRUE if the <see cref="!:Assigned"/> value is non-null
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.CssPropertyBase.IsNone">
            <summary>
            Returns TRUE if the <see cref="!:Assigned"/> value is <see cref="F:CssUI.CSS.ECssValueTypes.NONE"/>
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.CssPropertyBase.IsAuto">
            <summary>
            Return TRUE if the assigned value is set to <see cref="F:CssUI.CSS.CssValue.Auto"/>
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.CssPropertyBase.IsInherited">
            <summary>
            Returns TRUE if the assigned value is <see cref="F:CssUI.CSS.CssValue.Inherit"/>
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.CssPropertyBase.IsDependent">
            <summary>
            Returns TRUE if the assigned value has the <see cref="F:CssUI.CSS.Internal.ECssValueFlags.Depends"/> flag
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.CssPropertyBase.IsDependentOrAuto">
            <summary>
            Return TRUE if the assigned value is set to <see cref="F:CssUI.CSS.CssValue.Auto"/>
            Returns TRUE if the assigned value has the <see cref="F:CssUI.CSS.Internal.ECssValueFlags.Depends"/> flag
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.CssPropertyBase.IsPercentageOrAuto">
            <summary>
            Return TRUE if the assigned value is set to <see cref="F:CssUI.CSS.CssValue.Auto"/>
            Returns TRUE if the assigned value type is a percentage
            </summary>
        </member>
        <member name="E:CssUI.CSS.Internal.CssPropertyBase.onValueChange">
            <summary>
            Callback for when any value stage of this property changes
            </summary>
        </member>
        <member name="M:CssUI.CSS.Internal.CssPropertyBase.Find_Inherited_Value">
            <summary>
            Returns the inherited value from the properties owners parent element
            </summary>
        </member>
        <member name="M:CssUI.CSS.Internal.CssPropertyBase.Revert(System.Boolean)">
            <summary>
            Causes this property to revert back to the computed stage such that it must re-interpret its Used and Actual values.
            </summary>
            <param name="suppress">Suppresses any change event from firing once the Used value gets re-interpreted</param>
        </member>
        <member name="M:CssUI.CSS.Internal.CssPropertyBase.Handle_Unit_Change(CssUI.CSS.ECssUnit)">
            <summary>
            Allows external code to notify this property that a certain unit type has changed scale and if we have a value which uses that unit-type we need to fire our Changed event because our Computed value will be different
            </summary>
        </member>
        <member name="M:CssUI.CSS.Internal.CssPropertyBase.Cascade(CssUI.CSS.ICssProperty)">
            <summary>
            Overwrites the values of this instance with any values from another which aren't <see cref="F:CssUI.CSS.CssValue.Null"/>
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CSS.Internal.CssPropertyBase.CascadeAsync(CssUI.CSS.ICssProperty)">
            <summary>
            Asynchronously overwrites the values of this instance with any values from another which aren't <see cref="F:CssUI.CSS.CssValue.Null"/>
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CSS.Internal.CssPropertyBase.Overwrite(CssUI.CSS.ICssProperty)">
            <summary>
            Ooverwrites the assigned value of this instance with values from another if they are different
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CSS.Internal.CssPropertyBase.OverwriteAsync(CssUI.CSS.ICssProperty)">
            <summary>
            Asynchronously overwrites the assigned value of this instance with values from another if they are different
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CSS.Internal.CssPropertyBase.Update(System.Boolean)">
            <summary>
            Resets all values back to the Assigned and then recomputes them later
            </summary>
            <param name="ComputeNow">If <c>True</c> the final values will be computed now, In most cases leave this false</param>
        </member>
        <member name="M:CssUI.CSS.Internal.CssPropertyBase.UpdateDependent(System.Boolean)">
            <summary>
            If the Assigned value is one that depends on another value for its final value then
            Resets all values back to the Assigned and then recomputes them later
            </summary>
            <param name="ComputeNow">If <c>True</c> the final values will be computed now, In most cases leave this false</param>
        </member>
        <member name="M:CssUI.CSS.Internal.CssPropertyBase.UpdateDependentOrAuto(System.Boolean)">
            <summary>
            If the Assigned value is one that depends on another value for its final value OR is <see cref="F:CssUI.CSS.CssValue.Auto"/> then
            Resets all values back to the Assigned and then recomputes them later
            </summary>
            <param name="ComputeNow">If <c>True</c> the final values will be computed now, In most cases leave this false</param>
        </member>
        <member name="M:CssUI.CSS.Internal.CssPropertyBase.UpdatePercentageOrAuto(System.Boolean)">
            <summary>
            If the Assigned value is a percentage OR is <see cref="F:CssUI.CSS.CssValue.Auto"/> then
            Resets all values back to the Assigned and then recomputes them later
            </summary>
            <param name="ComputeNow">If <c>True</c> the final values will be computed now, In most cases leave this false</param>
        </member>
        <member name="T:CssUI.CSS.Internal.CssDefinitions">
            <summary>
            Defines all of the possible CSS styles properties and their default values / behaviour flags
            </summary>
        </member>
        <member name="M:CssUI.CSS.Internal.CssDefinitions.Create_Font_Property_Definitions">
            <summary>
            Properties that are defined in the CSS fonts module
            </summary>
        </member>
        <member name="M:CssUI.CSS.Internal.CssDefinitions.Create_System_Property_Definitions">
            <summary>
            Properties that can ONLY be set by the CssUI system
            </summary>
        </member>
        <member name="M:CssUI.CSS.Internal.CssDefinitions.Create_Rendering_Property_Definitions">
            <summary>
            Properties that affect the way something is rendered
            </summary>
        </member>
        <member name="M:CssUI.CSS.Internal.CssDefinitions.Create_Layout_Property_Definitions">
            <summary>
            Properties that affect the way elements position their sub elements
            </summary>
        </member>
        <member name="M:CssUI.CSS.Internal.CssDefinitions.Create_Sizing_Property_Definitions">
            <summary>
            Properties that affect the sizing of sub elements
            </summary>
        </member>
        <member name="M:CssUI.CSS.Internal.CssDefinitions.Create_Block_Property_Definitions">
            <summary>
            Properties that directly determine the size or position of an elements box
            </summary>
        </member>
        <member name="T:CssUI.CSS.Internal.MediaDefinition">
            <summary>
            Holds all of, the specification defined, information about the valid values for a property and how to resolve said values into an absolute form.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.MediaDefinition.Name">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.MediaDefinition.Type">
            <summary>
            Specifies if this feature name is a Discreet or Range type
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.MediaDefinition.AllowedTypes">
            <summary>
            Allowed datatypes, when set this will override the disallowed list
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.MediaDefinition.KeywordWhitelist">
            <summary>
            A list of all keywords that can be assigned to this property
            </summary>
        </member>
        <member name="M:CssUI.CSS.Internal.MediaDefinition.#ctor(CssUI.AtomicName{CssUI.CSS.Media.EMediaFeatureName},CssUI.CSS.Media.EMediaFeatureType,CssUI.CSS.ECssValueTypes,System.String[])">
            <summary>
            Define a new Css Styling property
            </summary>
            <param name="Name">CSS property name</param>
            <param name="Inherited">Do child elements inherit this value if they are unset?</param>
            <param name="Flags">Indicates what aspects of an element this property affects</param>
            <param name="Initial">Default value for the property</param>
            <param name="DisallowedTypes">Bitmask of all value data types which cannot be assigned to this property</param>
            <param name="Keywords">List of keywords which can be assigned to this property</param>
            <param name="IsPrivate">If TRUE then this property cannot be set from style-sheets</param>
        </member>
        <member name="M:CssUI.CSS.Internal.MediaDefinition.Is_Valid_Value_Type(CssUI.CSS.ECssValueTypes)">
            <summary>
            Returns whether the specified value is valid according to the currently set options
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.Internal.MediaDefinition.CheckAndThrow(CssUI.CSS.ICssProperty,CssUI.Internal.CssValueList)">
            <summary>
            Throws an exception if any of the given values are invalid according to the currently set options
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.Internal.MediaDefinition.CheckAndThrow(CssUI.CSS.ICssProperty,CssUI.CSS.CssValue)">
            <summary>
            Throws an exception if the value is invalid according to the currently set options
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:CssUI.CSS.Internal.StyleDefinition">
            <summary>
            Holds all of, the specification defined, information about the valid values for a property and how to resolve said values into an absolute form.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.StyleDefinition.Name">
            <summary>
            CSS Name of the property
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.StyleDefinition.Initial">
            <summary>
            Value for this property which is treated as the 'specified' value if the property definition does not have 'Inherited' (inherited by default) set to true or if the owning elements has no parent elements.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.StyleDefinition.DefaultUnit">
            <summary>
            The default CSS unit this property uses when resolving
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.StyleDefinition.Inherited">
            <summary>
            If TRUE then this property will be inherited by default, meaning it's value is passed down to child elements rather then their matching property using it's 'initial' value
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.StyleDefinition.Percentage_Resolver">
            <summary>
            Method used to resolve percentage values to computed values for this property, or NULL if percentages are not accepted.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.StyleDefinition.IsPrivate">
            <summary>
            If TRUE then this property cannot be set from style-sheets
            </summary>
        </member>
        <member name="F:CssUI.CSS.Internal.StyleDefinition.keywordWhitelist">
            <summary>
            A list of all keywords that can be assigned to this property
            </summary>
        </member>
        <member name="F:CssUI.CSS.Internal.StyleDefinition.propertyStageResolver">
            <summary>
            A map of resolution delegates to <see cref="T:CssUI.CSS.Enums.EPropertyStage"/> which the defined property uses to resolve property values
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.StyleDefinition.KeywordWhitelist">
            <summary>
            A list of all keywords that can be assigned to this property
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.StyleDefinition.PropertyStageResolver">
            <summary>
            A map of resolution delegates to <see cref="T:CssUI.CSS.Enums.EPropertyStage"/> which the defined property uses to resolve property values
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.StyleDefinition.AllowedTypes">
            <summary>
            Allowed datatypes, when set this will override the disallowed list
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.StyleDefinition.Flags">
            <summary>
            Specifies which aspects of an elements state this property will affect
            </summary>
        </member>
        <member name="M:CssUI.CSS.Internal.StyleDefinition.#ctor(CssUI.AtomicName{CssUI.CSS.ECssPropertyID},System.Boolean,CssUI.CSS.Enums.EPropertyDirtFlags,CssUI.CSS.CssValue,CssUI.CSS.ECssValueTypes,System.String[],System.Boolean,CssUI.CSS.Internal.CssPercentageResolver,System.Tuple{CssUI.CSS.Enums.EPropertyStage,CssUI.Internal.PropertyResolverFunc}[])">
            <summary>
            Creates a new CSS property definition
            </summary>
            <param name="Name">CSS property name</param>
            <param name="Inherited">Do child elements inherit this value if they are unset?</param>
            <param name="Flags">Indicates what aspects of an element this property affects</param>
            <param name="Initial">Default value for the property</param>
            <param name="Keywords">List of keywords which can be assigned to this property</param>
            <param name="IsPrivate">If TRUE then this property cannot be set from style-sheets</param>
        </member>
        <member name="M:CssUI.CSS.Internal.StyleDefinition.Is_Valid_Value_Type(CssUI.CSS.ECssValueTypes)">
            <summary>
            Returns whether the specified value is valid according to the currently set options
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.Internal.StyleDefinition.CheckAndThrow(CssUI.CSS.ICssProperty,CssUI.Internal.CssValueList)">
            <summary>
            Throws an exception if any of the given values are invalid according to the currently set options
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.Internal.StyleDefinition.CheckAndThrow(CssUI.CSS.ICssProperty,CssUI.CSS.CssValue)">
            <summary>
            Throws an exception if the value is invalid according to the currently set options
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.Internal.CssPropertyResolver.Font_Family_Used(CssUI.CSS.ICssProperty)">
            <summary>
            Filters font family values
            </summary>
            <param name="Property"></param>
            <returns></returns>
        </member>
        <member name="T:CssUI.CSS.Internal.CssPercentageResolver">
            <summary>
            A function that transforms a percentage into an absolute value
            </summary>
            <param name="Property">The property being resolved</param>
            <param name="Percent">Decimal in the range 0.0 - 1.0</param>
            <returns></returns>
        </member>
        <member name="T:CssUI.CSS.Internal.ValueTracker`1">
            <summary>
            Stores the hash for an generic object such that changes to it may be detected.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.ValueTracker`1.HasValue">
            <summary>
            Tracks if this hash has been set
            </summary>
        </member>
        <member name="P:CssUI.CSS.Internal.ValueTracker`1.ChangeCount">
            <summary>
            How many times this hash has been changed
            </summary>
        </member>
        <member name="E:CssUI.CSS.Internal.ValueTracker`1.onChange">
            <summary>
            Fired whenever the value hash changes
            </summary>
        </member>
        <member name="M:CssUI.CSS.Internal.ValueTracker`1.Update(`0,System.Boolean)">
            <summary>
            Updates the value and optionally suppresses the change event.
            </summary>
            <param name="newValue">New Value</param>
            <param name="suppress">If <c>True</c> the change event will not be fired</param>
        </member>
        <member name="T:CssUI.CSS.Internal.ValueTrackerEventHandler">
            <summary>
            
            </summary>
            <param name="oldHash">Hash for the previous value</param>
            <param name="newHash">Hash for the new value</param>
            <param name="changes">Number of times the value has changed in total</param>
            <param name="hadValue"><c>True</c> if the tracker previously had a value set</param>
        </member>
        <member name="T:CssUI.CSS.CssAnBMatcher">
            <summary>
            Handles An+B syntax matching
            <para>Only used by certain CSS functions</para>
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssAnBMatcher.Consume(CssUI.DataConsumer{CssUI.CSS.Parser.CssToken})">
            <summary>
            Consumes and returns an An+B token from a <see cref="T:CssUI.CSS.Serialization.TokenStream"/>
            </summary>
            <param name="Tokens"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.CssAnBMatcher.Match(System.Int32)">
            <summary>
            Checks if a given index matches
            </summary>
            <param name="index">The index to check</param>
        </member>
        <member name="T:CssUI.CSS.Serialization.CssParser">
            <summary>
            Parses a stream of <see cref="T:CssUI.CSS.Parser.CssToken"/>s and returns 
            </summary>
        </member>
        <member name="M:CssUI.CSS.Serialization.CssParser.Parse_Rule_List">
            <summary>
            Parses and returns a list of rules
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.Serialization.CssParser.Parse_Rule">
            <summary>
            Parses and returns a single rule
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.Serialization.CssParser.Consume_All_Whitespace(CssUI.DataConsumer{CssUI.CSS.Parser.CssToken})">
            <summary>
            Continually consumes tokens until the current token is not a whitespace one
            </summary>
        </member>
        <member name="M:CssUI.CSS.Serialization.CssParser.Consume_SimpleBlock(CssUI.DataConsumer{CssUI.CSS.Parser.CssToken})">
            <summary>
            Consumes a block of tokens encased inbetween one of: [], {}, or ()
            </summary>
        </member>
        <member name="M:CssUI.CSS.Serialization.CssParser.Consume_ComponentValue(CssUI.DataConsumer{CssUI.CSS.Parser.CssToken})">
            <summary>
            Attempts to consume all tokens within a matching pair of () or {} brackets and otherwise just returns the next token.
            </summary>
            <param name="Stream"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.Serialization.CssParser.Consume_Media_Condition(CssUI.DataConsumer{CssUI.CSS.Parser.CssToken})">
            <summary>
            Consumes a new <see cref="T:CssUI.CSS.Media.MediaCondition"/> or <see cref="T:CssUI.CSS.Media.MediaFeature"/>
            </summary>
            <param name="Stream"></param>
            <returns></returns>
        </member>
        <member name="T:CssUI.CSS.Serialization.ParserCommon">
            <summary>
            Provides common functions related to CSS parsing
            </summary>
        </member>
        <member name="M:CssUI.CSS.Serialization.ParserCommon.Is_Combinator(CssUI.CSS.Parser.CssToken)">
            <summary>
            Returns <c>True</c> if the token is a keyword for <see cref="T:CssUI.CSS.Media.EMediaCombinator"/> ('and', 'or', 'not')
            <para>Used by <see cref="T:CssUI.CSS.Media.MediaFeature"/></para>
            </summary>
            <param name="Stream"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CssUI.CSS.Serialization.ParserCommon.Is_Comparator(CssUI.CSS.Parser.CssToken)" -->
        <!-- Badly formed XML comment ignored for member "M:CssUI.CSS.Serialization.ParserCommon.Starts_Ratio_Value(System.ReadOnlySpan{CssUI.CSS.Parser.CssToken})" -->
        <member name="M:CssUI.CSS.Serialization.ParserCommon.Starts_MF_Ident_Or_Value(System.ReadOnlySpan{CssUI.CSS.Parser.CssToken})">
            <summary>
            Returns if the next token in the stream defines a <see cref="T:CssUI.CSS.Media.MediaFeature"/> identifier or value
            <para>Used by <see cref="T:CssUI.CSS.Media.MediaFeature"/></para>
            <para>A <see cref="T:CssUI.CSS.Media.MediaFeature"/> always starts with an opening parentheses followed by optional whitespace and an ident token which is NOT a combinator or a number</para>
            </summary>
        </member>
        <member name="M:CssUI.CSS.Serialization.ParserCommon.Starts_Media_Condition(System.ReadOnlySpan{CssUI.CSS.Parser.CssToken})">
            <summary>
            Returns if the next tokens in the stream define a <see cref="T:CssUI.CSS.Media.MediaCondition"/>
            <para>Used by <see cref="T:CssUI.CSS.Media.MediaFeature"/></para>
            <para>A <see cref="T:CssUI.CSS.Media.MediaCondition"/> always starts with an opening parentheses followed by either a combinator or optional whitespace and another opening parentheses</para>
            </summary>
        </member>
        <member name="M:CssUI.CSS.Serialization.ParserCommon.Starts_Media_Feature(System.ReadOnlySpan{CssUI.CSS.Parser.CssToken})">
            <summary>
            Returns if the next tokens in the stream define a <see cref="T:CssUI.CSS.Media.MediaFeature"/>
            <para>Used by <see cref="T:CssUI.CSS.Media.MediaFeature"/></para>
            <para>A <see cref="T:CssUI.CSS.Media.MediaFeature"/> always starts with an opening parentheses followed by optional whitespace and an ident token which is NOT a combinator</para>
            </summary>
        </member>
        <member name="M:CssUI.CSS.Serialization.ParserCommon.Starts_Boolean_Feature(System.ReadOnlySpan{CssUI.CSS.Parser.CssToken})">
            <summary>
            Returns if the next tokens in the stream define a discreet media feature
            <para>Used by <see cref="T:CssUI.CSS.Media.MediaFeature"/></para>
            </summary>
        </member>
        <member name="M:CssUI.CSS.Serialization.ParserCommon.Starts_Discreet_Feature(System.ReadOnlySpan{CssUI.CSS.Parser.CssToken})">
            <summary>
            Returns if the next tokens in the stream define a discreet media feature
            <para>Used by <see cref="T:CssUI.CSS.Media.MediaFeature"/></para>
            </summary>
        </member>
        <member name="M:CssUI.CSS.Serialization.ParserCommon.Starts_Range_Feature(System.ReadOnlySpan{CssUI.CSS.Parser.CssToken})">
            <summary>
            Returns if the next tokens in the stream define a range media feature
            <para>Used by <see cref="T:CssUI.CSS.Media.MediaFeature"/></para>
            </summary>
        </member>
        <member name="T:CssUI.CSS.Serialization.Serializer">
            <summary>
            Provides serialization logic for CSS data structures
            </summary>
        </member>
        <member name="T:CssUI.CSS.EColor">
            <summary>
            Lists all of the named colors for CSS/HTML
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.CurrentColor">
            <summary>
            The value of the ‘color’ property. 
            The used value of the ‘currentColor’ keyword is the computed value of the ‘color’ property. 
            If the ‘currentColor’ keyword is set on the ‘color’ property itself, it is treated as ‘color: inherit’.
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Transparent">
            <summary>
            Fully transparent. This keyword can be considered a shorthand for transparent black, rgba(0,0,0,0), which is its computed value.
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Aliceblue">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Antiquewhite">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Aqua">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Aquamarine">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Azure">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Beige">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Bisque">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Black">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Blanchedalmond">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Blue">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Blueviolet">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Brown">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Burlywood">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Cadetblue">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Chartreuse">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Chocolate">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Coral">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Cornflowerblue">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Cornsilk">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Crimson">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Cyan">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Darkblue">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Darkcyan">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Darkgoldenrod">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Darkgray">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Darkgreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Darkgrey">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Darkkhaki">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Darkmagenta">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Darkolivegreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Darkorange">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Darkorchid">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Darkred">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Darksalmon">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Darkseagreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Darkslateblue">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Darkslategray">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Darkslategrey">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Darkturquoise">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Darkviolet">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Deeppink">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Deepskyblue">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Dimgray">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Dimgrey">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Dodgerblue">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Firebrick">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Floralwhite">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Forestgreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Fuchsia">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Gainsboro">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Ghostwhite">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Gold">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Goldenrod">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Gray">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Green">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Greenyellow">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Grey">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Honeydew">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Hotpink">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Indianred">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Indigo">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Ivory">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Khaki">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Lavender">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Lavenderblush">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Lawngreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Lemonchiffon">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Lightblue">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Lightcoral">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Lightcyan">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Lightgoldenrodyellow">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Lightgray">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Lightgreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Lightgrey">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Lightpink">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Lightsalmon">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Lightseagreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Lightskyblue">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Lightslategray">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Lightslategrey">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Lightsteelblue">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Lightyellow">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Lime">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Limegreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Linen">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Magenta">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Maroon">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Mediumaquamarine">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Mediumblue">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Mediumorchid">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Mediumpurple">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Mediumseagreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Mediumslateblue">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Mediumspringgreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Mediumturquoise">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Mediumvioletred">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Midnightblue">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Mintcream">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Mistyrose">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Moccasin">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Navajowhite">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Navy">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Oldlace">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Olive">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Olivedrab">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Orange">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Orangered">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Orchid">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Palegoldenrod">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Palegreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Paleturquoise">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Palevioletred">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Papayawhip">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Peachpuff">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Peru">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Pink">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Plum">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Powderblue">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Purple">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Rebeccapurple">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Red">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Rosybrown">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Royalblue">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Saddlebrown">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Salmon">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Sandybrown">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Seagreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Seashell">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Sienna">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Silver">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Skyblue">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Slateblue">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Slategray">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Slategrey">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Snow">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Springgreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Steelblue">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Tan">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Teal">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Thistle">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Tomato">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Turquoise">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Violet">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Wheat">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.White">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Whitesmoke">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Yellow">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EColor.Yellowgreen">
            <summary>
            
            </summary>
        </member>
        <member name="T:CssUI.CSS.ECssValueTypes">
            <summary>
            Style value types
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssValueTypes.NULL">
            <summary>
            Nothing
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssValueTypes.UNSET">
            <summary>
            CSS Keyword Used to override declerations, forcing a value to resolve to its inherited or initial values
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssValueTypes.AUTO">
            <summary>
            CSS Keyword
            Value should use whatever 'auto' logic is applicable to determine it's used value
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssValueTypes.INITIAL">
            <summary>
            CSS Keyword
            Value should resolve to it's definitions default value
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssValueTypes.INHERIT">
            <summary>
            CSS Keyword
            Value is inherited from ancestor
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:CssUI.CSS.ECssValueTypes.NONE" -->
        <member name="F:CssUI.CSS.ECssValueTypes.DEFAULT">
            <summary>
            CSS Keyword
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssValueTypes.INTEGER">
            <summary>
            An integer is one or more decimal digits ‘0’ through ‘9’ and corresponds to a subset of the NUMBER token in the grammar. Integers may be immediately preceded by ‘-’ or ‘+’ to indicate the sign.
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssValueTypes.NUMBER">
            <summary>
            A number is either an integer, or zero or more decimal digits followed by a dot (.) followed by one or more decimal digits.
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssValueTypes.DIMENSION">
            <summary>
            A dimension is a number immediately followed by a unit identifier.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:CssUI.CSS.ECssValueTypes.PERCENT" -->
        <member name="F:CssUI.CSS.ECssValueTypes.COLOR">
            <summary>
            Value is a 32-bit integer which represents an RGBA color value
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssValueTypes.STRING">
            <summary>
            Value is a string
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssValueTypes.KEYWORD">
            <summary>
            Keywords are pre-defined CSS idents that have special meaning relative to a specific properties
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssValueTypes.FUNCTION">
            <summary>
            The value is an instance of <see cref="T:CssUI.CSS.CssFunction"/>.
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssValueTypes.IMAGE">
            <summary>
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssValueTypes.POSITION">
            <summary>
            Specifies the position of an object area inside a positioning area.
            The value is an instance of <see cref="T:CssUI.Point2f"/>.
            This value initially consists of multiple sub-values eg: 'left' and '50%' and it's type before the computed stage is <see cref="F:CssUI.CSS.ECssValueTypes.COLLECTION"/>.
            Docs: https://www.w3.org/TR/css-values-4/#position
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssValueTypes.COLLECTION">
            <summary>
            Collection values are actually an array of multiple sub values
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssValueTypes.RATIO">
            <summary>
            Ratios are used by the media queries
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssValueTypes.RESOLUTION">
            <summary>
            Resolutions are used by the media queries
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaColorGamut.SRGB">
            <summary>
            The output device can support approximately the sRGB gamut or more.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaColorGamut.P3">
            <summary>
            The output device can support approximately the gamut specified by the DCI P3 Color Space or more.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaColorGamut.REC2020">
            <summary>
            The output device can support approximately the gamut specified by the ITU-R Recommendation BT.2020 Color Space or more.
            </summary>
        </member>
        <member name="T:CssUI.CSS.Media.EMediaCombinator">
            <summary>
            Combinators specify how a media query determines if it's set of features cause it to match a given document
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaCombinator.AND">
            <summary>
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaCombinator.OR">
            <summary>
            Instantly returns true for a match
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaCombinator.NOT">
            <summary>
            Negates the comparison result for a match
            </summary>
        </member>
        <member name="T:CssUI.CSS.Media.EMediaFeatureContext">
            <summary>
            Specifies how a <see cref="T:CssUI.CSS.Media.MediaFeature"/> should evaluate its components
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaFeatureName.Width">
            <summary>
            The ‘width’ media feature describes the width of the targeted display area of the output device. 
            For continuous media, this is the width of the viewport (as described by CSS2, section 9.1.1 [CSS21]) including the size of a rendered scroll bar (if any). 
            For paged media, this is the width of the page box (as described by CSS2, section 13.2 [CSS21]).
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaFeatureName.Height">
            <summary>
            The ‘height’ media feature describes the height of the targeted display area of the output device. 
            For continuous media, this is the height of the viewport including the size of a rendered scroll bar (if any). 
            For paged media, this is the height of the page box.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaFeatureName.AspectRatio">
            <summary>
            The aspect-ratio media feature is defined as the ratio of the value of the width media feature to the value of the height media feature.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaFeatureName.Orientation">
            <summary>
            portrait:
                The orientation media feature is portrait when the value of the height media feature is greater than or equal to the value of the width media feature.
            landscape:
            Otherwise orientation is landscape.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaFeatureName.Resolution">
            <summary>
            The resolution media feature describes the resolution of the output device, i.e. the density of the pixels, taking into account the page zoom but assuming a pinch zoom of 1.0.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaFeatureName.Scan">
            <summary>
            The scan media feature describes the scanning process of some output devices.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaFeatureName.Grid">
            <summary>
            The grid media feature is used to query whether the output device is grid or bitmap. 
            If the output device is grid-based (e.g., a “tty” terminal, or a phone display with only one fixed font), the value will be 1. Otherwise, the value will be 0.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaFeatureName.Update">
            <summary>
            The update media feature is used to query the ability of the output device to modify the apearance of content once it has been rendered.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaFeatureName.OverflowBlock">
            <summary>
            The overflow-block media feature describes the behavior of the device when content overflows the initial containing block in the block axis.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaFeatureName.OverflowInline">
            <summary>
            The overflow-inline media feature describes the behavior of the device when content overflows the initial containing block in the inline axis.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaFeatureName.Color">
            <summary>
            The color media feature describes the number of bits per color component of the output device. If the device is not a color device, the value is zero.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaFeatureName.ColorIndex">
            <summary>
            The color-index media feature describes the number of entries in the color lookup table of the output device. 
            If the device does not use a color lookup table, the value is zero.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaFeatureName.Monochrome">
            <summary>
            The monochrome media feature describes the number of bits per pixel in a monochrome frame buffer. If the device is not a monochrome device, the output device value will be 0.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaFeatureName.ColorGamut">
            <summary>
            The color-gamut media feature describes the approximate range of colors that are supported by the UA and output device. 
            That is, if the UA receives content with colors in the specified space it can cause the output device to render the appropriate color, or something appropriately close enough.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaFeatureType.Discreet">
            <summary>
            Feature is a single value
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaFeatureType.Range">
            <summary>
            Feature is a value range
            </summary>
        </member>
        <member name="T:CssUI.CSS.Media.EMediaOperator">
            <summary>
            Describes the comparison logic for media a feature
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaOrientation.Portrait">
            <summary>
            The orientation media feature is portrait when the value of the height media feature is greater than or equal to the value of the width media feature.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaOrientation.Landscape">
            <summary>
            The orientation media feature is portrait when the value of the width media feature is greater than or equal to the value of the height media feature.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaOverflowBlock.None">
            <summary>
            There is no affordance for overflow in the block axis; any overflowing content is simply not displayed. 
            Examples: billboards
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaOverflowBlock.Scroll">
            <summary>
            Overflowing content in the block axis is exposed by allowing users to scroll to it. 
            Examples: computer screens
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaOverflowBlock.Optional_Paged">
            <summary>
            Overflowing content in the block axis is exposed by allowing users to scroll to it, 
            but page breaks can be manually triggered (such as via break-inside, etc) to cause the following content to display on the following page. 
            Examples: slideshows
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaOverflowBlock.Paged">
            <summary>
            Content is broken up into discrete pages; content that overflows one page in the block axis is displayed on the following page. 
            Examples: printers, ebook readers
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaOverflowInline.None">
            <summary>
            There is no affordance for overflow in the block axis; any overflowing content is simply not displayed. 
            Examples: billboards
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaOverflowInline.Scroll">
            <summary>
            Overflowing content in the block axis is exposed by allowing users to scroll to it. 
            Examples: computer screens
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaQueryModifier.Not">
            <summary>
            Negates the media query result
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaQueryModifier.Only">
            <summary>
            The only keyword has no effect on the media query’s result, but will cause the media query to be parsed by legacy user agents as specifying the unknown media type “only”, and thus be ignored.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaScan.Interlace">
            <summary>
            CRT and some types of plasma TV screens used “interlaced” rendering, 
            where video frames alternated between specifying only the “even” lines on the screen and only the “odd” lines, 
            exploiting various automatic mental image-correction abilities to produce smooth motion. 
            This allowed them to simulate a higher FPS broadcast at half the bandwidth cost.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaScan.Progressive">
            <summary>
            A screen using “progressive” rendering displays each screen fully, and needs no special treatment.
            Most modern screens, and all computer screens, use progressive rendering.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaType.All">
            <summary>
            Matches all devices
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaType.Print">
            <summary>
            Matches printers, and devices intended to reproduce a printed display, such as a web browser showing a document in “Print Preview”.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaType.Screen">
            <summary>
            Matches all devices that aren’t matched by print or speech.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaType.Speech">
            <summary>
            Matches devices that similar devices that “read out” a page.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaUpdate.None">
            <summary>
            Once it has been rendered, the layout can no longer be updated. Example: documents printed on paper.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaUpdate.Slow">
            <summary>
            The layout may change dynamically according to the usual rules of CSS, but the output device is not able to render or display changes quickly enough for them to be perceived as a smooth animation. 
            Example: E-ink screens or severely under-powered devices.
            </summary>
        </member>
        <member name="F:CssUI.CSS.Media.EMediaUpdate.Fast">
            <summary>
            The layout may change dynamically according to the usual rules of CSS, and the output device is not unusually constrained in speed, so regularly-updating things like CSS Animations can be used. Example: computer screens.
            </summary>
        </member>
        <member name="T:CssUI.CSS.Media.MediaFeature">
            <summary>
            </summary>
        </member>
        <member name="M:CssUI.CSS.Media.MediaFeature.#ctor(CssUI.CSS.Media.EMediaFeatureName)">
            <summary>
            Creates a new 'boolean' type media feature
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CssUI.CSS.Media.MediaFeature.#ctor(CssUI.CSS.CssValue[],CssUI.CSS.Media.EMediaOperator[])">
            <summary>
            Creates a new 'range' type media feature
            </summary>
            <param name="name"></param>
            <param name="comparator"></param>
            <param name="value"></param>
        </member>
        <member name="M:CssUI.CSS.Media.MediaQuery.Matches(CssUI.DOM.Document)">
            <summary>
            Returns <c>true</c> if this query matches the given <see cref="T:CssUI.DOM.Document"/>
            </summary>
            <param name="document">The document to test for a match against</param>
        </member>
        <member name="F:CssUI.CSS.EBorderSize.Thin">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EBorderSize.Medium">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EBorderSize.Thick">
            <summary>
            
            </summary>
        </member>
        <member name="T:CssUI.CSS.EBorderStyle">
            <summary>
            Defines all the possible border styles
            </summary>
        </member>
        <member name="F:CssUI.CSS.EBorderStyle.None">
            <summary>
            No border, Color and width are ignored.
            </summary>
        </member>
        <member name="F:CssUI.CSS.EBorderStyle.Hidden">
            <summary>
            Same as 'None' but with different conflict resolution for border-collapsed tables
            </summary>
        </member>
        <member name="F:CssUI.CSS.EBoxPositioning.Static">
            <summary>
            Element is normal, positioned via the normal layout logic
            </summary>
        </member>
        <member name="F:CssUI.CSS.EBoxPositioning.Relative">
            <summary>
            The box's position is calculated according to the normal flow (this is called the position in normal flow). Then the box is offset relative to its normal position. When a box B is relatively positioned, the position of the following box is calculated as though B were not offset. The effect of 'position:relative' on table-row-group, table-header-group, table-footer-group, table-row, table-column-group, table-column, table-cell, and table-caption elements is undefined.
            </summary>
        </member>
        <member name="F:CssUI.CSS.EBoxPositioning.Absolute">
            <summary>
            The box's position (and possibly size) is specified with the 'top', 'right', 'bottom', and 'left' properties. These properties specify offsets with respect to the box's containing block. Absolutely positioned boxes are taken out of the normal flow. This means they have no impact on the layout of later siblings.
            </summary>
        </member>
        <member name="F:CssUI.CSS.EBoxPositioning.Fixed">
            <summary>
            The box's position is calculated according to the 'absolute' model, but in addition, the box is fixed with respect to some reference. IE: the viewport.
            </summary>
        </member>
        <member name="F:CssUI.CSS.EBoxSize.Min_Content">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EBoxSize.Max_Content">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EBoxSize.Fit_Content">
            <summary>
            
            </summary>
        </member>
        <member name="T:CssUI.CSS.EBoxSizingMode">
            <summary>
            Describes all of the CSS box sizing modes used by the 'box-sizing' property
            </summary>
        </member>
        <member name="F:CssUI.CSS.EBoxSizingMode.ContentBox">
            <summary>
            Width/Height describe the size of the content area, not including the padding, border, or margins
            </summary>
        </member>
        <member name="F:CssUI.CSS.EBoxSizingMode.BorderBox">
            <summary>
            Width/Height describe the border area, including the content size, padding, and border size but not the margins
            </summary>
        </member>
        <member name="T:CssUI.CSS.ECssUnit">
            <summary>
            Defines all of the CSS length unit types
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.None">
            <summary>
            Specified no unit length
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.PX">
            <summary>
            1/96th of 1in
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.PT">
            <summary>
            Points (1pt = 1/72th of 1in)
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.PC">
            <summary>
            Picas (1pc = 1/6th of 1in)
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.IN">
            <summary>
            Inches (1in = 2.54cm = 96px)
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.Q">
            <summary>
            Quarter-Millimeters (1Q = 12/40th of 1cm)
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.MM">
            <summary>
            Millimeters (1mm = 1/10th of 1cm)
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.CM">
            <summary>
            Centimeters (1cm = 96px / 2.54)
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.DPI">
            <summary>
            Dots per inch
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.DPCM">
            <summary>
            Dots per centimeter
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.DPPX">
            <summary>
            Dots per 'px' unit
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.S">
            <summary>
            Seconds
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.MS">
            <summary>
            Milliseconds
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.HZ">
            <summary>
            Hertz
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.KHZ">
            <summary>
            KiloHertz
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.EM">
            <summary>
            Relative to font size
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.EX">
            <summary>
            Relative to x-height of the elements font
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.CH">
            <summary>
            Relative to the width of the "0" glyph in the elements font
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.REM">
            <summary>
            Relative to font size of the root element
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.VW">
            <summary>
            Relative to viewports width
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.VH">
            <summary>
            Relative to viewports height
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.VMIN">
            <summary>
            Relative to the minimum of the viewports height and width
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.VMAX">
            <summary>
            Relative to the maximum of the viewports height and width
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.DEG">
            <summary>
            Degrees. There are 360 degrees in a full circle.
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.GRAD">
            <summary>
            Gradians, also known as 'gons' or 'grades'. There are 400 gradians in a full circle
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.RAD">
            <summary>
            Radians. There are 2PI radians in a full circle
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssUnit.TURN">
            <summary>
            Turns. There is 1 turn in a full circle
            </summary>
        </member>
        <member name="F:CssUI.CSS.EDirection.LTR">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EDirection.RTL">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EDisplayMode.NONE">
            <summary>This value causes an element to generate no boxes (i.e., the element has no effect on layout). Descendant elements do not generate any boxes either; this behavior cannot be overridden by setting the ‘display’ property on the descendants.</summary>
        </member>
        <member name="F:CssUI.CSS.EDisplayMode.INLINE">
            <summary>Element takes up only as much space as it needs, inline elements cannot specify an explicit width or height, their dimensions are completely determined by their content.</summary>
        </member>
        <member name="F:CssUI.CSS.EDisplayMode.RUN_IN">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.EDisplayMode.BLOCK">
            <summary>Element takes up an entire line by itself</summary>
        </member>
        <member name="F:CssUI.CSS.EDisplayMode.FLEX">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.EDisplayMode.FLOW">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.EDisplayMode.FLOW_ROOT">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.EDisplayMode.GRID">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.EDisplayMode.TABLE">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.EDisplayMode.TABLE_ROW_GROUP">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.EDisplayMode.TABLE_HEADER_GROUP">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.EDisplayMode.TABLE_FOOTER_GROUP">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.EDisplayMode.TABLE_ROW">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.EDisplayMode.TABLE_CELL">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.EDisplayMode.TABLE_COLUMN_GROUP">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.EDisplayMode.TABLE_COLUMN">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.EDisplayMode.TABLE_CAPTION">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.EDisplayMode.INLINE_BLOCK">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.EDisplayMode.INLINE_TABLE">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.EDisplayMode.INLINE_FLEX">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.EDisplayMode.INLINE_GRID">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.EFontSize.XXSmall">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EFontSize.XSmall">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EFontSize.Small">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EFontSize.Medium">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EFontSize.Large">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EFontSize.XLarge">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EFontSize.XXLarge">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EFontSize.Smaller">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EFontSize.Larger">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.CSS.EFontStyle.Normal">
            <summary>
            selects a face that is classified as a normal face, one that is neither italic or obliqued
            </summary>
        </member>
        <member name="F:CssUI.CSS.EFontStyle.Italic">
            <summary>
            selects a font that is labeled as an italic face, or an oblique face if one is not
            </summary>
        </member>
        <member name="F:CssUI.CSS.EFontStyle.Oblique">
            <summary>
            selects a font that is labeled as an oblique face, or an italic face if one is not
            </summary>
        </member>
        <member name="F:CssUI.CSS.EFontWeight.Lighter">
            <summary>
            Specifies a lighter weight than the inherited value.
            </summary>
        </member>
        <member name="F:CssUI.CSS.EFontWeight.Normal">
            <summary>
            Same as '400'
            </summary>
        </member>
        <member name="F:CssUI.CSS.EFontWeight.Bold">
            <summary>
            Same as '700'
            </summary>
        </member>
        <member name="F:CssUI.CSS.EFontWeight.Bolder">
            <summary>
            Specifies a bolder weight than the inherited value.
            </summary>
        </member>
        <member name="T:CssUI.CSS.EGenericFontFamily">
            <summary>
            Provides values to reference the CSS defined generic font familys
            </summary>
        </member>
        <member name="T:CssUI.CSS.EObjectFit">
            <summary>
            All the different methods for applying size constraints to a UI element
            <para>"The ‘object-fit’ property specifies how the contents of a replaced element should be fitted to the box established by its used height and width."</para>
            </summary>
        </member>
        <member name="F:CssUI.CSS.EObjectFit.Fill">
            <summary>
            The replaced content is sized to fill the element's content box: the object's concrete object size is the element's used width and height.
            </summary>
        </member>
        <member name="F:CssUI.CSS.EObjectFit.Contain">
            <summary>
            The replaced content is sized to maintain its aspect ratio while fitting within the element's content box: its concrete object size is resolved as a contain constraint against the element's used width and height.
            </summary>
        </member>
        <member name="F:CssUI.CSS.EObjectFit.Cover">
            <summary>
            The replaced content is sized to maintain its aspect ratio while filling the element's entire content box: its concrete object size is resolved as a cover constraint against the element's used width and height.
            </summary>
        </member>
        <member name="F:CssUI.CSS.EObjectFit.None">
            <summary>
            The replaced content is not resized to fit inside the element's content box: determine the object's concrete object size using the default sizing algorithm with no specified size, and a default object size equal to the replaced element's used width and height.
            </summary>
        </member>
        <member name="F:CssUI.CSS.EObjectFit.Scale_Down">
            <summary>
            Size the content as if ‘none’ or ‘contain’ were specified, whichever would result in a smaller concrete object size.
            </summary>
        </member>
        <member name="F:CssUI.CSS.EOverflowMode.Visible">
            <summary>
            There is no special handling of overflow, that is, it may be rendered outside the box. The box is not a scroll container.
            </summary>
        </member>
        <member name="F:CssUI.CSS.EOverflowMode.Hidden">
            <summary>
            This value indicates that the box’s content is clipped to its padding box and that no scrolling user interface should be provided by the UA to view the content outside the clipping region. However, the content may still be scrolled programatically, for example using the mechanisms defined in [CSSOM-VIEW], and the box is therefore still a scroll container.
            </summary>
        </member>
        <member name="F:CssUI.CSS.EOverflowMode.Clip">
            <summary>
            Like hidden, this value indicates that the box’s content is clipped to its padding box and that no scrolling user interface should be provided by the UA to view the content outside the clipping region. In addition, unlike overflow: hidden which still allows programmatic scrolling, overflow: clip forbids scrolling entirely, through any mechanism, and therefore the box is not a scroll container.
            </summary>
        </member>
        <member name="F:CssUI.CSS.EOverflowMode.Scroll">
            <summary>
            This value indicates that the content is clipped to the padding box, but can be scrolled into view (and therefore the box is a scroll container). Furthermore, if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed whether or not any of its content is clipped. This avoids any problem with scrollbars appearing and disappearing in a dynamic environment. When this value is specified and the target medium is print, overflowing content may be printed.
            </summary>
        </member>
        <member name="F:CssUI.CSS.EOverflowMode.Auto">
            <summary>
            This value indicates that the box’s content is clipped to the padding box, but can be scrolled into view (and therefore the box is a scroll container). However, if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should only be displayed if there is overflow.
            </summary>
        </member>
        <member name="T:CssUI.CSS.EPosition">
            <summary>
            </summary>
        </member>
        <member name="F:CssUI.CSS.EPosition.Left">
            <summary>
            </summary>
        </member>
        <member name="F:CssUI.CSS.EPosition.Center">
            <summary>
            </summary>
        </member>
        <member name="F:CssUI.CSS.EPosition.Right">
            <summary>
            </summary>
        </member>
        <member name="F:CssUI.CSS.EPosition.Top">
            <summary>
            </summary>
        </member>
        <member name="F:CssUI.CSS.EPosition.Bottom">
            <summary>
            </summary>
        </member>
        <member name="T:CssUI.CSS.EPositioningScheme">
            <summary>
            Defines all of the different positioning 'scheme' types for elements
            </summary>
        </member>
        <member name="F:CssUI.CSS.EPositioningScheme.Normal">
            <summary>Object is positioned according to normal flow logic</summary>
        </member>
        <member name="F:CssUI.CSS.EPositioningScheme.Float">
            <summary>Object is laid out like in normal flow but then moved as far left or right as possible</summary>
        </member>
        <member name="F:CssUI.CSS.EPositioningScheme.Absolute">
            <summary>Object is not positioned according to normal flow, it defines it's own position relative to a block other than its logical containing block</summary>
        </member>
        <member name="F:CssUI.CSS.EScrollBehavior.Auto">
            <summary>
            The scrolling box is scrolled in an instant fashion.
            </summary>
        </member>
        <member name="F:CssUI.CSS.EScrollBehavior.Smooth">
            <summary>
            The scrolling box is scrolled in a smooth fashion using a user-agent-defined timing function over a user-agent-defined period of time.
            </summary>
        </member>
        <member name="T:CssUI.CSS.ETextAlign">
            <summary>
            A block of text is a stack of line boxes. This property specifies how the inline-level boxes within each line box align with respect to the start and end sides of the line box. Alignment is not with respect to the viewport or containing block.
            </summary>
        </member>
        <member name="F:CssUI.CSS.ETextAlign.Start">
            <summary>Inline-level content is aligned to the start edge of the line box.</summary>
        </member>
        <member name="F:CssUI.CSS.ETextAlign.End">
            <summary>Inline-level content is aligned to the end edge of the line box.</summary>
        </member>
        <member name="F:CssUI.CSS.ETextAlign.Left">
            <summary>Inline-level content is aligned to the line left edge of the line box. (In vertical writing modes, this will be either the physical top or bottom, depending on ‘text-orientation’.) [CSS3-WRITING-MODES]</summary>
        </member>
        <member name="F:CssUI.CSS.ETextAlign.Right">
            <summary>Inline-level content is aligned to the line right edge of the line box. (In vertical writing modes, this will be either the physical top or bottom, depending on ‘text-orientation’.) [CSS3-WRITING-MODES]</summary>
        </member>
        <member name="F:CssUI.CSS.ETextAlign.Center">
            <summary>Inline-level content is centered within the line box.</summary>
        </member>
        <member name="F:CssUI.CSS.ETextAlign.Justify">
            <summary>Text is justified according to the method specified by the ‘text-justify’ property, in order to exactly fill the line box.</summary>
        </member>
        <member name="F:CssUI.CSS.ETextAlign.MatchParent">
            <summary>This value behaves the same as ‘inherit’ (computes to its parent's computed value) except that an inherited ‘start’ or ‘end’ keyword is interpreted against its parent's ‘direction’ value and results in a computed value of either ‘left’ or ‘right’.</summary>
        </member>
        <member name="F:CssUI.CSS.ETextAlign.StartEnd">
            <summary>Specifies ‘start’ alignment of the first line and any line immediately after a forced line break; and ‘end’ alignment of any remaining lines.</summary>
        </member>
        <member name="T:CssUI.CSS.EWritingMode">
            <summary>
            
            </summary>
            Docs: https://www.w3.org/TR/css-writing-modes-4/#logical-to-physical
        </member>
        <member name="T:CssUI.CSS.Exceptions.CssErrors">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Exceptions.CssErrors.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Exceptions.CssErrors.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Exceptions.CssErrors.CANT_CONSUME_COMPONENT_VALUE">
            <summary>
              Looks up a localized string similar to Unable to consume component value.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Exceptions.CssErrors.CANT_CONSUME_DECLERATION">
            <summary>
              Looks up a localized string similar to Unable to consume decleration.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Exceptions.CssErrors.CANT_CONSUME_QUALIFIED_RULE">
            <summary>
              Looks up a localized string similar to Unable to consume qualified rule.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Exceptions.CssErrors.EOF_EXPECTED">
            <summary>
              Looks up a localized string similar to Expecting EOF.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Exceptions.CssErrors.EXPECTING_COMBINATOR">
            <summary>
              Looks up a localized string similar to Expecting combinator token.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Exceptions.CssErrors.EXPECTING_COMPARATOR">
            <summary>
              Looks up a localized string similar to Expecting comparator token.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Exceptions.CssErrors.EXPECTING_FUNCTION_NAME_TOKEN">
            <summary>
              Looks up a localized string similar to Expecting function name token.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Exceptions.CssErrors.EXPECTING_IDENT">
            <summary>
              Looks up a localized string similar to Expecting ident token.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Exceptions.CssErrors.EXPECTING_MEDIA_CONDITION_START">
            <summary>
              Looks up a localized string similar to Expecting start of media condition.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Exceptions.CssErrors.EXPECTING_OPENING_PARENTHESES">
            <summary>
              Looks up a localized string similar to Expecting opening parentheses.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Exceptions.CssErrors.EXPECTING_SIMPLE_BLOCK_START">
            <summary>
              Looks up a localized string similar to Expecting start of simple block.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Exceptions.CssErrors.INVALID_COMBINATOR">
            <summary>
              Looks up a localized string similar to Unrecognized combinator keyword &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Exceptions.CssErrors.INVALID_MEDIA_TYPE">
            <summary>
              Looks up a localized string similar to Unrecognized media type: &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Exceptions.CssErrors.INVALID_MULTIPLE_COMBINATORS_ON_MEDIARULE">
            <summary>
              Looks up a localized string similar to It is invalid to mix &apos;and&apos; and &apos;or&apos; and &apos;not&apos; at the same level of a media query. please enclose the condition in parentheses.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Exceptions.CssErrors.STREAM_IS_NULL">
            <summary>
              Looks up a localized string similar to Stream is NULL.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Exceptions.CssErrors.UNEXPECTED_EOF">
            <summary>
              Looks up a localized string similar to Unexpected EOF.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Exceptions.CssErrors.UNEXPECTED_TOKEN">
            <summary>
              Looks up a localized string similar to Unexpected token.
            </summary>
        </member>
        <member name="P:CssUI.CSS.Exceptions.CssErrors.UNHANDLED_TOKEN_FOR_CSS_VALUE">
            <summary>
              Looks up a localized string similar to Unhandled token type cannot be interpreted as css-value: \&quot;{0}\&quot;.
            </summary>
        </member>
        <member name="T:CssUI.CSS.Parser.CssInput">
            <summary>
            Provides byte-stream filtering, correcting any faulty bytes so the <see cref="!:CssParser"/> may interpret it.
            <para>Docs: https://www.w3.org/TR/css-syntax-3/#input-preprocessing </para>
            </summary>
        </member>
        <member name="M:CssUI.CSS.Parser.CssInput.PreProcess(System.ReadOnlySpan{System.Char})">
            <summary>
            Performs pre-processing on input text to remove invalid characters according to the CSS documentation
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="T:CssUI.CSS.Parser.CssTokenizer">
            <summary>
            Handles parsing CSS text
            </summary>
        </member>
        <member name="M:CssUI.CSS.Parser.CssTokenizer.Consume_Escaped(CssUI.DataConsumer{System.Char})">
            <summary>
            Consumes an escaped character from the current reading position
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.Parser.CssTokenizer.Consume_String_Token(CssUI.DataConsumer{System.Char},System.Nullable{System.Char})">
            <summary>
            Consumes and returns a string token
            </summary>
            <param name="EndChar">Character which indicates the end of a string</param>
            <returns>StringToken or BadStringToken</returns>
        </member>
        <member name="M:CssUI.CSS.Parser.CssTokenizer.Consume_Numeric_Token(CssUI.DataConsumer{System.Char})">
            <summary>
            Consumes and returns a numeric token
            </summary>
        </member>
        <member name="M:CssUI.CSS.Parser.CssTokenizer.Consume_Token(CssUI.DataConsumer{System.Char})">
            <summary>
            Consumes and returns the next Token
            </summary>
            <returns></returns>
        </member>
        <member name="T:CssUI.CSS.Parser.ECssTokenType">
            <summary>
            Defines all of the different possible CSS token types
            </summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.None">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Ident">
            <summary>Represents a collection of 2 or more characters NOT within quotations</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.FunctionName">
            <summary>Represents an identifier followed immediately by an opening-parenthesis "FUNCTION_NAME("</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.At_Keyword">
            <summary>Represents an identifier prefixed with an at-sign(@)</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Hash">
            <summary>Represents an identifier prefixed with a hashtag(#)</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.String">
            <summary>Represents a collection of characters contained within quotations ("")</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Bad_String">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Url">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Bad_Url">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Delim">
            <summary>Represents any single character not assigned to another token</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Number">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Percentage">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Dimension">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Unicode_Range">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Include_Match">
            <summary>Represents '~='</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Dash_Match">
            <summary>Represents '|='</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Prefix_Match">
            <summary>Represents '^='</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Suffix_Match">
            <summary>Represents '$='</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Substring_Match">
            <summary>Represents '*='</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Column">
            <summary>Represents '|'</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Whitespace">
            <summary>Represents any of ' ', '\n', '\r', '\t', '\f'</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:CssUI.CSS.Parser.ECssTokenType.CDO" -->
        <member name="F:CssUI.CSS.Parser.ECssTokenType.CDC">
            <summary>Represents '-->'</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Colon">
            <summary>Represents ':'</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Semicolon">
            <summary>Represents ';'</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Comma">
            <summary>Represents ','</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.SqBracket_Open">
            <summary>Represents '['</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.SqBracket_Close">
            <summary>Represents ']'</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Parenth_Open">
            <summary>Represents '('</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Parenth_Close">
            <summary>Represents ')'</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Bracket_Open">
            <summary>Represents '{'</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Bracket_Close">
            <summary>Represents '}'</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.EOF">
            <summary>Represents an EOF token</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.NamespacePrefix">
            <summary>Represents a namespace prefix for a selector</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.QualifiedName">
            <summary>Represents a qualified name for a selector</summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ECssTokenType.Combinator">
            <summary>Represents a selector combinator</summary>
        </member>
        <member name="T:CssUI.CSS.Parser.CssToken">
            <summary>
            Represents a token within an <see cref="T:CssUI.CSS.Parser.CssTokenizer"/> instance.
            </summary>
        </member>
        <member name="M:CssUI.CSS.Parser.CssToken.Encode">
            <summary>
            Encodes the token back to it's CSS representation
            </summary>
            <returns>Css string</returns>
        </member>
        <member name="F:CssUI.CSS.Parser.DimensionToken.Number">
            <summary>
            Holds the numeric representation of this token value
            </summary>
        </member>
        <member name="F:CssUI.CSS.Parser.DimensionToken.DataType">
            <summary>
            Specifies the type of value stored in the <see cref="F:CssUI.CSS.Parser.DimensionToken.Number"/> field. (int or float)
            </summary>
        </member>
        <member name="F:CssUI.CSS.Parser.DimensionToken.Unit">
            <summary>
            Holds the dimension's unit type string
            </summary>
        </member>
        <member name="F:CssUI.CSS.Parser.NumberToken.Number">
            <summary>
            Holds the numeric representation of this token value
            </summary>
        </member>
        <member name="F:CssUI.CSS.Parser.NumberToken.DataType">
            <summary>
            Specifies the type of value stored in the <see cref="F:CssUI.CSS.Parser.NumberToken.Number"/> field. (int or float)
            </summary>
        </member>
        <member name="F:CssUI.CSS.Parser.PercentageToken.Number">
            <summary>
            Holds the numeric representation of this token value
            </summary>
        </member>
        <member name="M:CssUI.CSS.Parser.PercentageToken.Encode">
            <summary>
            Encodes the token back to it's CSS representation
            </summary>
            <returns>Css string</returns>
        </member>
        <member name="F:CssUI.CSS.Parser.UnicodeRangeToken.Start">
            <summary>
            Starting point of the range
            </summary>
        </member>
        <member name="F:CssUI.CSS.Parser.UnicodeRangeToken.End">
            <summary>
            Ending point of the range
            </summary>
        </member>
        <member name="T:CssUI.CSS.Parser.ValuedTokenBase">
            <summary>
            Implements a token type that holds a value comprised on zero or more characters
            </summary>
        </member>
        <member name="F:CssUI.CSS.Parser.ValuedTokenBase.Value">
            <summary>
            Holds the string representation of this tokens value
            </summary>
        </member>
        <member name="F:CssUI.CSS.Parser.WhitespaceToken.Space">
            <summary>
            Token instance containing a single space
            </summary>
        </member>
        <member name="F:CssUI.CSS.Parser.WhitespaceToken.Tab">
            <summary>
            Token instance containing a single tab character
            </summary>
        </member>
        <member name="F:CssUI.CSS.Parser.WhitespaceToken.LF">
            <summary>
            Token instance containing a single line-feed
            </summary>
        </member>
        <member name="F:CssUI.CSS.Parser.WhitespaceToken.LFLF">
            <summary>
            Token instance containing two consecutive line-feed characters
            </summary>
        </member>
        <member name="T:CssUI.CSS.CssComponent">
            <summary>
            Represents a value that the Css Parser algorithm spits out
            </summary>
        </member>
        <member name="T:CssUI.CSS.CssProperty">
            <summary>
            Represents a CSS property and manages all of its value states: Assigned, Specified, and Computed values.
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssProperty._assigned">
            <summary>
            Backing value for <see cref="P:CssUI.CSS.CssProperty.Assigned"/>
            <para> Docs: https://www.w3.org/TR/css-cascade-3/#cascaded </para>
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssProperty._specified">
            <summary>
            Backing value for <see cref="P:CssUI.CSS.CssProperty.Specified"/>
            <para> Docs: https://www.w3.org/TR/css-cascade-3/#specified </para>
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssProperty._computed">
            <summary>
            Backing value for <see cref="P:CssUI.CSS.CssProperty.Computed"/>
            <para> Docs: https://www.w3.org/TR/css-cascade-3/#computed </para>
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssProperty._used">
            <summary>
            Backing value for <see cref="P:CssUI.CSS.CssProperty.Used"/>
            <para> Docs: https://www.w3.org/TR/css-cascade-3/#used </para>
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssProperty._actual">
            <summary>
            Backing value for <see cref="P:CssUI.CSS.CssProperty.Actual"/>
            <para> Docs: https://www.w3.org/TR/css-cascade-3/#actual </para>
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssProperty.oldAssigned">
            <summary>
            Tracks the previous value for <see cref="P:CssUI.CSS.CssProperty.Assigned"/> so we can detect when changes occur
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssProperty.oldSpecified">
            <summary>
            Tracks the previous value for <see cref="P:CssUI.CSS.CssProperty.Specified"/> so we can detect when changes occur
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssProperty.oldComputed">
            <summary>
            Tracks the previous value for <see cref="P:CssUI.CSS.CssProperty.Computed"/> so we can detect when changes occur
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssProperty.oldUsed">
            <summary>
            Tracks the previous value for <see cref="P:CssUI.CSS.CssProperty.Used"/> so we can detect when changes occur
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssProperty.oldActual">
            <summary>
            Tracks the previous value for <see cref="P:CssUI.CSS.CssProperty.Actual"/> so we can detect when changes occur
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssProperty.Assigned">
            <summary>
            Raw value assigned to the property from the cascade process.
            CSS standards call this the Cascaded value
            This is the value that the stylesheet gave us(could be no value at all)
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssProperty.Specified">
            <summary>
            The value we interpreted from <see cref="P:CssUI.CSS.CssProperty.Assigned"/>
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssProperty.Computed">
            <summary>
            The value as used for inheritence.
            The Specified value after being resolved to an absolute value, if possible
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssProperty.Used">
            <summary>
            The final calculated value after applying a property specific resolution method to it
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssProperty.Actual">
            <summary>
            The value that will be used by the element
            <para>This is the <see cref="P:CssUI.CSS.CssProperty.Used"/> value with user-agent/system(platform) restrictions placed on it</para>
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssProperty.HasValue">
            <summary>
            Returns TRUE if the <see cref="P:CssUI.CSS.CssProperty.Assigned"/> value is non-null
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssProperty.IsNone">
            <summary>
            Returns TRUE if the <see cref="P:CssUI.CSS.CssProperty.Assigned"/> value is <see cref="F:CssUI.CSS.ECssValueTypes.NONE"/>
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssProperty.IsAuto">
            <summary>
            Return TRUE if the assigned value is set to <see cref="F:CssUI.CSS.CssValue.Auto"/>
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssProperty.IsInherited">
            <summary>
            Returns TRUE if the assigned value is <see cref="F:CssUI.CSS.CssValue.Inherit"/>
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssProperty.IsDependent">
            <summary>
            Returns TRUE if the assigned value has the <see cref="F:CssUI.CSS.Internal.ECssValueFlags.Depends"/> flag
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssProperty.IsDependentOrAuto">
            <summary>
            Return TRUE if the assigned value is set to <see cref="F:CssUI.CSS.CssValue.Auto"/>
            Returns TRUE if the assigned value has the <see cref="F:CssUI.CSS.Internal.ECssValueFlags.Depends"/> flag
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssProperty.IsPercentageOrAuto">
            <summary>
            Return TRUE if the assigned value is set to <see cref="F:CssUI.CSS.CssValue.Auto"/>
            Returns TRUE if the assigned value type is a percentage
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssProperty.Flags">
            <summary>
            All flags which are present for all currently computed <see cref="T:CssUI.CSS.CssValue"/>'s
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssProperty.Revert(System.Boolean)">
            <summary>
            Causes this property to revert back to the computed stage such that it must re-interpret its Used and Actual values.
            </summary>
            <param name="suppress">Suppresses any change event from firing once the Used value gets re-interpreted</param>
        </member>
        <member name="M:CssUI.CSS.CssProperty.Reinterpret_Specified(System.Boolean)">
            <summary>
            Reinterprets our <see cref="P:CssUI.CSS.CssProperty.Specified"/> value
            </summary>
            <param name="Auto_Interpret_Next">Determines whether the next value stage will also be re-interpreted if the current stage changes due to this re-interpretation</param>
        </member>
        <member name="M:CssUI.CSS.CssProperty.Reinterpret_Computed(System.Boolean)">
            <param name="Auto_Interpret_Next">Determines whether the next value stage will also be re-interpreted if the current stage changes due to this re-interpretation</param>
        </member>
        <member name="M:CssUI.CSS.CssProperty.Reinterpret_Used(System.Boolean)">
            <param name="Auto_Interpret_Next">Determines whether the next value stage will also be re-interpreted if the current stage changes due to this re-interpretation</param>
        </member>
        <member name="M:CssUI.CSS.CssProperty.Handle_Unit_Change(CssUI.CSS.ECssUnit)">
            <summary>
            Allows external code to notify this property that a certain unit type has changed scale and if we have a value which uses that unit-type we need to fire our Changed event because our Computed value will be different
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssProperty.Cascade(CssUI.CSS.ICssProperty)">
            <summary>
            Overwrites the values of this instance with any values from another which aren't <see cref="F:CssUI.CSS.CssValue.Null"/>
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CSS.CssProperty.CascadeAsync(CssUI.CSS.ICssProperty)">
            <summary>
            Overwrites the values of this instance with any values from another which aren't <see cref="F:CssUI.CSS.CssValue.Null"/>
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CSS.CssProperty.Overwrite(CssUI.CSS.ICssProperty)">
            <summary>
            Overwrites the assigned value of this instance with values from another if they are different
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CSS.CssProperty.OverwriteAsync(CssUI.CSS.ICssProperty)">
            <summary>
            Overwrites the assigned value of this instance with values from another if they are different
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CSS.CssProperty.Update(System.Boolean)">
            <summary>
            Resets all values back to the Declared and then recomputes them later
            </summary>
            <param name="ComputeNow">If <c>True</c> the final values will be computed now, In most cases leave this false</param>
        </member>
        <member name="M:CssUI.CSS.CssProperty.UpdateDependent(System.Boolean)">
            <summary>
            If the Declared value is one that depends on another value for its final value then
            Resets all values back to the Declared and then recomputes them later
            </summary>
            <param name="ComputeNow">If <c>True</c> the final values will be computed now, In most cases leave this false</param>
        </member>
        <member name="M:CssUI.CSS.CssProperty.UpdateDependentOrAuto(System.Boolean)">
            <summary>
            If the Declared value is one that depends on another value for its final value OR is <see cref="F:CssUI.CSS.CssValue.Auto"/> then
            Resets all values back to the Declared and then recomputes them later
            </summary>
            <param name="ComputeNow">If <c>True</c> the final values will be computed now, In most cases leave this false</param>
        </member>
        <member name="M:CssUI.CSS.CssProperty.UpdatePercentageOrAuto(System.Boolean)">
            <summary>
            If the Declared value is a percentage OR is <see cref="F:CssUI.CSS.CssValue.Auto"/> then
            Resets all values back to the Declared and then recomputes them later
            </summary>
            <param name="ComputeNow">If <c>True</c> the final values will be computed now, In most cases leave this false</param>
        </member>
        <member name="M:CssUI.CSS.CssProperty.Set(CssUI.CSS.CssValue)">
            <summary>
            Sets the <see cref="P:CssUI.CSS.CssProperty.Assigned"/> value for this property
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:CssUI.CSS.CssProperty.Set_Computed_Value(CssUI.CSS.CssValue)">
            <summary>
            Allows us to overwrite the computed value in special circumstances such as with Box calculation.
            </summary>
            <param name="Used"></param>
        </member>
        <member name="F:CssUI.CSS.ECssPropertyID.Opacity">
            <summary>
            Docs: https://www.w3.org/TR/css-color-3/#opacity
            </summary>
        </member>
        <member name="F:CssUI.CSS.ECssPropertyID.ObjectPosition">
            <summary>
            Docs: https://www.w3.org/TR/css3-images/#object-position
            </summary>
        </member>
        <member name="T:CssUI.CSS.ICssProperty">
            <summary>
            Interface for css properties held within an styling rule block
            </summary>
        </member>
        <member name="E:CssUI.CSS.ICssProperty.onValueChange">
            <summary>
            Callback for when any value stage of this property changes
            </summary>
        </member>
        <member name="P:CssUI.CSS.ICssProperty.Selector">
            <summary>
            Tracks which styling rule block this property came from
            </summary>
        </member>
        <member name="P:CssUI.CSS.ICssProperty.Source">
            <summary>
            The property we belong to
            </summary>
            <returns></returns>
        </member>
        <member name="P:CssUI.CSS.ICssProperty.Definition">
            <summary>
            Returns the definition for this property
            </summary>
            <returns></returns>
        </member>
        <member name="P:CssUI.CSS.ICssProperty.CssName">
            <summary>
            The properties identifier token in stylesheets.
            <para>EG; "box-sizing", "margin-left", "margin-top", etc </para>
            </summary>
        </member>
        <member name="P:CssUI.CSS.ICssProperty.SourcePtr">
            <summary>
            Tracks which styling rule block this property came from
            </summary>
        </member>
        <member name="P:CssUI.CSS.ICssProperty.HasValue">
            <summary>
            Returns whether or not the property has a set value that should take affect during cascading.
            </summary>
        </member>
        <member name="P:CssUI.CSS.ICssProperty.IsAuto">
            <summary>
            Return TRUE if the assigned value is set to <see cref="F:CssUI.CSS.CssValue.Auto"/>
            </summary>
        </member>
        <member name="P:CssUI.CSS.ICssProperty.IsInherited">
            <summary>
            Returns TRUE if the assigned value is <see cref="F:CssUI.CSS.CssValue.Inherit"/>
            </summary>
        </member>
        <member name="P:CssUI.CSS.ICssProperty.IsInheritable">
            <summary>
            Returns TRUE if this property is inheritable according to its definition
            </summary>
        </member>
        <member name="M:CssUI.CSS.ICssProperty.Find_Inherited_Value">
            <summary>
            Returns the inherited value from the properties owners parent element
            </summary>
        </member>
        <member name="M:CssUI.CSS.ICssProperty.Handle_Unit_Change(CssUI.CSS.ECssUnit)">
            <summary>
            Allows external code to notify this property that a certain unit type has changed scale and if we have a value which uses that unit-type we need to fire our Changed event because our Computed value will be different
            </summary>
        </member>
        <member name="M:CssUI.CSS.ICssProperty.Cascade(CssUI.CSS.ICssProperty)">
            <summary>
            Overwrites the values of this instance with any values from another which aren't <see cref="F:CssUI.CSS.CssValue.Null"/>
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CSS.ICssProperty.CascadeAsync(CssUI.CSS.ICssProperty)">
            <summary>
            Asynchronously overwrites the values of this instance with any values from another which aren't <see cref="F:CssUI.CSS.CssValue.Null"/>
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CSS.ICssProperty.Overwrite(CssUI.CSS.ICssProperty)">
            <summary>
            Overwrites the assigned value of this instance with values from another if they are different
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CSS.ICssProperty.OverwriteAsync(CssUI.CSS.ICssProperty)">
            <summary>
            Asynchronously overwrites the assigned value of this instance with values from another if they are different
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CSS.ICssProperty.Update(System.Boolean)">
            <summary>
            Resets all values back to the Assigned and then recomputes them later
            </summary>
            <param name="ComputeNow">If <c>True</c> the final values will be computed now, In most cases leave this false</param>
        </member>
        <member name="M:CssUI.CSS.ICssProperty.UpdateDependent(System.Boolean)">
            <summary>
            If the Assigned value is one that depends on another value for its final value then
            Resets all values back to the Assigned and then recomputes them later
            </summary>
            <param name="ComputeNow">If <c>True</c> the final values will be computed now, In most cases leave this false</param>
        </member>
        <member name="M:CssUI.CSS.ICssProperty.UpdateDependentOrAuto(System.Boolean)">
            <summary>
            If the Assigned value is one that depends on another value for its final value OR is <see cref="F:CssUI.CSS.CssValue.Auto"/> then
            Resets all values back to the Assigned and then recomputes them later
            </summary>
            <param name="ComputeNow">If <c>True</c> the final values will be computed now, In most cases leave this false</param>
        </member>
        <member name="M:CssUI.CSS.ICssProperty.UpdatePercentageOrAuto(System.Boolean)">
            <summary>
            If the Assigned value is a percentage OR is <see cref="F:CssUI.CSS.CssValue.Auto"/> then
            Resets all values back to the Assigned and then recomputes them later
            </summary>
            <param name="ComputeNow">If <c>True</c> the final values will be computed now, In most cases leave this false</param>
        </member>
        <member name="T:CssUI.CSS.ICssPropertyCollection">
            <summary>
            Interface for styling property types which consist of multiple components
            EG: Position, and Color property types
            </summary>
        </member>
        <member name="P:CssUI.CSS.ICssPropertyCollection.IsDependent">
            <summary>
            Returns TRUE if any values are dependent on otherss
            </summary>
        </member>
        <member name="P:CssUI.CSS.ICssPropertyCollection.IsAuto">
            <summary>
            Return TRUE if any values are set to <see cref="F:CssUI.CSS.CssValue.Auto"/>
            </summary>
        </member>
        <member name="T:CssUI.CSS.CssComputedStyle">
            <summary>
            Holds an instance of all the defined css propertys that a css element can have
            Each different styling state of an element gets it's own instance of this class which 
            are then all cascaded together to determine the current value when the elements active state changes.
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssComputedStyle.ReadOnly">
            <summary>
            If True then none of this instances property values can be altered by external code.
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssComputedStyle.SetProperties">
            <summary>
            List of Field-Names for all our properties which have a set value
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssComputedStyle.SEQ">
            <summary>
            Sequence tracker for <see cref="T:CssUI.CSS.CssComputedStyle"/>s
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssComputedStyle.ID">
            <summary>
            Id number for this <see cref="T:CssUI.CSS.CssComputedStyle"/>, unique among all <see cref="T:CssUI.CSS.CssComputedStyle"/>s
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssComputedStyle.Name">
            <summary>
            Name of the rule block, for identification
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssComputedStyle.Selector">
            <summary>
            The CSS selector for this rule block
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssComputedStyle.BoxSizing">
            <summary>
            Current BoxSizing mode for this element.
            (Defaults to <see cref="F:CssUI.CSS.EBoxSizingMode.BorderBox"/>)
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssComputedStyle.Min_Width">
            <summary>
            The minimum Width of an elements content-area
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssComputedStyle.Min_Height">
            <summary>
            The minimum Height of an elements content-area
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssComputedStyle.Max_Width">
            <summary>
            The maximum Width of an elements content-area
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssComputedStyle.Max_Height">
            <summary>
            The maximum Height of an elements content-area
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssComputedStyle.X">
            <summary>
            Points to <see cref="P:CssUI.CSS.CssComputedStyle.Left"/>
            Distance between the elements Left outter edge and the matching edge of its containing block.
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssComputedStyle.Y">
            <summary>
            Points to <see cref="P:CssUI.CSS.CssComputedStyle.Top"/>
            Distance between the elements Top outter edge and the matching edge of its containing block.
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssComputedStyle.Top">
            <summary>
            Distance between the elements Top outter edge and the matching edge of its containing block.
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssComputedStyle.Right">
            <summary>
            Distance between the elements Right outter edge and the matching edge of its containing block.
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssComputedStyle.Bottom">
            <summary>
            Distance between the elements Bottom outter edge and the matching edge of its containing block.
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssComputedStyle.Left">
            <summary>
            Distance between the elements Left outter edge and the matching edge of its containing block.
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssComputedStyle.Padding_Top">
            <summary>
            Distance between this elements Top border and its content (in pixels)
            <para>Clears an area around the content. The padding can be thought of as extending the content area in that the controls background occupys it</para>
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssComputedStyle.Padding_Right">
            <summary>
            Distance between this elements Right border and its content (in pixels)
            <para>Clears an area around the content. The padding can be thought of as extending the content area in that the controls background occupys it</para>
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssComputedStyle.Padding_Bottom">
            <summary>
            Distance between this elements Bottom border and its content (in pixels)
            <para>Clears an area around the content. The padding can be thought of as extending the content area in that the controls background occupys it</para>
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssComputedStyle.Padding_Left">
            <summary>
            Distance between this elements Left border and its content (in pixels)
            <para>Clears an area around the content. The padding can be thought of as extending the content area in that the controls background occupys it</para>
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssComputedStyle.Margin_Top">
            <summary>
            Distance between the elements Top edge and Top border (in pixels)
            <para>Clears an area outside the border. The margin is transparent</para>
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssComputedStyle.Margin_Right">
            <summary>
            Distance between the elements Right edge and Right border (in pixels)
            <para>Clears an area outside the border. The margin is transparent</para>
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssComputedStyle.Margin_Bottom">
            <summary>
            Distance between the elements Bottom edge and Bottom border (in pixels)
            <para>Clears an area outside the border. The margin is transparent</para>
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssComputedStyle.Margin_Left">
            <summary>
            Distance between the elements Left edge and Left border (in pixels)
            <para>Clears an area outside the border. The margin is transparent</para>
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssComputedStyle.LineHeight">
            <summary>
            'line-height' specifies the minimal height of line boxes within the element.
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssComputedStyle.#ctor(System.String,CssUI.DOM.Nodes.ICssElement,System.Boolean)">
            <summary>
            Creates a new set of element styling properties
            </summary>
            <param name="ReadOnly">If TRUE then none of this instances property values may be set directly.</param>
        </member>
        <member name="M:CssUI.CSS.CssComputedStyle.#ctor(CssUI.CSS.CssSelector,CssUI.DOM.Nodes.ICssElement,System.Boolean)">
            <summary>
            Creates a new set of element styling properties
            </summary>
            <param name="ReadOnly">If TRUE then none of this instances property values may be set directly.</param>
        </member>
        <member name="M:CssUI.CSS.CssComputedStyle.#ctor(CssUI.CSS.CssSelector,CssUI.DOM.Nodes.ICssElement,System.Boolean,System.Boolean)">
            <summary>
            Creates a new set of element styling properties
            </summary>
            <param name="ReadOnly">If TRUE then none of this instances property values may be set directly.</param>
            <param name="Unset">If TRUE then property values will all be set to <see cref="F:CssUI.CSS.CssValue.Null"/>.</param>
        </member>
        <member name="M:CssUI.CSS.CssComputedStyle.#ctor(System.String,CssUI.CSS.CssSelector,CssUI.DOM.Nodes.ICssElement,System.Boolean,System.Boolean,CssUI.CSS.Internal.EPropertySetOrigin)">
            <summary>
            Creates a new set of element styling properties
            </summary>
            <param name="ReadOnly">If TRUE then none of this instances property values may be set directly.</param>
            <param name="Unset">If TRUE then property values will all be set to <see cref="F:CssUI.CSS.CssValue.Null"/>.</param>
        </member>
        <member name="E:CssUI.CSS.CssComputedStyle.Property_Changed">
            <summary>
            A property which affects the elements block changed
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssComputedStyle.Property_onChanged(CssUI.CSS.Enums.EPropertyStage,CssUI.CSS.ICssProperty)">
            <summary>
            The value of pre-cascade property has changed
            </summary>
            <param name="Stage"></param>
            <param name="Property"></param>
        </member>
        <member name="M:CssUI.CSS.CssComputedStyle.Get(CssUI.CSS.ICssProperty)">
            <summary>
            Finds the property within this style set that matches the given property
            </summary>
            <param name="Property"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.CssComputedStyle.GetAll">
            <summary>
            Returns all of the properties
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssComputedStyle.GetAll(System.Func{CssUI.CSS.ICssProperty,System.Boolean})">
            <summary>
            Returns all of the properties matching a given predicate
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssComputedStyle.Get_Set_Properties">
            <summary>
            Returns all of the Css properties that have a value assigned to them
            </summary>
            <returns></returns>
        </member>
        <member name="T:CssUI.CSS.StyleProperties">
            <summary>
            Styling values for an element
            Holds resolved values for every possible defined styling property an element can have
            Manages cascading and accessing all of the different properties for each of an elements style states
            </summary>
        </member>
        <member name="F:CssUI.CSS.StyleProperties.Cascaded">
            <summary>
            The cascaded property values for this element
            DO NOT MODIFY THE PROPERTIES OF THIS INSTANCE, TREAT THEM AS READONLY!!!
            </summary>
        </member>
        <member name="P:CssUI.CSS.StyleProperties.ImplicitRules">
            <summary>
            Default values set/preferred by the element or CSS itself
            </summary>
        </member>
        <member name="P:CssUI.CSS.StyleProperties.UserRules">
            <summary>
            Values set by code external to the element's class definition.
            EG: A user stylesheet, or whatever UI element instantiates and uses the element.
            </summary>
        </member>
        <member name="P:CssUI.CSS.StyleProperties.HoverRules">
            <summary>
            Values that take precedence when the mouse is overtop the element
            </summary>
        </member>
        <member name="P:CssUI.CSS.StyleProperties.FocusRules">
            <summary>
            Values that take precedence when the element is currently targeted by the keyboard or activated by the mouse
            </summary>
        </member>
        <member name="F:CssUI.CSS.StyleProperties.CssRules">
            <summary>
            Contains all <see cref="T:CssUI.CSS.CssComputedStyle"/>s that apply to the element
            </summary>
        </member>
        <member name="P:CssUI.CSS.StyleProperties.PositioningScheme">
            <summary>
            Returns the positioning 'scheme', which defines whether the element follows the normal flow logic.
            </summary>
        </member>
        <member name="E:CssUI.CSS.StyleProperties.onProperty_Change">
            <summary>
            The assigned value of a property has changed
            </summary>
        </member>
        <member name="M:CssUI.CSS.StyleProperties.NewPropertySet(System.String,System.String,CssUI.DOM.Nodes.ICssElement,System.Boolean,CssUI.CSS.Internal.EPropertySetOrigin)">
            <summary>
            Creates a new property set under the specified name and binds to it to detect when a value changes.
            </summary>
            <param name="Name"></param>
            <param name="Selector"></param>
            <param name="Owner"></param>
            <param name="Unset"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.StyleProperties.Add_PropertySet(CssUI.CSS.CssComputedStyle)">
            <summary>
            Adds a new <see cref="T:CssUI.CSS.CssComputedStyle"/> to the list of styling rules and binds to it to detect when a value changes.
            </summary>
            <param name="Selector"></param>
            <param name="Owner"></param>
            <param name="Unset"></param>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CSS.StyleProperties.Handle_Declared_Property_Change(CssUI.CSS.Enums.EPropertyStage,CssUI.CSS.ICssProperty,CssUI.CSS.Enums.EPropertyDirtFlags,System.Diagnostics.StackTrace)">
            <summary>
            A state-specific property changed, we need to resolve this single property
            </summary>
        </member>
        <member name="M:CssUI.CSS.StyleProperties.Handle_Cascaded_Property_Change(CssUI.CSS.Enums.EPropertyStage,CssUI.CSS.ICssProperty,CssUI.CSS.Enums.EPropertyDirtFlags,System.Diagnostics.StackTrace)">
            <summary>
            A post-cascade property has changed assigned values
            </summary>
            <param name="Property"></param>
            <param name="Flags"></param>
            <param name="Stack"></param>
        </member>
        <member name="M:CssUI.CSS.StyleProperties.Handle_Inherited_Property_Change_In_Hierarchy(CssUI.DOM.Element,CssUI.CSS.ICssProperty)">
            <summary>
            An inheritable property of an element within our hierarchy has changed.
            </summary>
            <param name="Sender">The element whose property changed</param>
            <param name="Property"></param>
        </member>
        <member name="M:CssUI.CSS.StyleProperties.Cascade">
            <summary>
            Resolves all Css properties to their specified values by cascading
            </summary>
        </member>
        <member name="M:CssUI.CSS.StyleProperties.CascadeProperty(CssUI.CSS.ICssProperty)">
            <summary>
            
            </summary>
            <param name="Property"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.StyleProperties.Handle_Parent_Block_Change">
            <summary>
            Our elements block changed so we need to clear any calculated values for Css Properties related to the block
            </summary>
        </member>
        <member name="M:CssUI.CSS.StyleProperties.Handle_Layout_Position_Change">
            <summary>
            Our box's layout position has changed
            </summary>
        </member>
        <member name="M:CssUI.CSS.StyleProperties.Notify_Unit_Scale_Change(CssUI.CSS.ECssUnit)">
            <summary>
            Notifys all dimension-properties which use the specified unit that its scale has changed and they need to update
            </summary>
            <param name="Unit"></param>
        </member>
        <member name="M:CssUI.CSS.StyleProperties.Force_Dependent_Block_Property_Updates">
            <summary>
            Forces any properties which depend on a block value (ours or our parents) to update and recompute
            </summary>
        </member>
        <member name="F:CssUI.CSS.StyleProperties.oldFontSize">
            <summary>
            Helpes us track changes to the font size of this element, to detect changes to font relative units
            </summary>
        </member>
        <member name="M:CssUI.CSS.ColorProperty.Set(CssUI.Rendering.Color)">
            <summary>
            Sets the <see cref="!:Assigned"/> value for this property to the given color
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:CssUI.CSS.EnumProperty`1">
            <summary>
            Represents a styling property which holds an enum value
            </summary>
            <typeparam name="Ty">The enum type this property stores</typeparam>
        </member>
        <member name="T:CssUI.CSS.IntProperty">
            <summary>
            Represents a styling property which always resolves to an integer
            </summary>
        </member>
        <member name="T:CssUI.CSS.LengthProperty">
            <summary>
            Represents a styling property which always resolves to an integer
            </summary>
        </member>
        <member name="M:CssUI.CSS.LengthProperty.Set(System.Nullable{System.Int32})">
            <summary>
            Sets the <see cref="!:Assigned"/> value for this property to the given length (in pixels)
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:CssUI.CSS.LengthProperty.Set(System.Nullable{System.Double})">
            <summary>
            Sets the <see cref="!:Assigned"/> value for this property to the given length (in pixels)
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:CssUI.CSS.MultiStringProperty.Actual">
            <inheritdoc/>
        </member>
        <member name="T:CssUI.CSS.NullableIntProperty">
            <summary>
            Represents a styling property which always resolves to an integer
            </summary>
        </member>
        <member name="M:CssUI.CSS.NullableIntProperty.Set(System.Nullable{System.Int32})">
            <summary>
            Sets the <see cref="!:Assigned"/> value for this property
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:CssUI.CSS.NullableLengthProperty">
            <summary>
            Represents a CSS length that can be assigned a null value
            </summary>
        </member>
        <member name="M:CssUI.CSS.NullableLengthProperty.Set(System.Nullable{System.Int32})">
            <summary>
            Sets the <see cref="!:Assigned"/> value for this property to the given length (in pixels)
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:CssUI.CSS.NumberProperty">
            <summary>
            Represents a styling property which always resolves to an floating point number
            </summary>
        </member>
        <member name="M:CssUI.CSS.PositionProperty.Set(CssUI.CSS.CssValue,CssUI.CSS.CssValue)">
            <summary>
            Sets the <see cref="!:Assigned"/> value for this property to the given color
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:CssUI.CSS.StringProperty">
            <summary>
            Represents a styling property which always resolves to a string
            </summary>
        </member>
        <member name="T:CssUI.CSS.TransformListProperty">
            <summary>
            Represents a property which is a collection of multiple transform function properties
            </summary>
        </member>
        <member name="F:CssUI.CSS.TransformListProperty.Transforms">
            <summary>
            Maps a list of transform function names to the list of their arguments
            </summary>
        </member>
        <member name="P:CssUI.CSS.TransformListProperty.Owner">
            <summary>
            The UI element which contains this property
            </summary>
        </member>
        <member name="P:CssUI.CSS.TransformListProperty.CssName">
            <summary>
            The propertys identifier token in stylesheets.
            </summary>
        </member>
        <member name="E:CssUI.CSS.TransformListProperty.onValueChange">
            <summary>
            Callback for when any value stage of this property changes
            </summary>
        </member>
        <member name="P:CssUI.CSS.TransformListProperty.SourcePtr">
            <summary>
            Tracks which styling rule block this property came from
            </summary>
        </member>
        <member name="P:CssUI.CSS.TransformListProperty.Selector">
            <summary>
            Tracks which styling rule block this property came from
            </summary>
        </member>
        <member name="F:CssUI.CSS.TransformListProperty.Locked">
            <summary>
            If true then this propertys values cannot be set externally
            </summary>
        </member>
        <member name="P:CssUI.CSS.TransformListProperty.IsAuto">
            <summary>
            Return TRUE if the assigned value is set to <see cref="F:CssUI.CSS.CssValue.Auto"/>
            </summary>
        </member>
        <member name="P:CssUI.CSS.TransformListProperty.IsInheritable">
            <summary>
            Returns TRUE if this property is inheritable according to its definition
            </summary>
        </member>
        <member name="M:CssUI.CSS.TransformListProperty.Cascade(CssUI.CSS.ICssProperty)">
            <summary>
            Overwrites the values of this instance with any values from another which aren't <see cref="F:CssUI.CSS.CssValue.Null"/>
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CSS.TransformListProperty.CascadeAsync(CssUI.CSS.ICssProperty)">
            <summary>
            Overwrites the values of this instance with any values from another which aren't <see cref="F:CssUI.CSS.CssValue.Null"/>
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CSS.TransformListProperty.Overwrite(CssUI.CSS.ICssProperty)">
            <summary>
            Overwrites the assigned value of this instance with values from another if they are different
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CSS.TransformListProperty.OverwriteAsync(CssUI.CSS.ICssProperty)">
            <summary>
            Overwrites the assigned value of this instance with values from another if they are different
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CSS.TransformListProperty.Update(System.Boolean)">
            <summary>
            Resets all values back to the Assigned and then recomputes them later
            </summary>
            <param name="ComputeNow">If <c>True</c> the final values will be computed now, In most cases leave this false</param>
        </member>
        <member name="M:CssUI.CSS.TransformListProperty.UpdateDependent(System.Boolean)">
            <summary>
            If the Assigned value is one that depends on another value for its final value then
            Resets all values back to the Assigned and then recomputes them later
            </summary>
            <param name="ComputeNow">If <c>True</c> the final values will be computed now, In most cases leave this false</param>
        </member>
        <member name="M:CssUI.CSS.TransformListProperty.UpdateDependentOrAuto(System.Boolean)">
            <summary>
            If the Assigned value is one that depends on another value for its final value OR is <see cref="F:CssUI.CSS.CssValue.Auto"/> then
            Resets all values back to the Assigned and then recomputes them later
            </summary>
            <param name="ComputeNow">If <c>True</c> the final values will be computed now, In most cases leave this false</param>
        </member>
        <member name="M:CssUI.CSS.TransformListProperty.UpdatePercentageOrAuto(System.Boolean)">
            <summary>
            If the Assigned value is a percentage OR is <see cref="F:CssUI.CSS.CssValue.Auto"/> then
            Resets all values back to the Assigned and then recomputes them later
            </summary>
            <param name="ComputeNow">If <c>True</c> the final values will be computed now, In most cases leave this false</param>
        </member>
        <member name="M:CssUI.CSS.TransformListProperty.Handle_Unit_Change(CssUI.CSS.ECssUnit)">
            <summary>
            Allows external code to notify this property that a certain unit type has changed scale and if we have a value which uses that unit-type we need to fire our Changed event because our Computed value will be different
            </summary>
        </member>
        <member name="T:CssUI.CSS.CssPropertyOptions">
            <summary>
            Stores data for a Css property about what kinds of values it can be set to.
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssPropertyOptions.AllowAuto">
            <summary>
            Whether or not the property can be set to <see cref="F:CssUI.CSS.CssValue.Auto"/>
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssPropertyOptions.AllowInherited">
            <summary>
            Whether or not the property can be set to <see cref="F:CssUI.CSS.CssValue.Inherit"/>
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssPropertyOptions.AllowPercentage">
            <summary>
            Whether or not the property can be set to percentages
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssPropertyOptions.UnsetAll">
            <summary>
            Whether or not both Implicit and Explicit values start out as <see cref="F:CssUI.CSS.CssValue.Null"/>
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssPropertyOptions.IsValid(CssUI.CSS.CssValue)">
            <summary>
            Returns whether the specified value is valid according to the currently set options
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.CssPropertyOptions.CheckAndThrow(CssUI.CSS.ICssProperty,CssUI.Internal.CssValueList)">
            <summary>
            Throws an exception if any of the given values are invalid according to the currently set options
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.CssPropertyOptions.CheckAndThrow(CssUI.CSS.ICssProperty,CssUI.CSS.CssValue)">
            <summary>
            Throws an exception if the value is invalid according to the currently set options
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:CssUI.CSS.CSSGroupingRule">
            <summary>
            A CSS rule that holds other rules within it, things like @media and @page rules inherit from this
            </summary>
        </member>
        <member name="T:CssUI.CSS.CSSRule">
            <summary>
            Defines a generic rule for CSS, this could be anything from an @media rule to the familiar Style rule.
            These values held by this class and all its subtypes are UNINTERPRETED and essentially just hold and organize the rules as text
            </summary>
        </member>
        <member name="T:CssUI.CSS.CssSelector">
            <summary>
            Represents a CSS selector that can perform matching,
            consisting of one or more whole (complex) selectors parsed from a single definition.
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssSelector.IsFromStylesheet">
            <summary>
            Whether this selector is coming from a stylesheet we loaded or from some internal styling rule defined directly in code.
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssSelector.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            </summary>
            <param name="SelectorString"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.CssSelector.Get_Specificity(CssUI.DOM.Element)">
            <summary>
            Returns the highest selector specificity
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.CssSelector.Get_Specificitys(CssUI.DOM.Element)">
            <summary>
            Returns a list of all selector specificitys that match the given element (<paramref name="E"/>)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.CssSelector.Match(CssUI.DOM.Element,CssUI.DOM.Nodes.Node[])">
            <summary>
            Performs matching against a single element
            </summary>
            <param name="E"></param>
            <param name="scopeElements"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.CssSelector.Match_Against_Tree(System.Collections.Generic.IEnumerable{CssUI.DOM.Nodes.Node},CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node[])">
            <summary>
            Performs matching against a single element
            </summary>
            <param name="E"></param>
            <param name="scopeElements"></param>
            <param name="scopingRoot">Element to limit the search to, only this element and its descendents will be matched against</param>
            <returns>All matched elements</returns>
        </member>
        <member name="T:CssUI.CSS.Selectors.ComplexSelector">
            <summary>
            A Complex selector holds a set of one or more relative selectors.
            It is essentially the encapsulation of all content that defines an individual "selector"
            </summary>
        </member>
        <member name="M:CssUI.CSS.Selectors.ComplexSelector.Match(CssUI.DOM.Element,CssUI.DOM.Nodes.Node[])">
            <summary>
            Performs matching on an element.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.Selectors.ComplexSelector.Get_Specificity">
            <summary>
            Returns the selectors specificity as defined in the CSS 2.1 specification documentation
            </summary>
        </member>
        <member name="T:CssUI.CSS.Selectors.CompoundSelector">
            <summary>
            A Compound selector is one that consists of multiple simple selectors
            In addition a Compound selector can contain at most ONE type-selector and if it does, that must be the first selector within it.
            </summary>
        </member>
        <member name="M:CssUI.CSS.Selectors.CompoundSelector.Match(System.Collections.Generic.IEnumerable{CssUI.DOM.Element},System.Collections.Generic.LinkedList{CssUI.DOM.Element}@,CssUI.CSS.Internal.ESelectorMatchingOrder,CssUI.DOM.Nodes.Node[])">
            <summary>
            Performs simple selector matching against all elements in <paramref name="MatchList"/>.
            Modifies the list, removing any non-matching elements
            </summary>
            <param name="MatchList">List of elements to match against</param>
            <param name="Order">The matching direction</param>
            <returns>True if any elements were a match</returns>
        </member>
        <member name="T:CssUI.CSS.Selectors.RelativeSelector">
            <summary>
            A relative selector consists of a combinator and a compound selector
            </summary>
        </member>
        <member name="F:CssUI.CSS.Selectors.RelativeSelector.Combinator">
            <summary>
            The combinator following the selector sequence.
            </summary>
        </member>
        <member name="M:CssUI.CSS.Selectors.RelativeSelector.#ctor(CssUI.CSS.Internal.ESelectorCombinator,CssUI.CSS.Selectors.CompoundSelector)">
            <summary>
            Creates a new selector sequence
            </summary>
            <param name="Chain"></param>
            <param name="Combinator">The combinator that comes AFTER the selector sequence.</param>
        </member>
        <member name="M:CssUI.CSS.Selectors.RelativeSelector.Match(System.Collections.Generic.IEnumerable{CssUI.DOM.Element},System.Collections.Generic.LinkedList{CssUI.DOM.Element}@,CssUI.DOM.Nodes.Node[])">
            <summary>
            Takes in a list of elements and performs matching on them, modifying and outputting a new list of elements to be matched by the next Complex selector in the chain.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.Selectors.RelativeSelector.Apply_Combinator(CssUI.DOM.Element,CssUI.CSS.Internal.ESelectorMatchingOrder)">
            <summary>
            Applies the Complex selectors combinator to a single element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:CssUI.CSS.Selectors.SimpleSelector">
            <summary>
            A simple selector is either a type selector, universal selector, attribute selector, class selector, ID selector, or pseudo-class.
            </summary>
        </member>
        <member name="M:CssUI.CSS.Selectors.SimpleSelector.Matches(CssUI.DOM.Element,CssUI.DOM.Nodes.Node[])">
            <summary>
            Returns whether the selector matches a specified element or index
            </summary>
        </member>
        <member name="F:CssUI.CSS.Selectors.ECssAttributeOperator.None">
            <summary></summary>
        </member>
        <member name="F:CssUI.CSS.Selectors.ECssAttributeOperator.Isset">
            <summary>Matches if the attribute has ANY set value</summary>
        </member>
        <member name="F:CssUI.CSS.Selectors.ECssAttributeOperator.Equals">
            <summary>Matches if the attribute is exactly equal to our value</summary>
        </member>
        <member name="F:CssUI.CSS.Selectors.ECssAttributeOperator.PrefixedWith">
            <summary>Matches values equal to our own or which are prefixed with "{ourValue}-" </summary>
        </member>
        <member name="F:CssUI.CSS.Selectors.ECssAttributeOperator.Includes">
            <summary>Matches if our value is present in the attribute value when viewed as a space-seperated list of values</summary>
        </member>
        <member name="F:CssUI.CSS.Selectors.ECssAttributeOperator.StartsWith">
            <summary>Substring starts with</summary>
        </member>
        <member name="F:CssUI.CSS.Selectors.ECssAttributeOperator.EndsWith">
            <summary>Substring ends with</summary>
        </member>
        <member name="F:CssUI.CSS.Selectors.ECssAttributeOperator.Contains">
            <summary>Substring contains</summary>
        </member>
        <member name="T:CssUI.CSS.Selectors.ESimpleSelectorType">
            <summary>
            Defines all the simple selector types 
            </summary>
        </member>
        <member name="F:CssUI.CSS.Selectors.ESimpleSelectorType.UniversalSelector">
            <summary>The universal selector matches any element in any namespace</summary>
        </member>
        <member name="F:CssUI.CSS.Selectors.ESimpleSelectorType.TypeSelector">
            <summary>A type selector is the name of an element type written using the syntax of CSS qualified names SEE: https://www.w3.org/TR/css3-namespace/#css-qnames </summary>
        </member>
        <member name="F:CssUI.CSS.Selectors.ESimpleSelectorType.AttributeSelector">
            <summary>Matches an element attribute value</summary>
        </member>
        <member name="F:CssUI.CSS.Selectors.ESimpleSelectorType.ClassSelector">
            <summary>Matches an element styling class</summary>
        </member>
        <member name="F:CssUI.CSS.Selectors.ESimpleSelectorType.IDSelector">
            <summary>Matches the unique ID of an element</summary>
        </member>
        <member name="F:CssUI.CSS.Selectors.ESimpleSelectorType.PseudoClassSelector">
            <summary>Matches pseudo classes, which are element states based on information not contained within the UI system</summary>
        </member>
        <member name="F:CssUI.CSS.Selectors.ESimpleSelectorType.PseudoElementSelector">
            <summary>Matches pseudo element, which are elements that are not represented by a seperate element class instance, and are instead a sub-part of an element. EG: the "::first-line" or "::first-letter"</summary>
        </member>
        <member name="T:CssUI.CSS.Selectors.SelectorParser">
            <summary>
            Parses low-level <see cref="T:CssUI.CSS.CssComponent"/>s into higher-level <see cref="!:CSSSelectorComponent"/> objects
            </summary>
        </member>
        <member name="M:CssUI.CSS.Selectors.SelectorParser.Consume_Single_Selector(CssUI.DataConsumer{CssUI.CSS.Parser.CssToken})">
            <summary>
            Consumes a list of complex selectors
            </summary>
        </member>
        <member name="M:CssUI.CSS.Selectors.SelectorParser.Consume_Selector_List(CssUI.DataConsumer{CssUI.CSS.Parser.CssToken})">
            <summary>
            Consumes a list of complex selectors
            </summary>
        </member>
        <member name="M:CssUI.CSS.Selectors.SelectorParser.Consume_Complex_Selector(CssUI.DataConsumer{CssUI.CSS.Parser.CssToken})">
            <summary>
            Consumes a sequence of <see cref="T:CssUI.CSS.Selectors.RelativeSelector"/> consisting of compound selectors and their combinators (if available)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.Selectors.SelectorParser.Consume_Relative_Selector(CssUI.DataConsumer{CssUI.CSS.Parser.CssToken})">
            <summary>
            Consumes a single <see cref="T:CssUI.CSS.Selectors.CompoundSelector"/> and it's <see cref="T:CssUI.CSS.Internal.ESelectorCombinator"/> (if available)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.Selectors.SelectorParser.Consume_Compound_Selector(CssUI.DataConsumer{CssUI.CSS.Parser.CssToken})">
            <summary>
            Consumes a single <see cref="T:CssUI.CSS.Selectors.CompoundSelector"/>, which is a comprised of multiple <see cref="T:CssUI.CSS.Selectors.SimpleSelector"/>s
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CssUI.CSS.Selectors.SelectorParser.Consume_Attribute_Selector(CssUI.DataConsumer{CssUI.CSS.Parser.CssToken})" -->
        <!-- Badly formed XML comment ignored for member "M:CssUI.CSS.Selectors.SelectorParser.Consume_Pseudo_Class_Selector(CssUI.DataConsumer{CssUI.CSS.Parser.CssToken})" -->
        <!-- Badly formed XML comment ignored for member "M:CssUI.CSS.Selectors.SelectorParser.Consume_Pseudo_Element_Selector(CssUI.DataConsumer{CssUI.CSS.Parser.CssToken})" -->
        <member name="T:CssUI.CSS.Selectors.QualifiedNameToken">
            <summary>
            A qualified name token will fundamentally always contain the namespace directly before it
            </summary>
        </member>
        <member name="M:CssUI.CSS.Selectors.AttributeSelector.#ctor(CssUI.CSS.Selectors.NamespacePrefixToken,System.String)">
            <summary>
            </summary>
            <param name="Attrib">The attribute name for this selector</param>
            <param name="Operator">String token that defines the method of comparison</param>
            <param name="Value"></param>
        </member>
        <member name="M:CssUI.CSS.Selectors.AttributeSelector.Matches(CssUI.DOM.Element,CssUI.DOM.Nodes.Node[])">
            <summary>
            Returns whether the selector matches a specified element or index
            </summary>
        </member>
        <member name="M:CssUI.CSS.Selectors.ClassSelector.Matches(CssUI.DOM.Element,CssUI.DOM.Nodes.Node[])">
            <summary>
            Returns whether the selector matches a specified element or index
            </summary>
        </member>
        <member name="M:CssUI.CSS.Selectors.IDSelector.Matches(CssUI.DOM.Element,CssUI.DOM.Nodes.Node[])">
            <summary>
            Returns whether the selector matches a specified element or index
            </summary>
        </member>
        <member name="F:CssUI.CSS.Selectors.PseudoClassSelector.Name">
            <summary>
            The pseudo class name
            </summary>
        </member>
        <member name="M:CssUI.CSS.Selectors.PseudoClassSelector.Matches(CssUI.DOM.Element,CssUI.DOM.Nodes.Node[])">
            <summary>
            Returns whether the selector matches a specified element or index
            </summary>
        </member>
        <member name="M:CssUI.CSS.Selectors.PseudoClassSelectorFunction.Matches(CssUI.DOM.Element,CssUI.DOM.Nodes.Node[])">
            <summary>
            Returns whether the selector matches a specified element or index
            </summary>
        </member>
        <member name="M:CssUI.CSS.Selectors.PseudoClassSelectorAnBFunction.Matches(CssUI.DOM.Element,CssUI.DOM.Nodes.Node[])">
            <summary>
            Returns whether the selector matches a specified element or index
            </summary>
        </member>
        <member name="M:CssUI.CSS.Selectors.PseudoClassSelectorNegationFunction.Matches(CssUI.DOM.Element,CssUI.DOM.Nodes.Node[])">
            <summary>
            Returns whether the selector matches a specified element or index
            </summary>
        </member>
        <member name="M:CssUI.CSS.Selectors.PseudoClassFunctions.Drop(CssUI.DOM.Element,System.Collections.Generic.List{CssUI.CSS.Parser.CssToken})">
            <summary>
            Performs matching against the 'drop' function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.Selectors.PseudoElementSelector.Matches(CssUI.DOM.Element,CssUI.DOM.Nodes.Node[])">
            <summary>
            Returns whether the selector matches a specified element or index
            </summary>
        </member>
        <member name="M:CssUI.CSS.Selectors.CssPseudoElementSelectorFunction.Matches(CssUI.DOM.Element,CssUI.DOM.Nodes.Node[])">
            <summary>
            Returns whether the selector matches a specified element or index
            </summary>
        </member>
        <member name="T:CssUI.CSS.Selectors.TypeSelector">
            <summary>
            A type-selector matches an elements <see cref="P:CssUI.DOM.Element.tagName"/>
            </summary>
        </member>
        <member name="F:CssUI.CSS.Selectors.TypeSelector.Namespace">
            <summary>
            The namespace to restrict this type matcher too.
            <para>'*' if it matches ANY namespace</para>
            <para></para>
            </summary>
        </member>
        <member name="M:CssUI.CSS.Selectors.TypeSelector.Matches(CssUI.DOM.Element,CssUI.DOM.Nodes.Node[])">
            <summary>
            Returns whether the selector matches a specified element or index
            </summary>
        </member>
        <member name="T:CssUI.CSS.Selectors.UniversalSelector">
            <summary>
            A universal selector matches any element in any namespace
            <para>Universal-selectors MUST be seperate from the Type-selector class because they are ignores when calculating the selectors specificity!</para>
            </summary>
        </member>
        <member name="M:CssUI.CSS.Selectors.UniversalSelector.Matches(CssUI.DOM.Element,CssUI.DOM.Nodes.Node[])">
            <summary>
            Returns whether the selector matches a specified element or index
            </summary>
        </member>
        <member name="F:CssUI.CSS.ENumericTokenType.Number">
            <summary>
            Decimal number
            </summary>
        </member>
        <member name="F:CssUI.CSS.ENumericTokenType.Integer">
            <summary>
            Integer whole number
            </summary>
        </member>
        <member name="T:CssUI.CSS.BracketCloseToken">
            <summary>
            Represents '}'
            </summary>
        </member>
        <member name="T:CssUI.CSS.BracketOpenToken">
            <summary>
            '{'
            </summary>
        </member>
        <member name="F:CssUI.CSS.cssVertex.X">
            <summary>
            X axis position of the vertex
            </summary>
        </member>
        <member name="F:CssUI.CSS.cssVertex.Y">
            <summary>
            Y axis position of the vertex
            </summary>
        </member>
        <member name="F:CssUI.CSS.cssVertex.Color">
            <summary>
            Color of the vertex
            </summary>
        </member>
        <member name="T:CssUI.CSS.CssValue">
            <summary>
            Represents a CSS Value
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssValue.Auto">
            <summary>
            Value depends on other properties
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssValue.Null">
            <summary>
            (Non-Cascadeable)
            Treat as nothing. Eg; The stylesheet didnt specify anything for this property.
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssValue.Unset">
            <summary>
            (Non-Cascadeable)
            Intentionally unsets a property, forcing it to resolve to either its inherited or initial value.
            DOCS: https://www.w3.org/TR/css-cascade-3/#inherit-initial
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssValue.Initial">
            <summary>
            Value should resolve to it's definitions default value
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssValue.Inherit">
            <summary>
            Value is inherited from the parent element
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssValue.None">
            <summary>
            (Cascades)
            Value is purposly nothing, No value is assigned, some properties use this state to be ignored.
            As in they wont have an effect on the elements styling or block
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssValue.Zero">
            <summary> 
            integer 0
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssValue.Percent_50">
            <summary> 
            50%
            </summary>
        </member>
        <member name="F:CssUI.CSS.CssValue.Percent_100">
            <summary> 
            100%
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssValue.IsAuto">
            <summary>
            Returns whether the value is 'Auto'
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssValue.IsDefinite">
            <summary>
            Returns whether the value is a definite Number or Integer
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssValue.IsCollection">
            <summary>
            Returns whether the value is a collection of sub-values
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssValue.IsNull">
            <summary>
            Returns whether the value type is <see cref="F:CssUI.CSS.ECssValueTypes.NULL"/>
            </summary>
        </member>
        <member name="P:CssUI.CSS.CssValue.HasValue">
            <summary>
            Returns whether there is actually a set value
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.#ctor(CssUI.CSS.CssValue)">
            <summary>
            Clones an already existing <see cref="T:CssUI.CSS.CssValue"/>
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Clone">
            <summary> Returns a new <see cref="T:CssUI.CSS.CssValue"/> instance which is a copy of this one. </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.From``1(``0)">
            <summary>Create an keyword value</summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.From(System.Int32)">
            <summary>Create an absolute integer value</summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.From(System.Nullable{System.Int32},CssUI.CSS.CssValue)">
            <summary>Create an absolute integer value if not null, or return the given default value</summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.From(System.Double)">
            <summary>Create an absolute number value</summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.From(System.Nullable{System.Double},CssUI.CSS.CssValue)">
            <summary>Create an absolute number value if not null, or return the given default value</summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.From_Percent(System.Double)">
            <summary>Create a percentage value</summary>
            <param name="value">Floating-point value in the range [0 - 100]</param>
        </member>
        <member name="M:CssUI.CSS.CssValue.From(System.Double,CssUI.CSS.ECssUnit)">
            <summary>Create an absolute length value</summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.From(System.Nullable{System.Double},CssUI.CSS.ECssUnit,CssUI.CSS.CssValue)">
            <summary>Create an absolute length value if not null, or return the given default value</summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.From(CssUI.Rendering.ReadOnlyColor)">
            <summary>Create an RGBA color value</summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.From_String(System.String)">
            <summary>Create a string value</summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.From_CSS(System.String)">
            <summary>Create a css-value by parsing the given string as CSS markup</summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.From(CssUI.CSS.CssValue[])">
            <summary>Create a css-value with a specific type and one or more values</summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.ResolveDimension(CssUI.CSS.CssValue.StyleUnitResolverDelegate)">
            <summary>
            Gets the final resulting value for a dimension type by multiplying our current numeric value by the unit scale
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve(CssUI.CssUnitResolver)">
            <summary>
            Resolves the value to a decimal and returns it if possible, returns NULL otherwise
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve(CssUI.CSS.CssValue.StyleUnitResolverDelegate)">
            <summary>
            Resolves the value to a decimal and returns it if possible, returns NULL otherwise
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve_Or_Default(CssUI.CSS.CssValue.StyleUnitResolverDelegate,System.Double)">
            <summary>
            Resolves the value to a decimal and returns it if possible, returns defaultValue otherwise
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve(CssUI.CSS.CssValue.StyleUnitResolverDelegate,System.Func{CssUI.CSS.CssValue,System.Boolean})">
            <summary>
            If this instance matches the given Predicate then resolves the value to a decimal and returns it, returns NULL otherwise
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve_Or_Default(CssUI.CSS.CssValue.StyleUnitResolverDelegate,System.Double,System.Func{CssUI.CSS.CssValue,System.Boolean})">
            <summary>
            If this instance matches the given Predicate then resolves the value to a decimal and returns it, returns defaultValue otherwise
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve(CssUI.CSS.CssValue.StyleUnitResolverDelegate,System.Double)">
            <summary>
            Resolves the value to a decimal and returns it if possible, returns NULL otherwise
            <para>Additionally takes an multiplier as input for resolving the value to a decimal if it's a percentage type</para>
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve_Or_Default(CssUI.CSS.CssValue.StyleUnitResolverDelegate,System.Double,System.Double)">
            <summary>
            Resolves the value to a decimal and returns it if possible, returns defaultValue otherwise
            <para>Additionally takes an multiplier as input for resolving the value to a decimal if it's a percentage type</para>
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve(CssUI.CSS.CssValue.StyleUnitResolverDelegate,System.Func{System.Double,System.Double})">
            <summary>
            Resolves the value to a decimal and returns it if possible, returns NULL otherwise
            <para>Additionally takes an action as input for resolving the value to a decimal if it's a percentage type</para>
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve_Or_Default(CssUI.CSS.CssValue.StyleUnitResolverDelegate,System.Func{System.Double,System.Double},System.Double)">
            <summary>
            Resolves the value to a decimal and returns it if possible, returns defaultValue otherwise
            <para>Additionally takes an action as input for resolving the value to a decimal if it's a percentage type</para>
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve_Or_Default(CssUI.CSS.CssValue.StyleUnitResolverDelegate,System.Int32,System.Func{CssUI.CSS.CssValue,System.Boolean})">
            <summary>
            If this instance matches the given Predicate then resolves the value to an integer and returns it, returns defaultValue otherwise
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve_Or_Default(CssUI.CSS.CssValue.StyleUnitResolverDelegate,System.Double,System.Int32)">
            <summary>
            Resolves the value to an integer and returns it if possible, returns defaultValue otherwise
            <para>Additionally takes an multiplier as input for resolving the value to a decimal if it's a percentage type</para>
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve_Or_Default(CssUI.CSS.CssValue.StyleUnitResolverDelegate,System.Func{System.Double,System.Double},System.Int32)">
            <summary>
            Resolves the value to an integer and returns it if possible, returns defaultValue otherwise
            <para>Additionally takes an action as input for resolving the value to a decimal if it's a percentage type</para>
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve">
            <summary>
            Resolves the value to a decimal and returns it if possible, returns NULL otherwise
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve(System.Double)">
            <summary>
            Resolves the value to a decimal and returns it if possible, returns NULL otherwise
            <para>Additionally takes an multiplier as input for resolving the value to a decimal if it's a percentage type</para>
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve_Or_Default(System.Double)">
            <summary>
            Resolves the value to a decimal and returns it if possible, returns defaultValue otherwise
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve(System.Func{CssUI.CSS.CssValue,System.Boolean})">
            <summary>
            If this instance matches the given Predicate then resolves the value to a decimal and returns it, returns NULL otherwise
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve_Or_Default(System.Double,System.Func{CssUI.CSS.CssValue,System.Boolean})">
            <summary>
            If this instance matches the given Predicate then resolves the value to a decimal and returns it, returns defaultValue otherwise
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve_Or_Default(System.Double,System.Double)">
            <summary>
            Resolves the value to a decimal and returns it if possible, returns defaultValue otherwise
            <para>Additionally takes an multiplier as input for resolving the value to a decimal if it's a percentage type</para>
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve(System.Func{System.Double,System.Double})">
            <summary>
            Resolves the value to a decimal and returns it if possible, returns NULL otherwise
            <para>Additionally takes an action as input for resolving the value to a decimal if it's a percentage type</para>
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve_Or_Default(System.Func{System.Double,System.Double},System.Double)">
            <summary>
            Resolves the value to a decimal and returns it if possible, returns defaultValue otherwise
            <para>Additionally takes an action as input for resolving the value to a decimal if it's a percentage type</para>
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve_Or_Default(System.Int32,System.Func{CssUI.CSS.CssValue,System.Boolean})">
            <summary>
            If this instance matches the given Predicate then resolves the value to an integer and returns it, returns defaultValue otherwise
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve_Or_Default(System.Double,System.Int32)">
            <summary>
            Resolves the value to an integer and returns it if possible, returns defaultValue otherwise
            <para>Additionally takes an multiplier as input for resolving the value to a decimal if it's a percentage type</para>
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Resolve_Or_Default(System.Func{System.Double,System.Double},System.Int32)">
            <summary>
            Resolves the value to an integer and returns it if possible, returns defaultValue otherwise
            <para>Additionally takes an action as input for resolving the value to a decimal if it's a percentage type</para>
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.AsEnum``1">
            <summary>
            Returns the value as the specified enum type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CssUI.CSS.CssValue.AsPosition">
            <summary>
            Returns the value as a Color4 if possible, or NULL if not possible.
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.AsColor">
            <summary>
            Returns the value as a Color4 if possible, or NULL if not possible.
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.AsCollection">
            <summary>
            Returns the value as a Color4 if possible, or NULL if not possible.
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.AsInteger">
            <summary>
            Returns the value as the preferred Integer type
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.AsIntegerN">
            <summary>
            Returns the value as the preferred (Nullable) Integer type
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.AsDecimal">
            <summary>
            Returns the value as the preferred Decimal type
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.CssValue.AsDecimalN">
            <summary>
            Returns the value as the preferred (Nullable) Decimal type
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.CssValue.AsString">
            <summary>
            Returns the value as a string
            </summary>
        </member>
        <member name="M:CssUI.CSS.CssValue.Derive_SpecifiedValue(CssUI.CSS.ICssProperty)">
            <summary>
            Derives a 'Specified' value from this one according to the CSS standards
            </summary>
            <param name="Property"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.CssValue.Derive_ComputedValue(CssUI.CSS.ICssProperty)">
            <summary>
            Derives a 'Computed' value from this one according to the CSS standards
            </summary>
            <param name="Property"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.CssValue.Derive_UsedValue(CssUI.CSS.ICssProperty)">
            <summary>
            Derives a 'Used' value from this one according to the CSS standards
            </summary>
            <param name="Computed"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.CSS.CssValue.Derive_ActualValue(CssUI.CSS.ICssProperty)">
            <summary>
            Derives an 'Actual' value from this one according to the CSS standards
            </summary>
            <param name="Used"></param>
            <returns></returns>
        </member>
        <member name="F:CssUI.CSS.Vertex2i.X">
            <summary>
            X axis position of the vertex
            </summary>
        </member>
        <member name="F:CssUI.CSS.Vertex2i.Y">
            <summary>
            Y axis position of the vertex
            </summary>
        </member>
        <member name="F:CssUI.CSS.Vertex2i.Color">
            <summary>
            Color of the vertex
            </summary>
        </member>
        <member name="M:CssUI.AsyncCountdownEvent.AddCount">
            <summary>
            Increments the total count by one
            </summary>
        </member>
        <member name="T:CssUI.StringPtr">
            <summary>
            Faster string
            </summary>
        </member>
        <member name="T:CssUI.UniqueID">
            <summary>
            Represents a globally unique identifier.
            </summary>
        </member>
        <member name="P:CssUI.UniqueID.Value">
            <summary>
            Gets or sets the entire 64bit value of this ID.
            </summary>
        </member>
        <member name="M:CssUI.UniqueID.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CssUI.UniqueID"/> class.
            </summary>
        </member>
        <member name="M:CssUI.UniqueID.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:CssUI.UniqueID"/> class.
            </summary>
            <param name="uid">The ID value.</param>
        </member>
        <member name="M:CssUI.UniqueID.op_Implicit(CssUI.UniqueID)~System.UInt64">
            <summary>
            Performs an implicit conversion from <see cref="T:CssUI.UniqueID"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="uid">The id.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:CssUI.UniqueID.op_Implicit(System.UInt64)~CssUI.UniqueID">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:CssUI.UniqueID"/>.
            </summary>
            <param name="uid">The id.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:CssUI.UniqueID.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CssUI.UniqueID.Equals(CssUI.UniqueID)">
            <summary>
            Determines whether the specified <see cref="T:CssUI.UniqueID"/> is equal to this instance.
            </summary>
            <param name="uid">The <see cref="T:CssUI.UniqueID"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:CssUI.UniqueID"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CssUI.UniqueID.op_Equality(CssUI.UniqueID,CssUI.UniqueID)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The left side ID.</param>
            <param name="b">The right side ID.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:CssUI.UniqueID.op_Inequality(CssUI.UniqueID,CssUI.UniqueID)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The left side ID.</param>
            <param name="b">The right side ID.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:CssUI.UniqueID.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CssUI.UniqueID.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CssUI.Matrix4.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Applys axis scaling to the matrix
            </summary>
            <param name="sx">Scaling factor for X axis</param>
            <param name="sy">Scaling factor for Y axis</param>
            <param name="sz">Scaling factor for Z axis</param>
        </member>
        <member name="M:CssUI.Matrix4.get_index(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the data index into a square matrix of a row <paramref name="i"/> and column <paramref name="j"/> without allowing <paramref name="i"/> or <paramref name="j"/> to overflow the square matricies bounds.
            </summary>
            <param name="size">Matrix Width</param>
            <param name="i">Row</param>
            <param name="j">Column</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.Matrix4.get_submatrix(System.Double[],System.Int32,System.Int32,System.Int32,System.Double[]@)">
            <summary>
            Compiles a submatrix from the given square matrix by deleting row i and column j
            </summary>
            <param name="data">Matrix Values</param>
            <param name="size">Matrix Width</param>
            <param name="i"></param>
            <param name="j"></param>
            <param name="subData"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.Matrix4.calc_determinant(System.Double[],System.Int32)">
            <summary>
            Calculates the determinant of a square matrix
            </summary>
            <param name="data">Matrix data</param>
            <param name="size">Matrix size</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.Matrix4.calc_cofactor(System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the cofactor of a given item <paramref name="i"/>, <paramref name="j"/> within a square matrix
            </summary>
            <param name="data">Matrix Values</param>
            <param name="size">Matrix Width</param>
            <param name="i">Row</param>
            <param name="j">Column</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.Matrix4.calc_cofactor_expansion(System.Double[],System.Int32)">
            <summary>
            Calculates the cofactor expansion of a given matrix, which is the expanded determinant.
            </summary>
            <param name="data">Matrix Values</param>
            <param name="size">Matrix Width</param>
            <param name="i">Row</param>
            <param name="j">Column</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.Matrix4.calc_adjugant_matrix(System.Double[],System.Int32)">
            <summary>
            Calculates the adjugant matrix of a given square matrix of size denoted by <paramref name="size"/>
            </summary>
            <param name="data">Matrix Values</param>
            <param name="size">Matrix Width</param>
        </member>
        <member name="M:CssUI.Matrix4.calc_inverse_matrix(System.Double[],System.Int32)">
            <summary>
            Calculates the adjugant matrix of a given square matrix of size denoted by <paramref name="size"/>
            </summary>
            <param name="data">Matrix Values</param>
            <param name="size">Matrix Width</param>
        </member>
        <member name="M:CssUI.Matrix4.Invert">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.Matrix4.InvertSimple">
            <summary>
            Simple but not robust matrix inversion. (Doesn't work properly if there is a scaling or skewing transformation.)
            </summary>
            <returns></returns>
        </member>
        <member name="T:CssUI.Rect2f">
            <summary>
            Represents a 2D rectangle with a width and height but no position
            </summary>
        </member>
        <member name="M:CssUI.Rect2f.Min(CssUI.Rect2f)">
            <summary>
            Returns the smallest dimensions of this size and the one given
            </summary>
            <param name="mn"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.Rect2f.Max(CssUI.Rect2f)">
            <summary>
            Returns the largest dimensions of this size and the one given
            </summary>
            <param name="mx"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.Rect2f.Clamp(CssUI.Rect2f,CssUI.Rect2f)">
            <summary>
            Clamps this sizes dimensions to the min and max given
            </summary>
            <param name="mn"></param>
            <param name="mx"></param>
            <returns></returns>
        </member>
        <member name="T:CssUI.Rect2i">
            <summary>
            Represents a 2D rectangle with a width and height but no position
            </summary>
        </member>
        <member name="M:CssUI.Rect2i.Min(CssUI.Rect2i)">
            <summary>
            Returns the smallest dimensions of this size and the one given
            </summary>
            <param name="mn"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.Rect2i.Max(CssUI.Rect2i)">
            <summary>
            Returns the largest dimensions of this size and the one given
            </summary>
            <param name="mx"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.Rect2i.Clamp(CssUI.Rect2i,CssUI.Rect2i)">
            <summary>
            Clamps this sizes dimensions to the min and max given
            </summary>
            <param name="mn"></param>
            <param name="mx"></param>
            <returns></returns>
        </member>
        <member name="T:CssUI.Rect4f">
            <summary>
            Represents a 2D rectangle with a coordinate for its Top, Right, Bottom, and Left sides
            </summary>
        </member>
        <member name="T:CssUI.Rect4i">
            <summary>
            Represents a 2D rectangle with a width and height but no position
            </summary>
        </member>
        <member name="P:CssUI.DOM.Media.MediaQueryList.Matches">
            <summary>
            Returns true if all of the media queries in this list match it's document.
            </summary>
        </member>
        <member name="T:CssUI.DOM.Internal.BrowsingContext">
            <summary>
            A browsing context is like an abstract way for a document to interact with the environment its being presented from.
            Because a document could be just in a normal window or possibly embedded within a control element in which case it isnt directly contained in a window but still is owned by one, so it needs to reference the window object at its' root.
            <para>"A browsing context is an environment in which Document objects are presented to the user."</para>
            </summary>
        </member>
        <member name="T:CssUI.DOM.Internal.EventCommon">
            <summary>
            Provides common functions related to events
            </summary>
        </member>
        <member name="M:CssUI.DOM.Internal.EventCommon.retarget_event(CssUI.DOM.Events.IEventTarget,CssUI.DOM.Events.IEventTarget)">
            <summary>
            Retargets <paramref name="A"/> against object <paramref name="B"/>
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Internal.EventCommon.append_to_event_path(CssUI.DOM.Events.Event,CssUI.DOM.Events.EventTarget,CssUI.DOM.Events.EventTarget,CssUI.DOM.Events.EventTarget,System.Collections.Generic.LinkedList{CssUI.DOM.Events.IEventTarget},System.Boolean)">
            <summary>
            Appends a new <see cref="T:CssUI.DOM.Events.EventPathItem"/> to the given events Path
            </summary>
            <param name="event"></param>
            <param name="invocationTarget"></param>
            <param name="shadowAdjustedTarget"></param>
            <param name="relatedTarget"></param>
            <param name="touchTargets"></param>
            <param name="slotInClosedTree"></param>
        </member>
        <member name="M:CssUI.DOM.Internal.EventCommon.Is_Window_Event(CssUI.DOM.Events.EEventName)">
            <summary>
            Returns true if the given event-name is 
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Internal.EventCommon.Is_Window_Reflecting_Body_Element_Event(CssUI.DOM.Events.EEventName)">
            <summary>
            Returns true if the given event-name is a window-reflecting body element event name as defined by the specifications
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="F:CssUI.DOM.DOMCommon.HTMLNamespace">
            <summary>
            Official HTML namespace string
            </summary>
        </member>
        <member name="F:CssUI.DOM.DOMCommon.MathMLNamespace">
            <summary>
            Official MathML namespace string
            </summary>
        </member>
        <member name="F:CssUI.DOM.DOMCommon.SVGNamespace">
            <summary>
            Official SVG namespace string
            </summary>
        </member>
        <member name="F:CssUI.DOM.DOMCommon.XLinkNamespace">
            <summary>
            Official XLink namespace string
            </summary>
        </member>
        <member name="F:CssUI.DOM.DOMCommon.XMLNamespace">
            <summary>
            Official XML namespace string
            </summary>
        </member>
        <member name="F:CssUI.DOM.DOMCommon.XMLNSNamespace">
            <summary>
            Official XMLNS namespace string
            </summary>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Lookup_Content_Type_String(System.String)">
            <summary>
            Returns the HTML Content-Type string associated with the given namespace
            </summary>
            <param name="Namespace"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Is_Active_Document(CssUI.DOM.Document)">
            <summary>
            Returns True if the specified document is the active one
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Is_CommonTextNode(CssUI.DOM.Nodes.Node)">
            <summary>
            Returns true if the node is one of the 3 common text node types: <see cref="T:CssUI.DOM.Text"/>, <see cref="T:CssUI.DOM.ProcessingInstruction"/>, or <see cref="T:CssUI.DOM.Comment"/>
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Is_Triggered_By_UserActivation(CssUI.DOM.Events.Event)">
            <summary>
            Returns true if the event was triggered by a user action
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.getBoundingClientRect(System.Collections.Generic.IEnumerable{CssUI.DOM.Geometry.DOMRect})">
            <summary>
            Returns the encompasing bounds of a list of <see cref="T:CssUI.DOM.Geometry.DOMRect"/>s
            </summary>
            <param name="Rects"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Assign_Slottables(CssUI.DOM.Nodes.ISlot)">
            <summary>
            
            </summary>
            <param name="slot"></param>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Assign_A_Slot(CssUI.DOM.Nodes.ISlottable)">
            <summary>
            
            </summary>
            <param name="slotable"></param>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Is_Descendant(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node)">
            <summary>
            An object A is called a descendant of an object B, if either A is a child of B or A is a child of an object C that is a descendant of B.
            </summary>
            <returns>If <paramref name="A"/> is a descendant of <paramref name="B"/></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Is_Inclusive_Descendant(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node)">
            <summary>
            An inclusive descendant is an object or one of its descendants.
            </summary>
            <returns>If <paramref name="A"/> is an (inclusive) descendant of <paramref name="B"/></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Is_Shadow_Including_Descendant(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node)">
            <summary>
            An object A is a shadow-including descendant of an object B, if A is a descendant of B, or A’s root is a shadow root and A’s root’s host is a shadow-including inclusive descendant of B.
            </summary>
            <returns>If <paramref name="A"/> is a (shadow including) descendant of <paramref name="B"/></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Is_Shadow_Including_Inclusive_Descendant(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node)">
            <summary>
            A shadow-including inclusive descendant is an object or one of its shadow-including descendants.
            </summary>
            <returns>If <paramref name="A"/> is a (shadow including) (inclusive) descendant of <paramref name="B"/></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Is_Ancestor(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node)">
            <summary>
            An object A is called an ancestor of an object B if and only if B is a descendant of A.
            </summary>
            <returns>If <paramref name="A"/> is an ancestor of <paramref name="B"/></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Is_Inclusive_Ancestor(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node)">
            <summary>
            An inclusive ancestor is an object or one of its ancestors.
            </summary>
            <returns>If <paramref name="A"/> is an (inclusive) ancestor of <paramref name="B"/></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Is_Host_Including_Inclusive_Ancestor(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node)">
            <summary>
            An object A is a host-including inclusive ancestor of an object B, if either A is an inclusive ancestor of B, or if B’s root has a non-null host and A is a host-including inclusive ancestor of B’s root’s host.
            </summary>
            <returns>If <paramref name="A"/> is an (Host including) (inclusive) ancestor of <paramref name="B"/></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Is_Shadow_Including_Ancestor(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node)">
            <summary>
            An object A is a shadow-including ancestor of an object B, if and only if B is a shadow-including descendant of A.
            </summary>
            <returns>If <paramref name="A"/> is an (shadow including) ancestor of <paramref name="B"/></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Is_Shadow_Including_Inclusive_Ancestor(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node)">
            <summary>
            A shadow-including inclusive ancestor is an object or one of its shadow-including ancestors.
            </summary>
            <returns>If <paramref name="A"/> is an (shadow including) (inclusive) ancestor of <paramref name="B"/></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Is_Sibling(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node)">
            <summary>
            An object A is called a sibling of an object B, if and only if B and A share the same non-null parent.
            </summary>
            <returns>If <paramref name="A"/> is a sibling of <paramref name="B"/></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Is_Inclusive_Sibling(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node)">
            <summary>
            An inclusive sibling is an object or one of its siblings.
            </summary>
            <returns>If <paramref name="A"/> is an (inclusive) sibling of <paramref name="B"/></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Is_Preceeding(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node)">
            <summary>
            An object A is preceding an object B if A and B are in the same tree and A comes before B in tree order.
            </summary>
            <returns>If <paramref name="A"/> is preeceding <paramref name="B"/></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Is_Following(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node)">
            <summary>
            An object A is following an object B if A and B are in the same tree and A comes after B in tree order.
            </summary>
            <returns>If <paramref name="A"/> is following <paramref name="B"/></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Range_Nodes(CssUI.DOM.Range)">
            <summary>
            Returns a list of all nodes within the given range
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Ancestors(CssUI.DOM.Nodes.Node,CssUI.DOM.NodeFilter,CssUI.DOM.Enums.ENodeFilterMask)">
            <summary>
            Returns a list of all ancestors for the given node, that is; the chain of parent elements all the way up to the root element.
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which Node types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Ancestors``1(CssUI.DOM.Nodes.Node,CssUI.DOM.NodeFilter,CssUI.DOM.Enums.ENodeFilterMask)">
            <summary>
            Returns a list of all ancestors for the given node whom match the given <typeparamref name="NodeType"/>
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which Node types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Nth_Ancestor(CssUI.DOM.Nodes.Node,System.UInt32,CssUI.DOM.NodeFilter,CssUI.DOM.Enums.ENodeFilterMask)">
            <summary>
            Returns Nth ancestor for the given node, that is; the Nth parent element along the chain of elements going all the way up to the root element.
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Nth">The number of elements to traverse</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which Node types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Nth_Ancestor``1(CssUI.DOM.Nodes.Node,System.UInt32,CssUI.DOM.NodeFilter,CssUI.DOM.Enums.ENodeFilterMask)">
            <summary>
            Returns Nth ancestor for the given node whom matches the given <typeparamref name="NodeType"/>
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Nth">The number of elements to traverse</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which Node types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Inclusive_Ancestors(CssUI.DOM.Nodes.Node,CssUI.DOM.NodeFilter,CssUI.DOM.Enums.ENodeFilterMask)">
            <summary>
            Returns a list of all (inclusive) ancestors for the given node, that is; the chain of parent elements all the way up to the root element.
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which Node types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Descendents(CssUI.DOM.Nodes.Node,CssUI.DOM.NodeFilter,CssUI.DOM.Enums.ENodeFilterMask)">
            <summary>
            Returns a list of all descendents for the given node
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which Node types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Descendents``1(CssUI.DOM.Nodes.Node,CssUI.DOM.NodeFilter,CssUI.DOM.Enums.ENodeFilterMask)">
            <summary>
            Returns a list of all descendents for the given node whom match the given <typeparamref name="NodeType"/>
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which Node types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Nth_Descendant(CssUI.DOM.Nodes.Node,System.UInt32,CssUI.DOM.NodeFilter,CssUI.DOM.Enums.ENodeFilterMask)">
            <summary>
            Returns Nth descendant for the given node
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Nth">The number of elements to traverse</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which Node types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Nth_Descendant``1(CssUI.DOM.Nodes.Node,System.UInt32,CssUI.DOM.NodeFilter,CssUI.DOM.Enums.ENodeFilterMask)">
            <summary>
            Returns Nth descendant for the given node whom matches the given <typeparamref name="NodeType"/>
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Nth">The number of elements to traverse</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which Node types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Shadow_Including_Descendents(CssUI.DOM.Nodes.Node,CssUI.DOM.NodeFilter,CssUI.DOM.Enums.ENodeFilterMask)">
            <summary>
            Returns a list of all descendents for the given node and, in addition, all of its ShadowDOM descendents
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which Node types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Inclusive_Descendents(CssUI.DOM.Nodes.Node,CssUI.DOM.NodeFilter,CssUI.DOM.Enums.ENodeFilterMask)">
            <summary>
            Returns a list of all (inclusive) descendents for the given node
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which Node types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Shadow_Including_Inclusive_Descendents(CssUI.DOM.Nodes.Node,CssUI.DOM.NodeFilter,CssUI.DOM.Enums.ENodeFilterMask)">
            <summary>
            Returns a list of all (inclusive) descendents for the given node and, in addition, all of its ShadowDOM (inclusive) descendents
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which Node types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Previous(CssUI.DOM.Nodes.Node,CssUI.DOM.NodeFilter)">
            <summary>
            Returns a list of all previous and adjacent sibling nodes for the given node
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Previous``1(CssUI.DOM.Nodes.Node,CssUI.DOM.NodeFilter)">
            <summary>
            Returns a list of all previous and adjacent sibling nodes for the given node
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Nth_Previous(CssUI.DOM.Nodes.Node,System.UInt32,CssUI.DOM.NodeFilter)">
            <summary>
            Returns Nth previous and adjacent sibling for the given node
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Nth">The number of elements to traverse</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Preceeding(CssUI.DOM.Nodes.Node,CssUI.DOM.NodeFilter,CssUI.DOM.Enums.ENodeFilterMask)">
            <summary>
            Returns a list of all tree-order preceeding (sibling) nodes for the given node 
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which Node types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Preceeding``1(CssUI.DOM.Nodes.Node,CssUI.DOM.NodeFilter,CssUI.DOM.Enums.ENodeFilterMask)">
            <summary>
            Returns a list of all tree-order preceeding (sibling) nodes for the given node whom match the given <typeparamref name="NodeType"/>
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which Node types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Nth_Preceeding(CssUI.DOM.Nodes.Node,System.UInt32,CssUI.DOM.NodeFilter,CssUI.DOM.Enums.ENodeFilterMask)">
            <summary>
            Returns Nth tree-order preceeding sibling for the given node
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Nth">The number of elements to traverse</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which Node types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Following(CssUI.DOM.Nodes.Node,CssUI.DOM.NodeFilter,CssUI.DOM.Enums.ENodeFilterMask)">
            <summary>
            Returns a list of all tree-order following (sibling) nodes for the given node 
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which Node types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Following``1(CssUI.DOM.Nodes.Node,CssUI.DOM.NodeFilter,CssUI.DOM.Enums.ENodeFilterMask)">
            <summary>
            Returns a list of all tree-order following (sibling) nodes for the given node 
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which Node types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Nth_Following(CssUI.DOM.Nodes.Node,System.UInt32,CssUI.DOM.NodeFilter,CssUI.DOM.Enums.ENodeFilterMask)">
            <summary>
            Returns Nth tree-order following sibling for the given node
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Nth">The number of elements to traverse</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <param name="FilterMask">Mask for which Node types to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Next(CssUI.DOM.Nodes.Node,CssUI.DOM.NodeFilter)">
            <summary>
            Returns a list of all nodes after and adjacent to the given node (siblings)
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Next``1(CssUI.DOM.Nodes.Node,CssUI.DOM.NodeFilter)">
            <summary>
            Returns a list of all nodes after and adjacent to the given node (siblings)
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Nth_Next(CssUI.DOM.Nodes.Node,System.UInt32,CssUI.DOM.NodeFilter)">
            <summary>
            Returns Nth next sibling for the given node
            </summary>
            <param name="node">The node to start searching from</param>
            <param name="Nth">The number of elements to traverse</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Elements_By_Qualified_Name(CssUI.DOM.Nodes.Node,System.String)">
            <summary>
            Returns a list of <see cref="T:CssUI.DOM.Element"/>s matching <paramref name="qualifiedName"/>
            </summary>
            <param name="root">The node to start searching from</param>
            <param name="qualifiedName"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Elements_By_Namespace_And_Local_Name(CssUI.DOM.Nodes.Node,System.String,System.String)">
            <summary>
            Returns a list of <see cref="T:CssUI.DOM.Element"/>s which match <paramref name="localName"/> and <paramref name="Namespace"/>
            </summary>
            <param name="root">The node to start searching from</param>
            <param name="Namespace"></param>
            <param name="localName"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Elements_By_Class_Name(CssUI.DOM.Nodes.Node,System.String)">
            <summary>
            Returns a list of <see cref="T:CssUI.DOM.Element"/>s which match <paramref name="localName"/> and <paramref name="Namespace"/>
            </summary>
            <param name="root">The node to start searching from</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Root(CssUI.DOM.Nodes.Node)">
            <summary>
            Returns the root of a given node
            </summary>
            <param name="node">The node to start searching from</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Shadow_Including_Root(CssUI.DOM.Nodes.Node)">
            <summary>
            Returns the (shadow-including) root of a given node
            </summary>
            <param name="node">The node to start searching from</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Children(CssUI.DOM.Nodes.Node,CssUI.DOM.NodeFilter)">
            <summary>
            Returns a list of all descendents of <paramref name="node"/> whose parent node is <paramref name="node"/>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            </summary>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Nth_Child(CssUI.DOM.Nodes.Node,System.UInt32,CssUI.DOM.NodeFilter)">
            <summary>
            Returns the Nth descendent of <paramref name="node"/> whose parent node is <paramref name="node"/>
            <param name="node">The node to start searching from</param>
            <param name="Nth">The number of elements to traverse</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            </summary>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Children``1(CssUI.DOM.Nodes.Node,CssUI.DOM.NodeFilter)">
            <summary>
            Returns a list of all descendents of <paramref name="node"/> whose parent node is <paramref name="node"/> and whom match the given <typeparamref name="NodeType"/>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            </summary>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Nth_Child``1(CssUI.DOM.Nodes.Node,System.UInt32,CssUI.DOM.NodeFilter)">
            <summary>
            Returns the Nth descendent of <paramref name="node"/> whose parent node is <paramref name="node"/> and whom matches the given <typeparamref name="NodeType"/>
            <param name="node">The node to start searching from</param>
            <param name="Nth">The number of elements to traverse</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            </summary>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_First_Child``1(CssUI.DOM.Nodes.Node,CssUI.DOM.NodeFilter)">
            <summary>
            Returns the first immediate descendent which matches the given <paramref name="Filter"/> and Type <typeparamref name="NodeType"/>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            </summary>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Last_Child``1(CssUI.DOM.Nodes.Node,CssUI.DOM.NodeFilter)">
            <summary>
            Returns the first descendent of <paramref name="node"/> whose parent node is <paramref name="node"/> and which matches the given <paramref name="Filter"/> and <typeparamref name="NodeType"/>
            <param name="node">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            </summary>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Element_Children``1(CssUI.DOM.Element,CssUI.DOM.NodeFilter)">
            <summary>
            Returns the descendents of <paramref name="element"/> whose parent node is <paramref name="element"/> and whom matches the given <typeparamref name="ElementType"/>
            <param name="element">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            </summary>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Nth_Element_Child``1(CssUI.DOM.Element,System.UInt32,CssUI.DOM.NodeFilter)">
            <summary>
            Returns the Nth descendent of <paramref name="element"/> whose parent node is <paramref name="element"/> and whom matches the given <typeparamref name="ElementType"/>
            <param name="element">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            </summary>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_First_Element_Child``1(CssUI.DOM.Element,CssUI.DOM.NodeFilter)">
            <summary>
            Returns the first immediate (<see cref="T:CssUI.DOM.Element"/>) descendent which matches the given <paramref name="Filter"/> and Type <typeparamref name="ElementType"/>
            <param name="element">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            </summary>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Last_Element_Child``1(CssUI.DOM.Element,CssUI.DOM.NodeFilter)">
            <summary>
            Returns the last (<see cref="T:CssUI.DOM.Element"/>) descendent of <paramref name="element"/> whose parent node is <paramref name="element"/> and whom matches the given <paramref name="Filter"/> and <typeparamref name="ElementType"/>
            <param name="element">The node to start searching from</param>
            <param name="Filter">Filter used for determining which nodes to allow</param>
            </summary>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Junction(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node)">
            <summary>
            Returns the node where a given <paramref name="node"/> node meets the given <paramref name="ancestor"/>, if any.
            </summary>
            <param name="node">Node to begin searching from</param>
            <param name="ancestor">Target stopping point for the search</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.DOMCommon.Get_Focus_Chain(CssUI.DOM.FocusableArea)">
            <summary>
            Returns the chain of focus up through the hierarchy from the given node to it's owning document
            </summary>
            <param name="subject"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.MimeType.Is_Binary_Data_Byte(System.Byte)">
            <summary>
            Returns <c>True</c> if the given code point is one of the HTML binary data bytes
            </summary>
            <param name="b">The character to check</param>
        </member>
        <member name="M:CssUI.DOM.MimeType.Is_Whitepace_Byte(System.Byte)">
            <summary>
            Returns <c>True</c> if the given code point is an HTML whitespace byte
            </summary>
            <param name="b">The character to check</param>
        </member>
        <member name="M:CssUI.DOM.MimeType.Is_Tag_Terminating_Byte(System.Byte)">
            <summary>
            Returns <c>True</c> if the given code point is one of the HTML tag-terminating bytes
            </summary>
            <param name="b">The character to check</param>
        </member>
        <member name="M:CssUI.DOM.MimeType.Parse(System.ReadOnlyMemory{System.Char},CssUI.DOM.MimeTypeRecord@)">
            <summary>
            Extracts a MIME type/subtype from parsing a MIME string
            </summary>
            <param name="input"></param>
            <param name="outType"></param>
            <param name="outSubType"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.MimeType.Sniff(System.ReadOnlyMemory{System.Byte},System.String,System.String@,System.Boolean,System.Boolean)">
            <summary>
            Extracts a MIME type/subtype by reading header data from binary file data
            </summary>
            <param name="data"></param>
            <param name="outType"></param>
            <param name="outSubType"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.XMLCommon.Is_Valid_Name(System.String)">
            <summary>
            Returns True if the given string follows the XML Name format
            </summary>
        </member>
        <member name="M:CssUI.DOM.XMLCommon.Is_Valid_QName(System.String)">
            <summary>
            Returns True if the given string follows the XML qName format
            </summary>
        </member>
        <member name="M:CssUI.DOM.XMLCommon.Is_NameStartChar(System.Char)">
            <summary>
            True is char is a valid XML name-start character
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.XMLCommon.Is_NameChar(System.Char)">
            <summary>
            True is char is a valid XML name character
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.XMLCommon.Is_NTChar(System.Char)">
            <summary>
            True is char is a valid XML character
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.XMLCommon.Is_Valid(System.String)">
            <summary>
            Returns whether the given name follows the XML name production format
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="T:CssUI.DOM.CustomElements.EReactionName">
            <summary>
            Lists all of the possible custom element reactions
            </summary>
        </member>
        <member name="T:CssUI.DOM.CEReactions">
            <summary>
            Attribute which indicates that the marked Operation, Setter, Deleter, etc is to be supplemented with additional steps in order to appropriately track and invoke custom element reactions.
            <para>Also provides utility functions related to wrapping and handling custom element related methods</para>
            </summary>
        </member>
        <member name="M:CssUI.DOM.CEReactions.Wrap_CEReaction(CssUI.DOM.Window,System.Action)">
            <summary>
            Convenient wrapper for any Operations, attributes, setters, or deleters marked with [<see cref="T:CssUI.DOM.CEReactions"/>]
            </summary>
            <param name="element">Element to queue this reaction for</param>
            <param name="wrappedMethod">The specifications dictate that for any [CEReaction] attributed method, the original steps given for said method must be encompassed by the callback reaction steps, this method is those original steps</param>
        </member>
        <member name="M:CssUI.DOM.CEReactions.Wrap_CEReaction``1(CssUI.DOM.Window,System.Func{``0})">
            <summary>
            Convenient wrapper for any Operations, attributes, setters, or deleters marked with [<see cref="T:CssUI.DOM.CEReactions"/>]
            </summary>
            <param name="element">Element to queue this reaction for</param>
            <param name="wrappedMethod">The specifications dictate that for any [CEReaction] attributed method, the original steps given for said method must be encompassed by the callback reaction steps, this method is those original steps</param>
        </member>
        <member name="F:CssUI.DOM.Document.topLayer">
            <summary>
            The top layer is an ordered set of elements, rendered in the order they appear in the set. The last element in the set is rendered last, and thus appears on top.
            </summary>
            Docs: https://fullscreen.spec.whatwg.org/#top-layer
        </member>
        <member name="P:CssUI.DOM.Document.Initial_Containing_Block">
            <summary>
            Returns the initial containing block
            </summary>
        </member>
        <member name="F:CssUI.DOM.Document.Viewport">
            <summary>
            The area within which element layout is performed
            (The viewport used for layout)
            </summary>
        </member>
        <member name="F:CssUI.DOM.Document.implementation">
            <summary>
            Returns document’s DOMImplementation object.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Document.doctype">
            <summary>
            Returns the doctype or null if there is none.
            </summary>
        </member>
        <member name="F:CssUI.DOM.Document.contentType">
            <summary>
            Returns document’s content type.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:CssUI.DOM.Document.documentElement" -->
        <member name="M:CssUI.DOM.Document.Run_Event_Loop">
            <summary>
            Performs main-loop processing
            </summary>
        </member>
        <member name="P:CssUI.DOM.Document.body">
            <summary>
            The root CssUI element
            </summary>
        </member>
        <member name="M:CssUI.DOM.Document.getElementsByTagName(System.String)">
            <summary>
            If qualifiedName is "*" returns a collection of all descendant elements.
            Otherwise, returns a collection of all descendant elements whose qualified name is qualifiedName. (Matches case-insensitively against elements in the HTML namespace within an HTML document.)
            </summary>
            <param name="qualifiedName"></param>
        </member>
        <member name="M:CssUI.DOM.Document.getElementsByTagNameNS(System.String,System.String)">
            <summary>
            If namespace and localName are "*" returns a collection of all descendant elements.
            If only namespace is "*" returns a collection of all descendant elements whose local name is localName.
            If only localName is "*" returns a collection of all descendant elements whose namespace is namespace.
            Otherwise, returns a collection of all descendant elements whose namespace is namespace and local name is localName.
            </summary>
            <param name="Namespace"></param>
            <param name="localName"></param>
        </member>
        <member name="M:CssUI.DOM.Document.getElementsByClassName(System.String)">
            <summary>
            Returns a collection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. 
            The classNames argument is interpreted as a space-separated list of classes.
            </summary>
            <param name="classNames"></param>
        </member>
        <member name="M:CssUI.DOM.Document.createElement(System.String,CssUI.DOM.ElementCreationOptions)">
            <summary>
            Returns an element with localName as local name (if document is an HTML document, localName gets lowercased). 
            The element’s namespace is the HTML namespace when document is an HTML document or document’s content type is "application/xhtml+xml", and null otherwise.
            If localName does not match the Name production an "InvalidCharacterError" DOMException will be thrown.
            When supplied, options’s is can be used to create a customized built-in element.
            </summary>
            <param name="localName"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Document.createElementNS(System.String,System.String,CssUI.DOM.ElementCreationOptions)">
            <summary>
            Returns an element with namespace namespace. Its namespace prefix will be everything before ":" (U+003E) in qualifiedName or null. Its local name will be everything after ":" (U+003E) in qualifiedName or qualifiedName.
            If localName does not match the Name production an "InvalidCharacterError" DOMException will be thrown.
            If one of the following conditions is true a "NamespaceError" DOMException will be thrown:
            localName does not match the QName production.
            Namespace prefix is not null and namespace is the empty string.
            Namespace prefix is "xml" and namespace is not the XML namespace.
            qualifiedName or namespace prefix is "xmlns" and namespace is not the XMLNS namespace.
            namespace is the XMLNS namespace and neither qualifiedName nor namespace prefix is "xmlns".
            When supplied, options’s is can be used to create a customized built-in element.
            </summary>
            <param name="Namespace"></param>
            <param name="qualifiedName"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Document.createDocumentFragment">
            <summary>
            Returns a DocumentFragment node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Document.createTextNode(System.String)">
            <summary>
            Returns a Text node whose data is data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Document.createCDATASection(System.String)">
            <summary>
            Returns a CDATASection node whose data is data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Document.createComment(System.String)">
            <summary>
            Returns a Comment node whose data is data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Document.createProcessingInstruction(System.String,System.String)">
            <summary>
            Returns a ProcessingInstruction node whose target is target and data is data. 
            If target does not match the Name production an "InvalidCharacterError" DOMException will be thrown. 
            If data contains "?>" an "InvalidCharacterError" DOMException will be thrown.
            </summary>
            <param name="target"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Document.Register_Key_Command(CssUI.DOM.KeyCombination,System.Action)">
            <summary>
            Returns true if the given <paramref name="command"/> was able to be registered to <paramref name="combo"/>
            </summary>
            <param name="combo"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Document.Unregister_Key_Command(CssUI.DOM.KeyCombination)">
            <summary>
            Returns true if the given key-combination <paramref name="combo"/> was able to be unegistered
            </summary>
            <param name="combo"></param>
            <returns></returns>
        </member>
        <member name="F:CssUI.DOM.Document.focusedArea">
            <summary>
            The term focusable area is used to refer to regions of the interface that can become the target of keyboard input. Focusable areas can be elements, parts of elements, or other regions managed by the user agent.
            </summary>
            Docs: https://html.spec.whatwg.org/multipage/interaction.html#focused-area-of-the-document
        </member>
        <member name="P:CssUI.DOM.Document.activeElement">
            <summary>
            Returns the deepest element in the document through which or to which key events are being routed. This is, roughly speaking, the focused element in the document.
            </summary>
        </member>
        <member name="M:CssUI.DOM.Document.hasFocus">
            <summary>
            Returns true if key events are being routed through or to the document; otherwise, returns false. Roughly speaking, this corresponds to the document, or a document nested inside this one, being focused.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Document.createRange">
            <summary>
            Returns a new <see cref="T:CssUI.DOM.Range"/> object for the document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Document.importNode(CssUI.DOM.Nodes.Node,System.Boolean)">
            <summary>
            Returns a copy of node. If deep is true, the copy also includes the node’s descendants.
            If node is a document or a shadow root, throws a "NotSupportedError" DOMException.
            </summary>
            <param name="node"></param>
            <param name="deep"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Document.adoptNode(CssUI.DOM.Nodes.Node)">
            <summary>
            Moves node from another document and returns it.
            If node is a document, throws a "NotSupportedError" DOMException or, if node is a shadow root, throws a "HierarchyRequestError" DOMException.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="E:CssUI.DOM.Document.onAbort">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onAuxClick">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onBlur">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onCancel">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onCanPlay">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onCanPlayThrough">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onChange">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onClick">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onClose">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onContextMenu">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onCueChange">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onDblClick">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onDrag">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onDragEnd">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onDragEnter">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onDragExit">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onDragLeave">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onDragOver">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onDragStart">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onDrop">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onDurationChange">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onEmptied">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onEnded">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onFocus">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onFormData">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onInput">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onInvalid">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onKeyDown">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onKeyPress">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onKeyUp">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onLoad">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onLoadedData">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onLoadedMetadata">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onLoadEnd">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onLoadStart">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onMouseDown">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onMouseEnter">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onMouseLeave">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onMouseMove">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onMouseOut">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onMouseOver">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onMouseUp">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onWheel">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onPause">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onPlay">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onPlaying">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onProgress">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onRateChange">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onReset">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onResize">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onScroll">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onSecurityPolicyViolation">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onSeeked">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onSeeking">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onSelect">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onStalled">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onSubmit">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onSuspend">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onTimeUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onToggle">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onVolumeChange">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onWaiting">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onSelectStart">
            <summary>
            
            </summary>
        </member>
        <member name="E:CssUI.DOM.Document.onSelectionChange">
            <summary>
            
            </summary>
        </member>
        <member name="M:CssUI.DOM.DocumentType.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="publicId"></param>
            <param name="systemId"></param>
        </member>
        <member name="T:CssUI.DOM.AttributeValue">
            <summary>
            Represents an attribute value for a DOM <see cref="T:CssUI.DOM.Element"/>
            These are not mutable, they cannot be changed after creation
            </summary>
        </member>
        <member name="F:CssUI.DOM.AttributeValue.type">
            <summary>
            Name of this attribute
            </summary>
        </member>
        <member name="F:CssUI.DOM.AttributeValue.data">
            <summary>
            The true string value
            </summary>
        </member>
        <member name="F:CssUI.DOM.AttributeValue.Value">
            <summary>
            The typed form of this value
            </summary>
        </member>
        <member name="M:CssUI.DOM.AttributeValue.From(System.Int32)">
            <summary>
            Creates a new <see cref="F:CssUI.DOM.Enums.EAttributeType.Integer"/> type attribute value
            </summary>
        </member>
        <member name="M:CssUI.DOM.AttributeValue.From(System.UInt32)">
            <summary>
            Creates a new <see cref="F:CssUI.DOM.Enums.EAttributeType.Integer"/> type attribute value
            </summary>
        </member>
        <member name="M:CssUI.DOM.AttributeValue.From(System.Int64)">
            <summary>
            Creates a new <see cref="F:CssUI.DOM.Enums.EAttributeType.Integer"/> type attribute value
            </summary>
        </member>
        <member name="M:CssUI.DOM.AttributeValue.From(System.UInt64)">
            <summary>
            Creates a new <see cref="F:CssUI.DOM.Enums.EAttributeType.Integer"/> type attribute value
            </summary>
        </member>
        <member name="M:CssUI.DOM.AttributeValue.From(System.Double)">
            <summary>
            Creates a new <see cref="F:CssUI.DOM.Enums.EAttributeType.FloatingPoint"/> type attribute value
            </summary>
        </member>
        <member name="M:CssUI.DOM.AttributeValue.From(System.Boolean)">
            <summary>
            Creates a new <see cref="F:CssUI.DOM.Enums.EAttributeType.Boolean"/> type attribute value
            </summary>
        </member>
        <member name="M:CssUI.DOM.AttributeValue.From_Length(System.Double)">
            <summary>
            Creates a new <see cref="F:CssUI.DOM.Enums.EAttributeType.Length"/> type attribute value
            </summary>
        </member>
        <member name="M:CssUI.DOM.AttributeValue.From_Percent(System.Double)">
            <summary>
            Creates a new <see cref="F:CssUI.DOM.Enums.EAttributeType.Percentage"/> type attribute value
            </summary>
        </member>
        <member name="M:CssUI.DOM.AttributeValue.From(CssUI.AtomicString)">
            <summary>
            Creates a new <see cref="F:CssUI.DOM.Enums.EAttributeType.String"/> type attribute value
            </summary>
        </member>
        <member name="M:CssUI.DOM.AttributeValue.From``1(``0)">
            <summary>
            Creates a new <see cref="F:CssUI.DOM.Enums.EAttributeType.Enumerated"/> type attribute value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.AttributeValue.AsAtomic">
            <summary>
            Retreives this value as an <see cref="T:CssUI.AtomicString"/> if possible
            </summary>
        </member>
        <member name="M:CssUI.DOM.AttributeValue.AsString">
            <summary>
            Retreives this value as a string if possible
            </summary>
        </member>
        <member name="M:CssUI.DOM.AttributeValue.AsRAW">
            <summary>
            Retreives the RAW backing value
            </summary>
        </member>
        <member name="M:CssUI.DOM.AttributeValue.AsInt">
            <summary>
            Retreives this value as the requested type if possible
            </summary>
        </member>
        <member name="M:CssUI.DOM.AttributeValue.AsUInt">
            <summary>
            Retreives this value as the requested type if possible
            </summary>
        </member>
        <member name="M:CssUI.DOM.AttributeValue.AsLong">
            <summary>
            Retreives this value as the requested type if possible
            </summary>
        </member>
        <member name="M:CssUI.DOM.AttributeValue.AsULong">
            <summary>
            Retreives this value as the requested type if possible
            </summary>
        </member>
        <member name="M:CssUI.DOM.AttributeValue.AsFloatingPoint">
            <summary>
            Retreives this value as the requested type if possible
            </summary>
        </member>
        <member name="M:CssUI.DOM.AttributeValue.AsEnum``1">
            <summary>
            Retreives this value as the requested type if possible
            </summary>
        </member>
        <member name="M:CssUI.DOM.AttributeValue.AsLength">
            <summary>
            Retreives this value as the requested type if possible
            </summary>
        </member>
        <member name="M:CssUI.DOM.AttributeValue.AsPercentage">
            <summary>
            Retreives this value as the requested type if possible
            </summary>
        </member>
        <member name="P:CssUI.DOM.Attr.namespaceURI">
            <summary>
            Namespace name
            </summary>
        </member>
        <member name="P:CssUI.DOM.Attr.prefix">
            <summary>
            Namespace prefix
            </summary>
        </member>
        <member name="F:CssUI.DOM.Attr._value_assigned">
            <summary>
            The actual value assigned to this attribute by the user
            </summary>
        </member>
        <member name="F:CssUI.DOM.Attr._value_used">
            <summary>
            The value being used for this attribute (an invalid/missing assigned value can cause this value to be assigned a default)
            </summary>
        </member>
        <member name="P:CssUI.DOM.Attr.IsMissingValue">
            <summary>
            True if this attribute doesnt have an assigned value
            </summary>
        </member>
        <member name="P:CssUI.DOM.Attr.IsDefined">
            <summary>
            Returns <c>True</c> if this attribute is not Missing or Invalid
            </summary>
        </member>
        <member name="P:CssUI.DOM.Attr.Name">
            <summary>
            Qualified Name
            </summary>
            Docs: https://dom.spec.whatwg.org/#concept-attribute-qualified-name
        </member>
        <member name="F:CssUI.DOM.AttributeTokenList`1.localName">
            <summary>
            Name of the attribute this token list represents
            </summary>
        </member>
        <member name="T:CssUI.DOM.AttributeDefinition">
            <summary>
            Holds all of, the specification defined, information about the valid values for a property and how to resolve said values into an absolute form.
            </summary>
        </member>
        <member name="F:CssUI.DOM.AttributeDefinition.Name">
            <summary>
            Name of the attribute
            </summary>
        </member>
        <member name="F:CssUI.DOM.AttributeDefinition.MissingValueDefault">
            <summary>
            When the attribute is not specified, if there is a missing value default state defined, then that is the state represented by the (missing) attribute. Otherwise, the absence of the attribute means that there is no state represented.
            </summary>
            Docs: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#missing-value-default
        </member>
        <member name="F:CssUI.DOM.AttributeDefinition.InvalidValueDefault">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.DOM.AttributeDefinition.Type">
            <summary>
            Allowed datatypes
            </summary>
        </member>
        <member name="F:CssUI.DOM.AttributeDefinition.Keywords">
            <summary>
            A list of all keywords that can be assigned to this property
            </summary>
        </member>
        <member name="F:CssUI.DOM.AttributeDefinition.SupportedTokens">
            <summary>
            A list of all tokens that can be assigned to this property
            </summary>
        </member>
        <member name="F:CssUI.DOM.AttributeDefinition.LowerRange">
            <summary>
            The minimum value (if any) that can be assigned to this attribute
            </summary>
        </member>
        <member name="F:CssUI.DOM.AttributeDefinition.UpperRange">
            <summary>
            The maximum value (if any) that can be assigned to this attribute
            </summary>
        </member>
        <member name="P:CssUI.DOM.AttributeDefinition.Inherited">
            <summary>
            If TRUE then this attribute will be inherited by default, meaning it's value is passed down to child elements rather then their matching property using it's 'initial' value
            </summary>
        </member>
        <member name="M:CssUI.DOM.AttributeDefinition.#ctor(CssUI.AtomicName{CssUI.DOM.EAttributeName},CssUI.DOM.Enums.EAttributeType,CssUI.DOM.AttributeValue,CssUI.DOM.AttributeValue,CssUI.DOM.Enums.EAttributeFlags,System.String[],System.Type,System.Object,System.Object,System.String[])">
            <summary>
            Creates a DOM attribute definition
            </summary>
            <param name="Name">DOM attribute name</param>
            <param name="Flags">Indicates what aspects of an element this property affects</param>
            <param name="MissingValueDefault">Default value for the attribute</param>
            <param name="Keywords">List of keywords which can be assigned to this attribute</param>
        </member>
        <member name="M:CssUI.DOM.AttributeDefinition.#ctor(System.Type,CssUI.AtomicName{CssUI.DOM.EAttributeName},CssUI.DOM.Enums.EAttributeType,CssUI.DOM.AttributeValue,CssUI.DOM.AttributeValue,CssUI.DOM.Enums.EAttributeFlags,System.String[],System.Type,System.Object,System.Object,System.String[])">
            <summary>
            Creates a DOM attribute definition
            </summary>
            <param name="Name">DOM attribute name</param>
            <param name="Flags">Indicates what aspects of an element this property affects</param>
            <param name="MissingValueDefault">Default value for the attribute</param>
            <param name="Keywords">List of keywords which can be assigned to this attribute</param>
        </member>
        <member name="M:CssUI.DOM.AttributeDefinition.Parse(System.String,System.Object@)">
            <summary>
            
            </summary>
            <param name="Input"></param>
            <param name="outValue"></param>
            <exception cref="T:CssUI.DOM.Exceptions.DomSyntaxError">On invalid value</exception>
        </member>
        <member name="M:CssUI.DOM.AttributeDefinition.CheckAndThrow(System.String)">
            <summary>
            Throws an exception if the value is invalid according to the currently set options
            </summary>
            <param name="Value"></param>
            <exception cref="T:CssUI.DOM.Exceptions.DomSyntaxError">On invalid value</exception>
        </member>
        <member name="M:CssUI.DOM.AttributeDefinition.CheckAndThrow(CssUI.DOM.AttributeValue)">
            <summary>
            Throws an exception if the value is invalid according to the currently set options
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="F:CssUI.DOM.Element.NamespaceURI">
            <summary>
            This elements official namespace name string
            </summary>
        </member>
        <member name="F:CssUI.DOM.Element.prefix">
            <summary>
            This elements namespace prefix eg: "html" or "xml"
            </summary>
        </member>
        <member name="P:CssUI.DOM.Element.localName">
            <summary>
            Local part of the qualified name of an element.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:CssUI.DOM.Element.tagName" -->
        <member name="P:CssUI.DOM.Element.id">
            <summary>
            A completely unique identifier for this element 
            </summary>
        </member>
        <member name="P:CssUI.DOM.Element.className">
            <summary>
            List of classes that apply to this element
            </summary>
        </member>
        <member name="M:CssUI.DOM.Element.hasAttributes">
            <summary>
            Returns true if this element has any attributes defined
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Element.getAttributeNames">
            <summary>
            Returns a list of names for all defined attributes
            </summary>
            <returns></returns>
        </member>
        <member name="P:CssUI.DOM.Element.is_value">
            <summary>
            an elements 'is' attribute specifies its custom element class
            </summary>
        </member>
        <member name="F:CssUI.DOM.Element.ptrSelfRef">
            <summary>
            Holds a pointer to this element within it's parent's linked-list of child elements
            </summary>
        </member>
        <member name="P:CssUI.DOM.Element.is_being_rendered">
            <summary>
            An element is being rendered if it has any associated CSS layout boxes, SVG layout boxes, or some equivalent in other styling languages.
            </summary>
            XXX: Implement this logic
        </member>
        <member name="P:CssUI.DOM.Element.is_actively_pointed_at">
            <summary>
            Returns if the user is indicating(hovering) at this element and their pointing device is in the "down" state
            </summary>
        </member>
        <member name="P:CssUI.DOM.Element.is_designated">
            <summary>
            Returns if the user is indicating (hovering overtop) this element with a pointing device
            </summary>
        </member>
        <member name="P:CssUI.DOM.Element.is_focused">
            <summary>
            Does this element currently have focus
            </summary>
        </member>
        <member name="P:CssUI.DOM.Element.Is_Defined">
            <summary>
            Is this element a properly defined element
            </summary>
        </member>
        <member name="P:CssUI.DOM.Element.isCustom">
            <summary>
            Is this element a custom element
            <para>An element whose custom element state is "custom" is said to be custom.</para>
            </summary>
        </member>
        <member name="P:CssUI.DOM.Element.has_overflow">
            <summary>
            Do any of our elements exceed our bounds?
            </summary>
        </member>
        <member name="M:CssUI.DOM.Element.closest(System.String)">
            <summary>
            Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise.
            </summary>
            <param name="selectors"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Element.matches(System.String)">
            <summary>
            Returns true if matching selectors against element’s root yields element, and false otherwise.
            </summary>
            <param name="selectors"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Element.getElementsByTagName(System.String)">
            <summary>
            If qualifiedName is "*" returns a collection of all descendant elements.
            Otherwise, returns a collection of all descendant elements whose qualified name is qualifiedName. (Matches case-insensitively against elements in the HTML namespace within an HTML document.)
            </summary>
            <param name="qualifiedName"></param>
        </member>
        <member name="M:CssUI.DOM.Element.getElementsByTagNameNS(System.String,System.String)">
            <summary>
            If namespace and localName are "*" returns a collection of all descendant elements.
            If only namespace is "*" returns a collection of all descendant elements whose local name is localName.
            If only localName is "*" returns a collection of all descendant elements whose namespace is namespace.
            Otherwise, returns a collection of all descendant elements whose namespace is namespace and local name is localName.
            </summary>
            <param name="Namespace"></param>
            <param name="localName"></param>
        </member>
        <member name="M:CssUI.DOM.Element.getElementsByClassName(System.String)">
            <summary>
            Returns a collection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. 
            The classNames argument is interpreted as a space-separated list of classes.
            </summary>
            <param name="classNames"></param>
        </member>
        <member name="M:CssUI.DOM.Element.before(CssUI.DOM.Nodes.Node[])">
            <summary>
            Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.
            </summary>
            <exception cref="T:CssUI.DOM.Exceptions.HierarchyRequestError">if the constraints of the node tree are violated.</exception>
        </member>
        <member name="M:CssUI.DOM.Element.before(System.String[])">
            <summary>
            Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.
            </summary>
            <exception cref="T:CssUI.DOM.Exceptions.HierarchyRequestError">if the constraints of the node tree are violated.</exception>
        </member>
        <member name="M:CssUI.DOM.Element.after(CssUI.DOM.Nodes.Node[])">
            <summary>
            Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.
            </summary>
            <exception cref="T:CssUI.DOM.Exceptions.HierarchyRequestError">if the constraints of the node tree are violated.</exception>
        </member>
        <member name="M:CssUI.DOM.Element.after(System.String[])">
            <summary>
            Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.
            </summary>
            <exception cref="T:CssUI.DOM.Exceptions.HierarchyRequestError">if the constraints of the node tree are violated.</exception>
        </member>
        <member name="M:CssUI.DOM.Element.replaceWith(CssUI.DOM.Nodes.Node[])">
            <summary>
            Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.
            </summary>
            <exception cref="T:CssUI.DOM.Exceptions.HierarchyRequestError">if the constraints of the node tree are violated.</exception>
        </member>
        <member name="M:CssUI.DOM.Element.replaceWith(System.String[])">
            <summary>
            Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.
            </summary>
            <exception cref="T:CssUI.DOM.Exceptions.HierarchyRequestError">if the constraints of the node tree are violated.</exception>
        </member>
        <member name="M:CssUI.DOM.Element.remove">
            <summary>
            Removes node.
            </summary>
        </member>
        <member name="M:CssUI.DOM.Element.scroll_element_into_view(CssUI.DOM.Enums.EScrollLogicalPosition,CssUI.DOM.Enums.EScrollLogicalPosition,CssUI.CSS.EScrollBehavior)">
            <summary>
            Internal utility function for scrolling the current element into view. its a long process that is probably referenced a few different times so it gets its own function.
            </summary>
            <param name="block"></param>
            <param name="inline"></param>
        </member>
        <member name="M:CssUI.DOM.Element.ScrollIntoView">
            <summary>
            Ensures this element is visible by scrolling any of its containing elements required such that it is shown.
            </summary>
        </member>
        <member name="M:CssUI.DOM.Element.ScrollIntoView(System.Boolean)">
            <summary>
            Ensures this element is visible by scrolling any of its containing elements required such that it is shown.
            </summary>
        </member>
        <member name="M:CssUI.DOM.Element.ScrollIntoView(CssUI.DOM.ScrollIntoViewOptions)">
            <summary>
            Ensures this element is visible by scrolling any of its containing elements required such that it is shown.
            </summary>
        </member>
        <member name="M:CssUI.DOM.Element.Scroll(CssUI.DOM.ScrollToOptions)">
            <summary>
            See: <see cref="M:CssUI.DOM.Element.ScrollTo(CssUI.DOM.ScrollToOptions)"/>
            </summary>
        </member>
        <member name="M:CssUI.DOM.Element.Scroll(System.Double,System.Double)">
            <summary>
            See: <see cref="M:CssUI.DOM.Element.ScrollTo(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:CssUI.DOM.Element.ScrollTo(CssUI.DOM.ScrollToOptions)">
            <summary>
            Scrolls this elements scrollbox to the given position
            </summary>
        </member>
        <member name="M:CssUI.DOM.Element.ScrollTo(System.Double,System.Double)">
            <summary>
            Scrolls this elements scrollbox to the given position
            </summary>
            <param name="x">X-Coordinate position to scroll to</param>
            <param name="y">Y-Coordinate position to scroll to</param>
        </member>
        <member name="M:CssUI.DOM.Element.ScrollBy(CssUI.DOM.ScrollToOptions)">
            <summary>
            Scrolls this elements contents by a given relative ammount
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:CssUI.DOM.Element.ScrollBy(System.Double,System.Double)">
            <summary>
            Scrolls this elements contents by a given relative ammount
            </summary>
        </member>
        <member name="T:CssUI.DOM.FocusableArea">
            <summary>
            Represents an area within a document that can be focused
            </summary>
        </member>
        <member name="F:CssUI.DOM.FocusableArea.DOMAnchor">
            <summary>
            Each focusable area has a DOM anchor, which is a Node object that represents the position of the focusable area in the DOM. 
            (When the focusable area is itself a Node, it is its own DOM anchor.) 
            The DOM anchor is used in some APIs as a substitute for the focusable area when there is no other DOM object to represent the focusable area.
            </summary>
        </member>
        <member name="M:CssUI.DOM.FocusableArea.Is_Focusable(CssUI.DOM.Events.EventTarget)">
            <summary>
            Returns <c>True</c> if the given <paramref name="target"/> is a valid focusable area
            </summary>
        </member>
        <member name="T:CssUI.DOM.Nodes.Node">
            <summary>
            </summary>
        </member>
        <member name="P:CssUI.DOM.Nodes.Node.isAssigned">
            <summary>
            Returns whether this node has been assigned a slot
            </summary>
        </member>
        <member name="P:CssUI.DOM.Nodes.Node.isConnected">
            <summary>
            Returns true if node is connected to a document and false otherwise.
            </summary>
            https://dom.spec.whatwg.org/#connected
        </member>
        <member name="P:CssUI.DOM.Nodes.Node.index">
            <summary>
            The index of this node within it's parent nodes child list
            </summary>
            Note: The index for nodes is now automatically assigned and updated by the ChildNodeList class
        </member>
        <member name="P:CssUI.DOM.Nodes.Node.Box">
            <summary>
            The layout box for this element
            </summary>
        </member>
        <member name="M:CssUI.DOM.Nodes.Node.Propagate_Flag(CssUI.DOM.Nodes.ENodeFlags,System.Boolean)">
            <summary>
            Sets the given flags on all ancestors ending at the first ancestor which already has all said flags or the root of the tree
            </summary>
            <param name="Flags">Flags to set on each node</param>
            <param name="exclude_self"></param>
        </member>
        <member name="M:CssUI.DOM.Nodes.Node.Unpropagate_Flag(CssUI.DOM.Nodes.ENodeFlags,CssUI.DOM.Nodes.ENodeFlags,System.Boolean)">
            <summary>
            Clears the given flags on all ancestors ending at the first ancestor which has any of the <paramref name="StopFlags"/> flags or at the root of the tree
            </summary>
            <param name="Flags">Flags to clear from each node</param>
            <param name="StopFlags">Flags which will cause propagation to end</param>
            <param name="exclude_self"></param>
        </member>
        <member name="M:CssUI.DOM.Nodes.Node.getRootNode(CssUI.DOM.GetRootNodeOptions)">
            <summary>
            Returns node’s root.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Nodes.Node.hasChildNodes">
            <summary>
            Returns whether node has children.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Nodes.Node.contains(CssUI.DOM.Nodes.Node)">
            <summary>
            Returns true if <paramref name="other"/> is an inclusive descendant of this node, and false otherwise.
            </summary>
        </member>
        <member name="M:CssUI.DOM.Nodes.Node.insertFirst(CssUI.DOM.Nodes.Node)">
            <summary>
            Inserts the given node at the front of this nodes children
            </summary>
            <param name="newNode"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Nodes.Node.insertBefore(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node)">
            <summary>
            Inserts the given node into this nodes children infront of <paramref name="before"/>
            </summary>
            <param name="newNode"></param>
            <param name="before"></param>
            <returns></returns>
        </member>
        <member name="P:CssUI.DOM.Nodes.Node.isRoot">
            <summary>
            Returns <c>True</c> is the node is the root of its node-tree.
            </summary>
        </member>
        <member name="F:CssUI.DOM.Nodes.Node.isInert">
            <summary>
            A node (in particular elements and text nodes) can be marked as inert. 
            When a node is inert, then the user agent must act as if the node was absent for the purposes of targeting user interaction events, 
            may ignore the node for the purposes of text search user interfaces (commonly known as "find in page"), 
            and may prevent the user from selecting text in that node. User agents should allow the user to override the restrictions on search and text selection, however.
            </summary>
        </member>
        <member name="M:CssUI.DOM.Nodes.Node.Run_child_text_node_change_steps(CssUI.DOM.Nodes.Node)">
            <summary>
            Runs the W3C specification defined steps on a given parent node for when a child <see cref="T:CssUI.DOM.Text"/> node changes
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:CssUI.DOM.Nodes.Node.Dom_insert_node_into_parent_before(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node,System.Boolean)">
            <summary>
            Inserts the given <paramref name="node"/> into <paramref name="parent"/> before the given <paramref name="child"/>
            </summary>
            <param name="node"></param>
            <param name="parent"></param>
            <param name="child"></param>
            <param name="suppress_observers"></param>
        </member>
        <member name="M:CssUI.DOM.Nodes.Node.Dom_replace_node_within_parent(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node)">
            <summary>
            Replaces a specified node within a parent with a new one
            </summary>
            <param name="node">The new node being inserted</param>
            <param name="parent">Parent node which the new node will be inserted into</param>
            <param name="child">The child node to replace</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Nodes.Node.Dom_replace_all_within_node(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node)">
            <summary>
            Removes all children within a parent element replacing them with the specified node.
            </summary>
            <param name="node">The node which will replace all others</param>
            <param name="parent">The parent node whose children are being replaced</param>
        </member>
        <member name="M:CssUI.DOM.Nodes.Node.Dom_ensure_pre_insertion_validity(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node)">
            <summary>
            Ensures the given <paramref name="node"/>, <paramref name="parent"/>, and <paramref name="child"/> are valid types for insertion
            </summary>
            <param name="node">Node being inserted</param>
            <param name="parent">Parent node which is being inserted into</param>
            <param name="child">Child node being used as a reference point for insertion</param>
        </member>
        <member name="M:CssUI.DOM.Nodes.Node.Dom_pre_insert_node(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node)">
            <summary>
            Inserts a given <paramref name="node"/> into the given <paramref name="parent"/> before the given <paramref name="child"/>
            Validating the types of all parameters before executing the operation.
            </summary>
            <param name="node">Node being inserted</param>
            <param name="parent">Parent node which is being inserted into</param>
            <param name="child">Child node being used as a reference point for insertion</param>
        </member>
        <member name="M:CssUI.DOM.Nodes.Node.Dom_pre_remove_node(CssUI.DOM.Nodes.Node,CssUI.DOM.Nodes.Node)">
            <summary>
            Validates and then removes the given child from the given parent.
            </summary>
            <param name="child">Node to remove</param>
            <param name="parent">Parent to remove node from</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Nodes.Node.Dom_convert_nodes_into_node(CssUI.DOM.Document,System.Object[])">
            <summary>
            Takes multiple nodes and merges them into one, returning the resulting node
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Nodes.Node.CopyTo(CssUI.DOM.Nodes.Node@,System.Boolean)">
            <summary>
            Whenever any node or element is cloned, this function is called internally such that derived classes may populate the newly cloned instance with any required data such that it would be a perfect copy
            </summary>
            <param name="newNode">The node to copy data too</param>
            <param name="deep">Whether to also copy all child nodes</param>
        </member>
        <member name="F:CssUI.DOM.Nodes.ENodeFlags.NeedsReflow">
            <summary>
            This node needs to have it's layout-box reflowed
            </summary>
        </member>
        <member name="F:CssUI.DOM.Nodes.ENodeFlags.ChildNeedsReflow">
            <summary>
            Some descendent of this node needs to have its layout-box reflowed
            </summary>
        </member>
        <member name="F:CssUI.DOM.Nodes.ENodeFlags.NeedsBoxUpdate">
            <summary>
            This node needs to have it's layout-box updated
            </summary>
        </member>
        <member name="F:CssUI.DOM.Nodes.ENodeFlags.ChildNeedsBoxUpdate">
            <summary>
            Some descendent of this node needs to have its layout-box updated
            </summary>
        </member>
        <member name="F:CssUI.DOM.Nodes.ENodeFlags.NeedsStyleUpdate">
            <summary>
            This node needs to have it's style updated
            </summary>
        </member>
        <member name="F:CssUI.DOM.Nodes.ENodeFlags.ChildNeedsStyleUpdate">
            <summary>
            Some descendent of this node needs to have it's style updated
            </summary>
        </member>
        <member name="F:CssUI.DOM.Nodes.ENodeFlags.DirectChildNeedsStyleUpdate">
            <summary>
            An immediate descendent of this node needs to have it's style updated
            </summary>
        </member>
        <member name="F:CssUI.DOM.Nodes.ENodeFlags.DescendentHasFocus">
            <summary>
            Some descendent of this node currently has input focus
            </summary>
        </member>
        <member name="P:CssUI.DOM.Nodes.ISlot.Assigned">
            <summary>
            List of associated slottables
            </summary>
        </member>
        <member name="M:CssUI.DOM.Nodes.ISlot.assignedNodes(CssUI.DOM.AssignedNodesOptions)">
            <summary>
            Returns slot's assigned nodes, if any, and slot's children otherwise, and does the same for any slot elements encountered therein, recursively, until there are no slot elements left.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Nodes.ISlot.assignedElements(CssUI.DOM.AssignedNodesOptions)">
            <summary>
            Returns slot's assigned nodes, limited to elements.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.ParentNode.querySelector(System.String)">
            <summary>
            Returns the first element that is a descendant of node that matches selectors.
            </summary>
            <param name="selectors"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.ParentNode.querySelectorAll(System.String)">
            <summary>
            Returns all element descendants of node that match selectors.
            </summary>
            <param name="selectors"></param>
            <returns></returns>
        </member>
        <member name="P:CssUI.DOM.Text.wholeText">
            <summary>
            Returns the combined data of all direct Text node siblings.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Text.is_expressly_inert">
            <summary>
            A node (in particular elements and text nodes) can be marked as inert. 
            When a node is inert, then the user agent must act as if the node was absent for the purposes of targeting user interaction events, 
            may ignore the node for the purposes of text search user interfaces (commonly known as "find in page"), 
            and may prevent the user from selecting text in that node. User agents should allow the user to override the restrictions on search and text selection, however.
            </summary>
        </member>
        <member name="M:CssUI.DOM.Text.get_contiguous_text_nodes(CssUI.DOM.Text@,System.Boolean)">
            <summary>
            Returns all of the directly adjacent <see cref="T:CssUI.DOM.Text"/> nodes to the specified node
            </summary>
            <param name="node">The text-node to start from</param>
            <param name="exclude_self">If true the specified node will be left out of the returned list</param>
            <returns></returns>
        </member>
        <member name="P:CssUI.DOM.NodeList`1.length">
            <summary>
            Returns the number of nodes in the collection.
            </summary>
        </member>
        <member name="P:CssUI.DOM.NodeList`1.Item(System.Int32)">
            <summary>
            Returns the node with index index from the collection. The nodes are sorted in tree order.
            </summary>
        </member>
        <member name="T:CssUI.DOM.Enums.EAttributeFlags">
            <summary>
            For future use
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.EAttributeFlags.Inherited">
            <summary>
            This attribute can inherit its value from an ancestor element
            </summary>
        </member>
        <member name="T:CssUI.DOM.Enums.EAttributeType">
            <summary>
            Specifies a DOM element attribute type, which determines what kind of string value formats are allowed to be set for it.
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.EAttributeType.String">
            <summary>
            Any string is valid
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.EAttributeType.Boolean">
            <summary>
            A number of attributes are boolean attributes. The presence of a boolean attribute on an element represents the true value, and the absence of the attribute represents the false value.
            If the attribute is present, its value must either be the empty string or a value that is an ASCII case-insensitive match for the attribute's canonical name, with no leading or trailing whitespace.
            </summary>
            Docs: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes
        </member>
        <member name="F:CssUI.DOM.Enums.EAttributeType.Enumerated">
            <summary>
            Enumerated attributes may only be assigned a specific set of keywords with special meaning
            </summary>
            Docs: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#keywords-and-enumerated-attributes
        </member>
        <member name="F:CssUI.DOM.Enums.EAttributeType.Integer">
            <summary>
            A string is a valid integer if it consists of one or more ASCII digits, optionally prefixed with a U+002D HYPHEN-MINUS character (-).
            </summary>
            Docs: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#signed-integers
        </member>
        <member name="F:CssUI.DOM.Enums.EAttributeType.NonNegative_Integer">
            <summary>
            A string is a valid non-negative integer if it consists of one or more ASCII digits.
            </summary>
            Docs: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#non-negative-integers
        </member>
        <member name="F:CssUI.DOM.Enums.EAttributeType.FloatingPoint">
            <summary>
            A string is a valid floating-point number if it consists of only an optional hypen(-), a series of digits, an optional period(.), followed by a series of digits
            </summary>
            Docs: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#floating-point-numbers
        </member>
        <member name="F:CssUI.DOM.Enums.EAttributeType.Length">
            <summary>
            A length is a floating point number greater than or equal to 0.0
            </summary>
            Docs: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#percentages-and-dimensions
        </member>
        <member name="F:CssUI.DOM.Enums.EAttributeType.Percentage">
            <summary>
            A percentage is a floating point number greater than or equal to 0.0 followed by a percent sign (%)
            </summary>
            Docs: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#percentages-and-dimensions
        </member>
        <member name="F:CssUI.DOM.Enums.EAttributeType.NonZero_Length">
            <summary>
            A non-zero length is a floating point number greater than 0.0
            </summary>
            Docs: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#non-zero-percentages-and-lengths
        </member>
        <member name="F:CssUI.DOM.Enums.EAttributeType.NonZero_Percentage">
            <summary>
            A non-zero percentage is a floating point number greater than 0.0 followed by a percent sign(%)
            </summary>
            Docs: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#non-zero-percentages-and-lengths
        </member>
        <member name="F:CssUI.DOM.Enums.EAttributeType.Color">
            <summary>
            A simple color consists of three 8-bit numbers in the range 0..255, representing the red, green, and blue components of the color respectively, in the sRGB color space. [SRGB]
            </summary>
            Docs: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#colours
        </member>
        <member name="F:CssUI.DOM.Enums.EAttributeType.Time">
            <summary>
            A time consists of a specific time with no time-zone information, consisting of an hour, a minute, a second, and a fraction of a second.
            </summary>
            Docs: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#times
        </member>
        <member name="F:CssUI.DOM.Enums.EAttributeType.Date">
            <summary>
            A date consists of a specific proleptic-Gregorian date with no time-zone information, consisting of a year, a month, and a day. [GREGORIAN]
            </summary>
            Docs: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#dates
        </member>
        <member name="F:CssUI.DOM.Enums.EAttributeType.Duration">
            <summary>
            A duration consists of a number of seconds.
            </summary>
            Docs: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#durations
        </member>
        <member name="F:CssUI.DOM.Enums.EAttributeType.KeyCombo">
            <summary>
            KeyCombination attributes specify a combination of keypresses as a text string in a format defined in the HTML standards
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.EDocumentPosition.DISCONNECTED">
            <summary>
            Set when node and other are not in the same tree.
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.EDocumentPosition.PRECEDING">
            <summary>
            Set when other is preceding node.
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.EDocumentPosition.FOLLOWING">
            <summary>
            Set when other is following node.
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.EDocumentPosition.CONTAINS">
            <summary>
            Set when other is an ancestor of node.
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.EDocumentPosition.CONTAINED_BY">
            <summary>
            Set when other is a descendant of node.
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.EDocumentPosition.IMPLEMENTATION_SPECIFIC">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.EMutationType.Attributes">
            <summary>
            Mutation to node attributes
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.EMutationType.CharacterData">
            <summary>
            Mutation to CharacterData type node
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.EMutationType.ChildList">
            <summary>
            Mutation to tree of nodes
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.ENodeFilterResult.FILTER_ACCEPT">
            <summary>
            Indicates a given value is valid and matches a particular filtering criteria
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.ENodeFilterResult.FILTER_REJECT">
            <summary>
            Indicates a given value is bad and not only does it not match the filtering criteria and that the filtering process should not continue
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.ENodeFilterResult.FILTER_SKIP">
            <summary>
            Indicates a given value is bad and does not match the filtering criteria and that the filtering process continue
            </summary>
        </member>
        <member name="T:CssUI.DOM.Enums.EQuirksMode">
            <summary>
            Describes the <see cref="T:CssUI.DOM.Document"/>s quirks mode.
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.EQuirksMode.Quirks">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.EQuirksMode.NoQuirks">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.EQuirksMode.LimitedQuirks">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.EScrollLogicalPosition.Start">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.EScrollLogicalPosition.Center">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.EScrollLogicalPosition.End">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.DOM.Enums.EScrollLogicalPosition.Nearest">
            <summary>
            
            </summary>
        </member>
        <member name="T:CssUI.DOM.EAttributeName">
            <summary>
            List of all common HTML attribute names
            </summary>
        </member>
        <member name="F:CssUI.DOM.EAttributeName.ItemProp">
            <summary>
            Every HTML element may have an itemprop attribute specified, if doing so adds one or more properties to one or more items (as defined below).
            <para>ReadMore: https://html.spec.whatwg.org/multipage/microdata.html#names:-the-itemprop-attribute</para>
            </summary>
        </member>
        <member name="F:CssUI.DOM.EDir.Ltr">
            <summary>
            Indicates that the contents of the element are explicitly directionally isolated left-to-right text.
            </summary>
        </member>
        <member name="F:CssUI.DOM.EDir.Rtl">
            <summary>
            Indicates that the contents of the element are explicitly directionally isolated right-to-left text.
            </summary>
        </member>
        <member name="F:CssUI.DOM.EDir.Auto">
            <summary>
            Indicates that the contents of the element are explicitly directionally isolated text, but that the direction is to be determined programmatically using the contents of the element
            </summary>
        </member>
        <member name="F:CssUI.DOM.EDirName.Ltr">
            <summary>
            Indicates that the contents of the element are explicitly directionally isolated left-to-right text.
            </summary>
        </member>
        <member name="F:CssUI.DOM.EDirName.Rtl">
            <summary>
            Indicates that the contents of the element are explicitly directionally isolated right-to-left text.
            </summary>
        </member>
        <member name="F:CssUI.DOM.EMimeType.UrlEncoded">
            <summary>
            </summary>
        </member>
        <member name="F:CssUI.DOM.EMimeType.FormData">
            <summary>
            </summary>
        </member>
        <member name="F:CssUI.DOM.EMimeType.Plain">
            <summary>
            </summary>
        </member>
        <member name="F:CssUI.DOM.EMimeGroup.Image">
            <summary>
            An image MIME type is a MIME type whose type is "image".
            </summary>
        </member>
        <member name="F:CssUI.DOM.EMimeGroup.Audio">
            <summary>
            An audio MIME type is any MIME type whose type is "audio" or whose essence is "application/ogg".
            </summary>
        </member>
        <member name="F:CssUI.DOM.EMimeGroup.Video">
            <summary>
            An video MIME type is any MIME type whose type is "video"
            </summary>
        </member>
        <member name="F:CssUI.DOM.EMimeGroup.Font">
            <summary>
            A font MIME type is any MIME type whose type is "font", or whose essence is one of the following: [RFC8081]
            <para>
            application/font-cff,
            application/font-off,
            application/font-sfnt,
            application/font-ttf,
            application/font-woff,
            application/vnd.ms-fontobject,
            application/vnd.ms-opentype,
            </para>
            </summary>
        </member>
        <member name="F:CssUI.DOM.EMimeGroup.Zip">
            <summary>
            A ZIP-based MIME type is any MIME type whose subtype ends in "+zip" or whose essence is one of the following:
            <para>
            application/zip
            </para>
            </summary>
        </member>
        <member name="F:CssUI.DOM.EMimeGroup.Archive">
            <summary>
            An archive MIME type is any MIME type whose essence is one of the following:
            <para>
            application/x-rar-compressed,
            application/zip,
            application/x-gzip,
            </para>
            </summary>
        </member>
        <member name="F:CssUI.DOM.EMimeGroup.XML">
            <summary>
            An XML MIME type is any MIME type whose subtype ends in "+xml" or whose essence is "text/xml" or "application/xml". [RFC7303]
            </summary>
        </member>
        <member name="F:CssUI.DOM.EMimeGroup.HTML">
            <summary>
            An HTML MIME type is any MIME type whose essence is "text/html".
            </summary>
        </member>
        <member name="F:CssUI.DOM.EMimeGroup.Scriptable">
            <summary>
            A scriptable MIME type is an XML MIME type, HTML MIME type, or any MIME type whose essence is "application/pdf".
            </summary>
        </member>
        <member name="F:CssUI.DOM.EMimeGroup.Javascript">
            <summary>
            A JavaScript MIME type is any MIME type whose essence is one of the following:
            <para>
            application/ecmascript,
            application/javascript,
            application/x-ecmascript,
            application/x-javascript,
            text/ecmascript,
            text/javascript,
            text/javascript1.0,
            text/javascript1.1,
            text/javascript1.2,
            text/javascript1.3,
            text/javascript1.4,
            text/javascript1.5,
            text/jscript,
            text/livescript,
            text/x-ecmascript,
            text/x-javascript,
            </para>
            </summary>
        </member>
        <member name="F:CssUI.DOM.EMimeGroup.JSON">
            <summary>
            A JSON MIME type is any MIME type whose subtype ends in "+json" or whose essence is "application/json" or "text/json".
            </summary>
        </member>
        <member name="F:CssUI.DOM.ESelectionMode.Select">
            <summary>
            Selects the newly inserted text.
            </summary>
        </member>
        <member name="F:CssUI.DOM.ESelectionMode.Start">
            <summary>
            Moves the selection to just before the inserted text.
            </summary>
        </member>
        <member name="F:CssUI.DOM.ESelectionMode.End">
            <summary>
            Moves the selection to just after the selected text.
            </summary>
        </member>
        <member name="F:CssUI.DOM.ESelectionMode.Preserve">
            <summary>
            Attempts to preserve the selection. This is the default.
            </summary>
        </member>
        <member name="T:CssUI.DOM.Events.EventHandler">
            <summary>
            Acts as a non-capturing event listener
            </summary>
            <param name="event"></param>
            <returns></returns>
        </member>
        <member name="T:CssUI.DOM.Events.DomCancellableEvent`1">
            <summary>
            Allows event receivers to prevent elements from responding to certain events.
            </summary>
            <typeparam name="Ty"></typeparam>
        </member>
        <member name="F:CssUI.DOM.Events.DomCancellableEvent`1.Cancel">
            <summary>
            If True then the element will not act on this event.
            </summary>
        </member>
        <member name="F:CssUI.DOM.Events.Event.type">
            <summary>
            Returns the type of event, e.g. "click", "hashchange", or "submit".
            </summary>
        </member>
        <member name="F:CssUI.DOM.Events.Event.bubbles">
            <summary>
            Returns true or false depending on how event was initialized. True if event goes through its target’s ancestors in reverse tree order, and false otherwise.
            </summary>
        </member>
        <member name="F:CssUI.DOM.Events.Event.cancelable">
            <summary>
            Returns true or false depending on how event was initialized. Its return value does not always carry meaning, but true can indicate that part of the operation during which event was dispatched, can be canceled by invoking the preventDefault() method.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.Event.target">
            <summary>
            Returns the object to which event is dispatched (its target).
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.Event.relatedTarget">
            <summary>
            Returns the object whose event listener’s callback is currently being invoked.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.Event.eventPhase">
            <summary>
            Returns the event’s phase, which is one of NONE, CAPTURING_PHASE, AT_TARGET, and BUBBLING_PHASE.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.Event.isTrusted">
            <summary>
            Returns true if event was dispatched by the user agent, and false otherwise.
            For the purposes of CssUI this is meaningless but could atleast still differentiate between system events versus custom ones or something
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.Event.timeStamp">
            <summary>
            Returns the event’s timestamp as the number of milliseconds measured relative to the time origin.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.Event.composed">
            <summary>
            Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.Event.defaultPrevented">
            <summary>
            Returns true if preventDefault() was invoked successfully to indicate cancelation, and false otherwise.
            </summary>
        </member>
        <member name="M:CssUI.DOM.Events.Event.#ctor(CssUI.DOM.Events.EventName,CssUI.DOM.Events.EventInit)">
            <summary>
            Returns a new event whose type attribute value is set to type. The eventInitDict argument allows for setting the bubbles and cancelable attributes via object members of the same name.
            </summary>
            <param name="type"></param>
            <param name="eventInitDict">allows for setting the bubbles and cancelable attributes via object members of the same name</param>
        </member>
        <member name="M:CssUI.DOM.Events.Event.run_constructing_steps">
            <summary>
            This construct can be used by Event subclasses that have a more complex structure than a simple 1:1 mapping between their initializing dictionary members and IDL attributes.
            </summary>
        </member>
        <member name="M:CssUI.DOM.Events.Event.composedPath">
            <summary>
            Returns the invocation target objects of event’s path (objects on which listeners will be invoked), except for any nodes in shadow trees of which the shadow root’s mode is "closed" that are not reachable from event’s currentTarget.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Events.Event.preventDefault">
            <summary>
            If invoked when the cancelable attribute value is true, and while executing a listener for the event with passive set to false, signals to the operation that caused event to be dispatched that it needs to be canceled.
            </summary>
        </member>
        <member name="M:CssUI.DOM.Events.Event.stopPropagation">
            <summary>
            When dispatched in a tree, invoking this method prevents event from reaching any objects other than the current object.
            </summary>
        </member>
        <member name="M:CssUI.DOM.Events.Event.stopImmediatePropagation">
            <summary>
            Invoking this method prevents event from reaching any registered event listeners after the current one finishes running and, when dispatched in a tree, also prevents event from reaching any other objects.
            </summary>
        </member>
        <member name="T:CssUI.DOM.Events.EventTarget">
            <summary>
            An EventTarget object represents a target to which an event can be dispatched when something has occurred.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.EventTarget.handlerMap">
            <summary>
            Map of <see cref="T:CssUI.DOM.Events.EEventName"/>s to a list of their <see cref="T:CssUI.DOM.Events.EventHandler"/>s
            </summary>
            Docs: https://html.spec.whatwg.org/multipage/webappapis.html#event-handler-map
        </member>
        <member name="M:CssUI.DOM.Events.EventTarget.Find_Listener(CssUI.DOM.Events.EventName,CssUI.DOM.Events.EventCallback,System.Boolean)">
            <summary>
            Finds a specific listener from our list matching the given values
            </summary>
            <param name="type"></param>
            <param name="callback"></param>
            <param name="capture"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Events.EventTarget.addEventListener(CssUI.DOM.Events.EventName,CssUI.DOM.Events.EventCallback,CssUI.DOM.Events.AddEventListenerOptions)">
            <summary>
            Adds an event listener to this object.
            </summary>
            <param name="eventName">Name of the event to listen for</param>
            <param name="callback">Callback that fires when the event is triggered.</param>
            <param name="options"></param>
        </member>
        <member name="M:CssUI.DOM.Events.EventTarget.removeEventListener(CssUI.DOM.Events.EventName,CssUI.DOM.Events.EventCallback,CssUI.DOM.Events.EventListenerOptions)">
            <summary>
            Removes an event listener from this object.
            </summary>
            <param name="eventName">Name of the event</param>
            <param name="callback">Callback that fires when the event is triggered.</param>
            <param name="options"></param>
        </member>
        <member name="M:CssUI.DOM.Events.EventTarget.dispatchEvent(CssUI.DOM.Events.Event)">
            <summary>
            Dispatches a synthetic event event to this object and returns true if either event’s cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.
            </summary>
            <param name="Event"></param>
            <returns></returns>
        </member>
        <member name="F:CssUI.DOM.Events.FocusEvent.relatedTarget">
            <summary>
            Used to identify a secondary EventTarget related to a Focus event, depending on the type of event.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.KeyboardEvent.key">
            <summary>
            key holds the value corresponding to the key pressed.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.KeyboardEvent.code">
            <summary>
            Identifies the physical key being pressed. 
            The value is not affected by the current keyboard layout or modifier state, so a particular key will always return the same value.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.KeyboardEvent.location">
            <summary>
            The location attribute contains an indication of the logical location of the key on the device.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.KeyboardEvent.ctrlKey">
            <summary>
            true if the Control (control) key modifier was active.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.KeyboardEvent.shiftKey">
            <summary>
            true if the shift (Shift) key modifier was active.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.KeyboardEvent.altKey">
            <summary>
            true if the Alt (alternative) (or "Option") key modifier was active.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.KeyboardEvent.metaKey">
            <summary>
            true if the meta (Meta) key modifier was active.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.KeyboardEvent.repeat">
            <summary>
            true if the key has been pressed in a sustained manner.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.KeyboardEvent.isComposing">
            <summary>
            true if the key event occurs as part of a composition session, i.e., after a compositionstart event and before the corresponding compositionend event.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.MouseEvent.screenX">
            <summary>
            The horizontal coordinate at which the event occurred relative to the origin of the screen coordinate system.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.MouseEvent.screenY">
            <summary>
            The vertical coordinate at which the event occurred relative to the origin of the screen coordinate system.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.MouseEvent.clientX">
            <summary>
            The horizontal coordinate at which the event occurred relative to the viewport associated with the event.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.MouseEvent.clientY">
            <summary>
            The vertical coordinate at which the event occurred relative to the viewport associated with the event.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.MouseEvent.ctrlKey">
            <summary>
            Refer to the KeyboardEvent's ctrlKey attribute.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.MouseEvent.shiftKey">
            <summary>
            Refer to the KeyboardEvent's shiftKey attribute.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.MouseEvent.altKey">
            <summary>
            Refer to the KeyboardEvent's altKey attribute.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.MouseEvent.metaKey">
            <summary>
            Refer to the KeyboardEvent's metaKey attribute.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.MouseEvent.button">
            <summary>
            During mouse events caused by the depression or release of a mouse button, button MUST be used to indicate which pointer device button changed state.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.MouseEvent.relatedTarget">
            <summary>
            Used to identify a secondary EventTarget related to a UI event, depending on the type of event.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.UIEvent.View">
            <summary>
            The view attribute identifies the Window from which the event was generated.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Events.UIEvent.Detail">
            <summary>
            Specifies some detail information about the Event, depending on the type of event.
            </summary>
        </member>
        <member name="F:CssUI.DOM.Events.EEventName.CUSTOM">
            <summary>
            Represents all custom (end-user specified) event values
            </summary>
        </member>
        <member name="F:CssUI.DOM.Events.EEventPhase.NONE">
            <summary>
            Events not currently dispatched are in this phase.
            </summary>
        </member>
        <member name="F:CssUI.DOM.Events.EEventPhase.CAPTURING_PHASE">
            <summary>
            When an event is dispatched to an object that participates in a tree it will be in this phase before it reaches its target.
            </summary>
        </member>
        <member name="F:CssUI.DOM.Events.EEventPhase.AT_TARGET">
            <summary>
            When an event is dispatched it will be in this phase on its target.
            </summary>
        </member>
        <member name="F:CssUI.DOM.Events.EEventPhase.BUBBLING_PHASE">
            <summary>
            When an event is dispatched to an object that participates in a tree it will be in this phase after it reaches its target.
            </summary>
        </member>
        <member name="F:CssUI.DOM.Events.EKeyLocation.STANDARD">
            <summary>
            The key activation MUST NOT be distinguished as the left or right version of the key, and (other than the NumLock key) 
            did not originate from the numeric keypad (or did not originate with a virtual key corresponding to the numeric keypad).
            </summary>
        </member>
        <member name="F:CssUI.DOM.Events.EKeyLocation.LEFT">
            <summary>
            The key activated originated from the left key location (when there is more than one possible location for this key).
            </summary>
        </member>
        <member name="F:CssUI.DOM.Events.EKeyLocation.RIGHT">
            <summary>
            The key activation originated from the right key location (when there is more than one possible location for this key).
            </summary>
        </member>
        <member name="F:CssUI.DOM.Events.EKeyLocation.NUMPAD">
            <summary>
            The key activation originated on the numeric keypad or with a virtual key corresponding to the numeric keypad (when there is more than one possible location for this key). 
            Note that the NumLock key should always be encoded with a location of DOM_KEY_LOCATION_STANDARD.
            </summary>
        </member>
        <member name="M:CssUI.DOM.Events.MouseEventInit.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,CssUI.Devices.EMouseButton,CssUI.Devices.EMouseButtonFlags,CssUI.DOM.Events.EventTarget)">
             <summary>
            
             </summary>
             <param name="screenX">x-coordinate of the position where the event occurred relative to the origin of the <see cref="T:CssUI.DOM.VisualViewport"/>.</param>
             <param name="screenY">y-coordinate of the position where the event occurred relative to the origin of the <see cref="T:CssUI.DOM.VisualViewport"/>.</param>
             <param name="clientX">x-coordinate of the position where the event occurred relative to the origin of the <see cref="T:CssUI.DOM.Viewport"/>.</param>
             <param name="clientY">y-coordinate of the position where the event occurred relative to the origin of the <see cref="T:CssUI.DOM.Viewport"/>.</param>
             <param name="button"></param>
             <param name="buttons"></param>
             <param name="relatedTarget"></param>
        </member>
        <member name="T:CssUI.DOM.Events.EventName">
            <summary>
            Implements an efficient way of specifying events within the DOM without performing costly string analysis literally ALL THE TIME.
            </summary>
        </member>
        <member name="F:CssUI.DOM.Events.EventName.Value">
            <summary>
            The value for this object which gets compared against
            </summary>
        </member>
        <member name="M:CssUI.DOM.Events.EventName.#ctor(CssUI.DOM.Events.EEventName)">
            <summary>
            Creates an event specifier from the given <see cref="T:CssUI.DOM.Events.EEventName"/> value.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CssUI.DOM.Events.EventName.#ctor(System.String)">
            <summary>
            Creates an event specifier from a custom event name.
            </summary>
            <param name="CustomName"></param>
        </member>
        <member name="T:CssUI.DOM.Geometry.DOMMatrix">
            <summary>
            Represent a mathematical matrix
            </summary>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrix.#ctor">
            <summary>
            Creates a new identity matrix
            </summary>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrix.identitySelf">
            <summary>
            Sets this matrix to the identity matrix and returns it
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrix.multiplySelf(CssUI.DOM.Geometry.DOMMatrix)">
            <summary>
            Performs a post-multiplication of <paramref name="other"/> against this matrix and returns it.
            </summary>
            <returns>This matrix after <paramref name="other"/> if post-multiplied against it</returns>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrix.preMultiplySelf(CssUI.DOM.Geometry.DOMMatrix)">
            <summary>
            Performs a pre-multiplication of <paramref name="other"/> against this matrix and returns it.
            </summary>
            <returns>This matrix after <paramref name="other"/> if pre-multiplied against it</returns>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrix.translateSelf(System.Double,System.Double,System.Double)">
            <summary>
            Translates this matrix and returns it.
            </summary>
            <param name="tx"></param>
            <param name="ty"></param>
            <param name="tz"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrix.scaleSelf(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Scales this matrix and returns it.
            </summary>
            <param name="scaleX">X-Axis scaling factor</param>
            <param name="scaleY">Y-Axis scaling factor</param>
            <param name="scaleZ">Z-Axis scaling factor</param>
            <param name="originX">X-Axis position to scale around</param>
            <param name="originY">Y-Axis position to scale around</param>
            <param name="originZ">Z-Axis position to scale around</param>
            <returns>This matrix with scaling applied to it</returns>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrix.scale3DSelf(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Scales this matrix and returns it.
            </summary>
            <param name="scale">Scaling factor for all axi</param>
            <param name="originX">X-Axis position to scale around</param>
            <param name="originY">Y-Axis position to scale around</param>
            <param name="originZ">Z-Axis position to scale around</param>
            <returns>This matrix with scaling applied to it</returns>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrix.rotateSelf(System.Double,System.Double,System.Double)">
            <summary>
            Rotates(ZYX) this matrix and returns it.
            </summary>
            <param name="rotX">X-Axis rotation (in degrees)</param>
            <param name="rotY">Y-Axis rotation (in degrees)</param>
            <param name="rotZ">Z-Axis rotation (in degrees)</param>
            <returns>This matrix with rotation applied to it</returns>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrix.rotateFromVectorSelf(System.Double,System.Double)">
            <summary>
            Rotates(Z-Axis) this matrix to face the given vector and returns it
            </summary>
            <param name="x">X-Axis position</param>
            <param name="y">Y-Axis position</param>
            <returns>This matrix with rotation applied to it</returns>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrix.rotateAxisAngleSelf(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Rotates a copy of this matrix around the given axis by <paramref name="alpha"/> degrees.
            </summary>
            <param name="axisX">Axis vector X factor</param>
            <param name="axisY">Axis vector Y factor</param>
            <param name="axisZ">Axis vector Z factor</param>
            <param name="alpha">Degrees of rotation</param>
            <returns>This matrix with rotation applied to it</returns>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrix.skewXSelf(System.Double)">
            <summary>
            Skews this matrix on the X axis and returns it
            </summary>
            <param name="sx">Angle(in degrees) to skew on the x-axis</param>
            <returns>This matrix skewed along the x-axis</returns>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrix.skewYSelf(System.Double)">
            <summary>
            Skews this matrix on the Y axis and returns it
            </summary>
            <param name="sy">Angle(in degrees) to skew on the y-axis</param>
            <returns>This matrix skewed along the y-axis</returns>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrix.invertSelf">
            <summary>
            Inverts this matrix and returns it
            </summary>
            <returns>This matrix inverted</returns>
        </member>
        <member name="T:CssUI.DOM.Geometry.DOMMatrixReadOnly">
            <summary>
            Represents a mathematical matrix.
            </summary>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrixReadOnly.Clone">
            <summary>
            Returns a copy of the matrix.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CssUI.DOM.Geometry.DOMMatrixReadOnly.Translate(System.Double,System.Double,System.Double)" -->
        <member name="M:CssUI.DOM.Geometry.DOMMatrixReadOnly.Scale(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Scales a copy of this matrix and returns it.
            </summary>
            <param name="scaleX">X-Axis scaling factor</param>
            <param name="scaleY">Y-Axis scaling factor</param>
            <param name="scaleZ">Z-Axis scaling factor</param>
            <param name="originX">X-Axis position to scale around</param>
            <param name="originY">Y-Axis position to scale around</param>
            <param name="originZ">Z-Axis position to scale around</param>
            <returns>Copy of this matrix with scaling applied to it</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CssUI.DOM.Geometry.DOMMatrixReadOnly.ScaleNonUniform(System.Double,System.Double)" -->
        <member name="M:CssUI.DOM.Geometry.DOMMatrixReadOnly.Scale3D(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Scales a copy of this matrix and returns it.
            </summary>
            <param name="scaleX">Scaling factor for ALL axi</param>
            <param name="originX">X-Axis position to scale around</param>
            <param name="originY">Y-Axis position to scale around</param>
            <param name="originZ">Z-Axis position to scale around</param>
            <returns>Copy of this matrix with scaling applied to it</returns>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrixReadOnly.Rotate(System.Double,System.Double,System.Double)">
            <summary>
            Rotates(ZYX) a copy of this matrix and returns it
            </summary>
            <param name="rotX">X-Axis rotation (in degrees)</param>
            <param name="rotY">Y-Axis rotation (in degrees)</param>
            <param name="rotZ">Z-Axis rotation (in degrees)</param>
            <returns>A rotated copy of this matrix</returns>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrixReadOnly.RotateFromVector(System.Double,System.Double)">
            <summary>
            Rotates(Z-Axis) a copy of this matrix to face the given vector and returns it
            </summary>
            <param name="x">X-Axis position</param>
            <param name="y">Y-Axis position</param>
            <returns>A rotated copy of this matrix</returns>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrixReadOnly.RotateAxisAngle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Rotates a copy of this matrix around the given axis by <paramref name="alpha"/> degrees.
            </summary>
            <param name="axisX">Axis vector X factor</param>
            <param name="axisY">Axis vector Y factor</param>
            <param name="axisZ">Axis vector Z factor</param>
            <param name="alpha">Degrees of rotation</param>
            <returns>Rotated copy of this matrix</returns>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrixReadOnly.SkewX(System.Double)">
            <summary>
            Skews a copy of this matrix on the X axis and returns it
            </summary>
            <param name="sx">Angle(in degrees) to skew on the x-axis</param>
            <returns>Skewed copy of this matrix</returns>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrixReadOnly.SkewY(System.Double)">
            <summary>
            Skews a copy of this matrix on the Y axis and returns it
            </summary>
            <param name="sy">Angle(in degrees) to skew on the y-axis</param>
            <returns>Skewed copy of this matrix</returns>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrixReadOnly.Multiply(CssUI.DOM.Geometry.DOMMatrix)">
            <summary>
            Post-multiplies a copy of this matrix by <paramref name="other"/> and returns it
            </summary>
            <param name="other">Matrix to multiply by</param>
            <returns>Multiplied copy of this matrix</returns>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrixReadOnly.FlipX">
            <summary>
            Flips a copy of this matrix on the x-axis
            </summary>
            <returns>An x-axis flipped copy of this matrix</returns>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrixReadOnly.FlipY">
            <summary>
            Flips a copy of this matrix on the y-axis
            </summary>
            <returns>An y-axis flipped copy of this matrix</returns>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrixReadOnly.Inverse">
            <summary>
            Inverts a copy of this matrix and returns it
            </summary>
            <returns>Inverse copy of this matrix</returns>
        </member>
        <member name="M:CssUI.DOM.Geometry.DOMMatrixReadOnly.TransformPoint(CssUI.DOM.Geometry.DOMPointInit)">
            <summary>
            Transforms a point by multiplying it against this matrix.
            </summary>
            <param name="Point">Point to transform</param>
            <returns>Transformed point</returns>
        </member>
        <member name="T:CssUI.DOM.Geometry.DOMQuad">
            <summary>
            Represents a quadrilateral.
            </summary>
        </member>
        <member name="T:CssUI.DOM.FileBlob">
            <summary>
            Represents files data as well as its name and the time it was last modified
            </summary>
        </member>
        <member name="T:CssUI.DOM.Mutation.MutationObserver">
            <summary>
            A MutationObserver object can be used to observe mutations to the tree of nodes.
            </summary>
        </member>
        <member name="M:CssUI.DOM.Mutation.MutationObserver.TakeRecords">
            <summary>
            Returns a clone of the record queue, then emptys the queue
            </summary>
            <returns></returns>
        </member>
        <member name="P:CssUI.DOM.Mutation.MutationRecord.type">
            <summary>
            Returns "attributes" if it was an attribute mutation. "characterData" if it was a mutation to a CharacterData node. And "childList" if it was a mutation to the tree of nodes.
            </summary>
        </member>
        <member name="F:CssUI.DOM.Mutation.MutationRecord.previousSibling">
            <summary>
            Return the previous sibling of the added or removed nodes, and null otherwise.
            </summary>
        </member>
        <member name="F:CssUI.DOM.Mutation.MutationRecord.nextSibling">
            <summary>
            Return the next sibling of the added or removed nodes, and null otherwise.
            </summary>
        </member>
        <member name="F:CssUI.DOM.Mutation.MutationRecord.attributeName">
            <summary>
            Returns the local name of the changed attribute, and null otherwise.
            </summary>
        </member>
        <member name="F:CssUI.DOM.Mutation.MutationRecord.oldValue">
            <summary>
            The return value depends on type. For "attributes", it is the value of the changed attribute before the change. For "characterData", it is the data of the changed node before the change. For "childList", it is null.
            </summary>
        </member>
        <member name="T:CssUI.DOM.FilterAttribute">
            <summary>
            Rejects any node which doesnt have an the specified attribute that matches the given value
            </summary>
        </member>
        <member name="F:CssUI.DOM.FilterAttribute.Name">
            <summary>
            Name of the attribute to check
            </summary>
        </member>
        <member name="F:CssUI.DOM.FilterAttribute.Value">
            <summary>
            Value to check the attribute for
            </summary>
        </member>
        <member name="F:CssUI.DOM.FilterAttribute.IsBoolean">
            <summary>
            Whether the attribute should be checked for a boolean status
            </summary>
        </member>
        <member name="M:CssUI.DOM.FilterAttribute.#ctor(CssUI.AtomicName{CssUI.DOM.EAttributeName})">
            <summary>
            Creates a new attribute filter that matches a BOOLEAN attribute
            </summary>
            <param name="Name">Athe attribute to check</param>
        </member>
        <member name="M:CssUI.DOM.FilterAttribute.#ctor(CssUI.AtomicName{CssUI.DOM.EAttributeName},CssUI.DOM.AttributeValue)">
            <summary>
            Creates a new attribute filter that matches a BOOLEAN attribute
            </summary>
            <param name="Name">Athe attribute to check</param>
        </member>
        <member name="T:CssUI.DOM.Traversal.FilterDescendantOf">
            <summary>
            Rejects any nodes which do not descend from the specified Node
            </summary>
        </member>
        <member name="T:CssUI.DOM.Traversal.FilterRangeContains">
            <summary>
            Skips any nodes which are not partially contained in the given range
            </summary>
        </member>
        <member name="T:CssUI.DOM.Traversal.FilterRangePartiallyContains">
            <summary>
            Skips any nodes which are not partially contained in the given range
            </summary>
        </member>
        <member name="T:CssUI.DOM.Traversal.FilterSelectorMatch">
            <summary>
            Rejects any nodes not matching the given CSS Selector
            </summary>
        </member>
        <member name="T:CssUI.DOM.Traversal.FilterShadowIncludingDescendantOf">
            <summary>
            Rejects any nodes which do not descend from the specified Node
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CssUI.DOM.Traversal.RangeDeleteFilter" -->
        <member name="T:CssUI.DOM.FilterElements">
            <summary>
            Rejects any node that isnt an instance of <see cref="T:CssUI.DOM.Element"/>
            </summary>
        </member>
        <member name="T:CssUI.DOM.FilterElementType`1">
            <summary>
            Skips any nodes that are not of the given type
            </summary>
        </member>
        <member name="T:CssUI.DOM.FilterLayoutBoxHitTest">
            <summary>
            Rejects any nodes which do not descend from the specified Node
            </summary>
        </member>
        <member name="T:CssUI.DOM.FilterLocalName">
            <summary>
            Rejects any node whose localName doesnt match
            </summary>
        </member>
        <member name="T:CssUI.DOM.FilterLocalName_Namespace">
            <summary>
            Rejects any node whose localName doesnt match
            </summary>
        </member>
        <member name="T:CssUI.DOM.FilterNamedElement">
            <summary>
            Accepts only HTML elements whose ID attribute matches the given name or whom are in the HTML namespace and whose name attribute matches the given name
            </summary>
        </member>
        <member name="T:CssUI.DOM.FilterNamespace">
            <summary>
            Rejects any node whose NamespaceURI doesnt match
            </summary>
        </member>
        <member name="T:CssUI.DOM.FilterNodeUpdate">
            <summary>
            Rejects any node that isnt flagged for updates
            </summary>
        </member>
        <member name="T:CssUI.DOM.FilterNonInert">
            <summary>
            Accepts any node that is non-inert
            </summary>
        </member>
        <member name="T:CssUI.DOM.FilterNotOneOf">
            <summary>
            Rejects any nodes which do not descend from the specified Node
            </summary>
        </member>
        <member name="T:CssUI.DOM.FilterSlotable">
            <summary>
            Accepts only nodes that implement <see cref="T:CssUI.DOM.Nodes.ISlottable"/>
            </summary>
        </member>
        <member name="T:CssUI.DOM.FilterTagName">
            <summary>
            Rejects any node whose tagName doesnt match
            </summary>
        </member>
        <member name="T:CssUI.DOM.TextNodeFilter">
            <summary>
            Rejects any node that isnt an instance of <see cref="T:CssUI.DOM.Text"/>
            </summary>
        </member>
        <member name="F:CssUI.DOM.ElementCreationOptions.CustomClassName">
            <summary>
            Specifies a custom element class name
            This is called the "is" attribute by the DOM specs.
            </summary>
        </member>
        <member name="T:CssUI.DOM.Range">
            <summary>
            Objects implementing the Range interface are known as live ranges.
            </summary>
        </member>
        <member name="M:CssUI.DOM.Range.PartiallyContains(CssUI.DOM.Nodes.Node)">
            <summary>
            A node is partially contained in a live range if it’s an inclusive ancestor of the live range’s start node but not its end node, or vice versa.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Range.Contains(CssUI.DOM.Nodes.Node)">
            <summary>
            Returns whether a given node is 'contained' within this range according to the W3C specifications
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Range.Get_Boundary_Position(CssUI.DOM.BoundaryPoint,CssUI.DOM.BoundaryPoint)">
            <summary>
            Returns an enum indicating if <paramref name="B"/> if Before, Equal, or After <paramref name="A"/>
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Range.collapse(System.Boolean)">
            <summary>
            Collapses the range so it's start and end points are equal.
            </summary>
            <param name="toStart"></param>
        </member>
        <member name="M:CssUI.DOM.TreeWalker.parentNode">
            <summary>
            Returns the next node in a sequence containing all nodes in the parent chain(in reverse tree order)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.TreeWalker.firstChild">
            <summary>
            Returns the next node in a sequence containing all first-child descendant nodes and the siblings of the bottom-most node(in tree order)
            </summary>
        </member>
        <member name="M:CssUI.DOM.TreeWalker.lastChild">
            <summary>
            Returns the next node in a sequence containing all descendant nodes (in reverse tree order)
            </summary>
        </member>
        <member name="M:CssUI.DOM.TreeWalker.nextSibling">
            <summary>
            Returns the next node in a sequence containing all sibling nodes of the root and their children (in tree order)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.TreeWalker.previousSibling">
            <summary>
            Returns the next node in a sequence containing all sibling nodes of the root and their children (in reverse tree order)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.TreeWalker.previousNode">
            <summary>
            Returns the next node in a sequence containing all ancestor nodes of the root (in reverse tree order)
            </summary>
        </member>
        <member name="M:CssUI.DOM.TreeWalker.nextNode">
            <summary>
            Returns the next node in a sequence containing the complete tree of all descendant nodes from the root (in tree order)
            <para>Basically itterates through the first child of every descendent node until it hits one it doesnt accept, then starts returning the rest of the nodes within the roots tree in order from left-right and from bottom-top</para>
            </summary>
        </member>
        <member name="T:CssUI.DOM.CaretPosition">
            <summary>
             caret position gives the position of a text insertion point indicator. It always has an associated caret node, caret offset, and caret range.
            </summary>
        </member>
        <member name="T:CssUI.DOM.ChildNodeList">
            <summary>
            Manages and allows indexing of a list of child-nodes, updating their previous/next siblings to the correct values
            </summary>
        </member>
        <member name="M:CssUI.DOM.ChildNodeList.Update_Node_Links(System.Int32)">
            <summary>
            Updates the previous and next siblings of the node at <paramref name="index"/> as well as its neighbors
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:CssUI.DOM.DOMHighResTimeStamp">
            <summary>
            The DOMHighResTimeStamp type is used to store a time value in milliseconds, measured relative from the time origin, 
            global monotonic clock, or a time value that represents a duration between two DOMHighResTimeStamp's.
            </summary>
        </member>
        <member name="M:CssUI.DOM.DOMStringMap.delete(System.String)">
            <summary>
            Deletes a named value from the list.
            </summary>
            <param name="Name"></param>
        </member>
        <member name="T:CssUI.DOM.KeyCombination">
            <summary>
            Holds a set of keys for reference as a key combination for keyboard commands
            </summary>
        </member>
        <member name="F:CssUI.DOM.KeyCombination.Keys">
            <summary>
            The combination of keys
            </summary>
        </member>
        <member name="P:CssUI.DOM.KeyCombination.ctrlKey">
            <summary>
            Control (control) key modifier.
            </summary>
        </member>
        <member name="P:CssUI.DOM.KeyCombination.shiftKey">
            <summary>
            shift (Shift) key modifier.
            </summary>
        </member>
        <member name="P:CssUI.DOM.KeyCombination.altKey">
            <summary>
            Alt (alternative) (or "Option") key modifier.
            </summary>
        </member>
        <member name="P:CssUI.DOM.KeyCombination.metaKey">
            <summary>
            meta (Meta) key modifier.
            </summary>
        </member>
        <member name="T:CssUI.DOM.Screen">
            <summary>
            Represents information about the screen of the output device
            This class needs to return values specific to the graphics context that it's window object is being rendered on.
            End users need to inherit from it and wrap their graphics context inside of their inherited class so it can return the correct values
            </summary>
        </member>
        <member name="P:CssUI.DOM.Screen.MediaType">
            <summary>
            Describes the type of medium the document is being displayed on.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Screen.availWidth">
            <summary>
            Available width of the rendering surface of the output device, in CSS pixels.
            <para>This would be the screen / monitor size</para>
            </summary>
        </member>
        <member name="P:CssUI.DOM.Screen.availHeight">
            <summary>
            Available height of the rendering surface of the output device, in CSS pixels.
            <para>This would be the screen / monitor size</para>
            </summary>
        </member>
        <member name="P:CssUI.DOM.Screen.width">
            <summary>
            The width of the output device, in CSS pixels.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Screen.height">
            <summary>
            The height of the output device, in CSS pixels.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Screen.colorDepth">
            <summary>
            The color depth of the current output devices screen
            (*Must* return 24 according to specifications)
            </summary>
        </member>
        <member name="P:CssUI.DOM.Screen.pixelDepth">
            <summary>
            The pixel depth of the current output devices screen
            (*Must* return 24 according to specifications)
            </summary>
        </member>
        <member name="P:CssUI.DOM.Screen.isGrid">
            <summary>
            Return "1" if the current output devices screen is grid based (such as a tty terminal or an lcd phone based display with only one font)
            </summary>
        </member>
        <member name="P:CssUI.DOM.Screen.monochromeDepth">
            <summary>
            The bits per pixel in the monochrome framebuffer of the current output device or 0 if the device is not a monochrome device
            </summary>
        </member>
        <member name="P:CssUI.DOM.Screen.colorIndex">
            <summary>
            The color-index describes the number of entries in the color lookup table of the output device. 
            If the device does not use a color lookup table, the value is zero.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Screen.refreshRate">
            <summary>
            The current output devices refresh rate
            </summary>
        </member>
        <member name="P:CssUI.DOM.Screen.dpi">
            <summary>
            The dpi (dots per inch) of the current output devices screen
            </summary>
        </member>
        <member name="P:CssUI.DOM.ScrollBox.ScrollX">
            <summary>
            Current x-coordinate offset position of this scrollbox
            </summary>
        </member>
        <member name="P:CssUI.DOM.ScrollBox.ScrollY">
            <summary>
            Current y-coordinate offset position of this scrollbox
            </summary>
        </member>
        <member name="P:CssUI.DOM.ScrollBox.IsScrolling">
            <summary>
            If true then the scrollbox has an ongoing smooth scroll operation
            </summary>
        </member>
        <member name="P:CssUI.DOM.ScrollBox.VScrollBar">
            <summary>
            The vertical scroll bar bounds
            </summary>
        </member>
        <member name="P:CssUI.DOM.ScrollBox.HScrollBar">
            <summary>
            The horizontal scroll bar bounds
            </summary>
        </member>
        <member name="P:CssUI.DOM.ScrollBox.Overflow_Block">
            <summary>
            Horizontal overflow direction
            </summary>
        </member>
        <member name="P:CssUI.DOM.ScrollBox.Overflow_Inline">
            <summary>
            Vertical overflow direction
            </summary>
        </member>
        <member name="F:CssUI.DOM.ScrollBox.Smooth_Scroll_Anim_Time">
            <summary>
            Animation time for smooth scrolling
            </summary>
        </member>
        <member name="F:CssUI.DOM.ScrollBox.Smooth_Scroll_Distance">
            <summary>
            The distance from our smooth scroll start position to the end position
            </summary>
        </member>
        <member name="F:CssUI.DOM.ScrollBox.Smooth_Scroll_Target">
            <summary>
            The position this scrollbox should be at when the smooth scroll ends
            </summary>
        </member>
        <member name="M:CssUI.DOM.ScrollBox._smooth_scroll_tick">
            <summary>
            Called by the smooth scroller everytime it ticks
            </summary>
        </member>
        <member name="M:CssUI.DOM.ScrollBox.abort_smooth_scroll">
            <summary>
            Cancels the ongoing smooth scroll (if any) and resets all associated vars
            </summary>
        </member>
        <member name="M:CssUI.DOM.Selection.SetPosition(CssUI.DOM.Nodes.Node,System.Int32)">
            <summary>
            Alias for <see cref="M:CssUI.DOM.Selection.Collapse(CssUI.DOM.Nodes.Node,System.Int32)"/>
            </summary>
            <param name="node"></param>
            <param name="offset"></param>
        </member>
        <member name="M:CssUI.DOM.TextSelection.Collapse">
            <summary>
            Sets the start and end to both be 0
            </summary>
        </member>
        <member name="T:CssUI.DOM.Viewport">
            <summary>
            Represents an area of view.
            </summary>
        </member>
        <member name="T:CssUI.DOM.VisualViewport">
            <summary>
            Represents an area of view.
            </summary>
        </member>
        <member name="P:CssUI.DOM.VisualViewport.Scale">
            <summary>
            Returns the pinch-zoom scaling factor applied to the visual viewport.
            </summary>
        </member>
        <member name="T:CssUI.DOM.Window">
            <summary>
            Among other things, the window funnels events from the operating system to the <see cref="T:CssUI.DOM.Document"/> object
            </summary>
        </member>
        <member name="P:CssUI.DOM.Window.screenX">
            <summary>
            The screenX attribute must return the x-coordinate, relative to the origin of the screen of the output device, of the left of the client window as number of pixels, or zero if there is no such thing.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Window.screenY">
            <summary>
            The screenY attribute must return the y-coordinate, relative to the origin of the screen of the output device, of the top of the client window as number of pixels, or zero if there is no such thing.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Window.outerWidth">
            <summary>
            The outerWidth attribute must return the width of the client window. If there is no client window this attribute must return zero.
            </summary>
        </member>
        <member name="P:CssUI.DOM.Window.outerHeight">
            <summary>
            The outerHeight attribute must return the height of the client window. If there is no client window this attribute must return zero.
            </summary>
        </member>
        <member name="M:CssUI.DOM.Window.Get_Window_Location">
            <summary>
            Returns the location of this window relative to the top, left origin of the desktop
            </summary>
        </member>
        <member name="M:CssUI.DOM.Window.Get_Window_Size">
            <summary>
            Returns the size of this window on the desktop
            </summary>
        </member>
        <member name="M:CssUI.DOM.Window.Set_Window_Location(CssUI.ReadOnlyPoint2i)">
            <summary>
            Sets the location of this window relative to the top, left origin of the desktop
            </summary>
        </member>
        <member name="M:CssUI.DOM.Window.Set_Window_Size(CssUI.ReadOnlyRect2i)">
            <summary>
            Sets the size of this window on the desktop
            </summary>
        </member>
        <member name="P:CssUI.DOM.Window.BrowsingContext">
            <summary>
            This is the window itsself
            </summary>
        </member>
        <member name="P:CssUI.DOM.Window.Name">
            <summary>
            
            </summary>
        </member>
        <member name="F:CssUI.DOM.Window.visualViewport">
            <summary>
            Determines the area of the document being rendered
            </summary>
        </member>
        <member name="P:CssUI.DOM.Window.Mouse">
            <summary>
            The primary pointing device
            </summary>
        </member>
        <member name="P:CssUI.DOM.Window.Keyboard">
            <summary>
            The keyboard device of which there can be only one (the system sees ALL active keyboards as a single device).
            </summary>
        </member>
        <member name="M:CssUI.DOM.Window.Register_Key_Command(CssUI.DOM.KeyCombination,System.Action)">
            <summary>
            Returns true if the given <paramref name="command"/> was able to be registered to <paramref name="combo"/>
            </summary>
            <param name="combo">The key combination to register</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Window.Unregister_Key_Command(CssUI.DOM.KeyCombination)">
            <summary>
            Returns true if the given key-combination <paramref name="combo"/> was able to be unegistered
            </summary>
            <param name="combo">The key combination to register</param>
            <returns></returns>
        </member>
        <member name="M:CssUI.DOM.Window.Register_Protected_Key_Command(CssUI.DOM.KeyCombination,System.Action)">
            <summary>
            Attempts to register the given <paramref name="command"/> as a protected key command
            <para>Protected commands cannot be unregistered or replaced</para>
            </summary>
            <param name="combo">The key combination to register</param>
            <returns></returns>
        </member>
        <member name="P:CssUI.DOM.Window.FocusedArea">
            <summary>
            The term focusable area is used to refer to regions of the interface that can become the target of keyboard input. Focusable areas can be elements, parts of elements, or other regions managed by the user agent.
            </summary>
            Docs: https://html.spec.whatwg.org/multipage/interaction.html#currently-focused-area-of-a-top-level-browsing-context
        </member>
        <member name="M:CssUI.DOM.Window.Run_Event_Loop">
            <summary>
            Performs main-loop processing
            </summary>
        </member>
        <member name="T:CssUI.CssMultiValueProperty">
            <summary>
            Represents a CSS property which consists of multiple <see cref="T:CssUI.CSS.CssValue"/>s
            This is a base class to be used by more complex multi-value property types, like the 'font-family' property which allows specifying a list of font names
            </summary>
        </member>
        <member name="F:CssUI.CssMultiValueProperty._assigned">
            <summary>
            Backing value for <see cref="P:CssUI.CssMultiValueProperty.Assigned"/>
            <para> Docs: https://www.w3.org/TR/css-cascade-3/#cascaded </para>
            </summary>
        </member>
        <member name="F:CssUI.CssMultiValueProperty._specified">
            <summary>
            Backing value for <see cref="P:CssUI.CssMultiValueProperty.Specified"/>
            <para> Docs: https://www.w3.org/TR/css-cascade-3/#specified </para>
            </summary>
        </member>
        <member name="F:CssUI.CssMultiValueProperty._computed">
            <summary>
            Backing value for <see cref="P:CssUI.CssMultiValueProperty.Computed"/>
            <para> Docs: https://www.w3.org/TR/css-cascade-3/#computed </para>
            </summary>
        </member>
        <member name="F:CssUI.CssMultiValueProperty._used">
            <summary>
            Backing value for <see cref="P:CssUI.CssMultiValueProperty.Used"/>
            <para> Docs: https://www.w3.org/TR/css-cascade-3/#used </para>
            </summary>
        </member>
        <member name="F:CssUI.CssMultiValueProperty._actual">
            <summary>
            Backing value for <see cref="P:CssUI.CssMultiValueProperty.Actual"/>
            <para> Docs: https://www.w3.org/TR/css-cascade-3/#actual </para>
            </summary>
        </member>
        <member name="F:CssUI.CssMultiValueProperty.oldAssigned">
            <summary>
            Tracks the previous value for <see cref="P:CssUI.CssMultiValueProperty.Assigned"/> so we can detect when changes occur
            </summary>
        </member>
        <member name="F:CssUI.CssMultiValueProperty.oldSpecified">
            <summary>
            Tracks the previous value for <see cref="P:CssUI.CssMultiValueProperty.Specified"/> so we can detect when changes occur
            </summary>
        </member>
        <member name="F:CssUI.CssMultiValueProperty.oldComputed">
            <summary>
            Tracks the previous value for <see cref="P:CssUI.CssMultiValueProperty.Computed"/> so we can detect when changes occur
            </summary>
        </member>
        <member name="F:CssUI.CssMultiValueProperty.oldUsed">
            <summary>
            Tracks the previous value for <see cref="P:CssUI.CssMultiValueProperty.Used"/> so we can detect when changes occur
            </summary>
        </member>
        <member name="F:CssUI.CssMultiValueProperty.oldActual">
            <summary>
            Tracks the previous value for <see cref="P:CssUI.CssMultiValueProperty.Actual"/> so we can detect when changes occur
            </summary>
        </member>
        <member name="P:CssUI.CssMultiValueProperty.Assigned">
            <summary>
            Raw value assigned to the property from the cascade process.
            CSS standards call this the Cascaded value
            This is the value that the stylesheet gave us(could be no value at all)
            </summary>
        </member>
        <member name="P:CssUI.CssMultiValueProperty.Specified">
            <summary>
            The value we interpreted from <see cref="P:CssUI.CssMultiValueProperty.Assigned"/>
            </summary>
        </member>
        <member name="P:CssUI.CssMultiValueProperty.Computed">
            <summary>
            The value as used for inheritence.
            The Specified value after being resolved to an absolute value, if possible
            </summary>
        </member>
        <member name="P:CssUI.CssMultiValueProperty.Used">
            <summary>
            The final calculated value after applying a property specific resolution method to it
            </summary>
        </member>
        <member name="P:CssUI.CssMultiValueProperty.Actual">
            <summary>
            The value that will be used by the element
            <para>This is the <see cref="P:CssUI.CssMultiValueProperty.Used"/> value with system restrictions placed on it</para>
            </summary>
        </member>
        <member name="P:CssUI.CssMultiValueProperty.IsNone">
            <summary>
            Returns TRUE if the <see cref="P:CssUI.CssMultiValueProperty.Assigned"/> value is <see cref="F:CssUI.CSS.ECssValueTypes.NONE"/>
            </summary>
        </member>
        <member name="P:CssUI.CssMultiValueProperty.IsAuto">
            <summary>
            Return TRUE if the assigned value is set to <see cref="F:CssUI.CSS.CssValue.Auto"/>
            </summary>
        </member>
        <member name="P:CssUI.CssMultiValueProperty.IsInherited">
            <summary>
            Returns TRUE if the assigned value is <see cref="F:CssUI.CSS.CssValue.Inherit"/>
            </summary>
        </member>
        <member name="P:CssUI.CssMultiValueProperty.IsInheritable">
            <summary>
            Returns TRUE if this property is inheritable according to its definition
            </summary>
        </member>
        <member name="P:CssUI.CssMultiValueProperty.IsDependent">
            <summary>
            Returns TRUE if the assigned value has the <see cref="F:CssUI.CSS.Internal.ECssValueFlags.Depends"/> flag
            </summary>
        </member>
        <member name="P:CssUI.CssMultiValueProperty.IsDependentOrAuto">
            <summary>
            Return TRUE if the assigned value is set to <see cref="F:CssUI.CSS.CssValue.Auto"/>
            Returns TRUE if the assigned value has the <see cref="F:CssUI.CSS.Internal.ECssValueFlags.Depends"/> flag
            </summary>
        </member>
        <member name="P:CssUI.CssMultiValueProperty.IsPercentageOrAuto">
            <summary>
            Return TRUE if the assigned value is set to <see cref="F:CssUI.CSS.CssValue.Auto"/>
            Returns TRUE if the assigned value type is a percentage
            </summary>
        </member>
        <member name="P:CssUI.CssMultiValueProperty.HasValue">
            <summary>
            Returns whether or not the property has a set value that should take affect during cascading.
            </summary>
        </member>
        <member name="M:CssUI.CssMultiValueProperty.Revert(System.Boolean)">
            <summary>
            Causes this property to revert back to the computed stage such that it must re-interpret its Used and Actual values.
            </summary>
            <param name="suppress">Suppresses any change event from firing once the Used value gets re-interpreted</param>
        </member>
        <member name="M:CssUI.CssMultiValueProperty.Find_Inherited_Value">
            <summary>
            Returns the inherited value from the properties owners parent element
            </summary>
        </member>
        <member name="M:CssUI.CssMultiValueProperty.Cascade(CssUI.CSS.ICssProperty)">
            <summary>
            Overwrites the values of this instance with any values from another which aren't <see cref="F:CssUI.CSS.CssValue.Null"/>
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CssMultiValueProperty.CascadeAsync(CssUI.CSS.ICssProperty)">
            <summary>
            Overwrites the values of this instance with any values from another which aren't <see cref="F:CssUI.CSS.CssValue.Null"/>
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CssMultiValueProperty.Overwrite(CssUI.CSS.ICssProperty)">
            <summary>
            Overwrites the assigned values of this instance with values from another if they are different
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CssMultiValueProperty.OverwriteAsync(CssUI.CSS.ICssProperty)">
            <summary>
            Overwrites the assigned values of this instance with values from another if they are different
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:CssUI.CssMultiValueProperty.Update(System.Boolean)">
            <summary>
            Resets all values back to the Assigned and then recomputes them later
            </summary>
            <param name="ComputeNow">If <c>True</c> the final values will be computed now, In most cases leave this false</param>
        </member>
        <member name="M:CssUI.CssMultiValueProperty.UpdateDependent(System.Boolean)">
            <summary>
            If the Assigned value is one that depends on another value for its final value then
            Resets all values back to the Assigned and then recomputes them later
            </summary>
            <param name="ComputeNow">If <c>True</c> the final values will be computed now, In most cases leave this false</param>
        </member>
        <member name="M:CssUI.CssMultiValueProperty.UpdateDependentOrAuto(System.Boolean)">
            <summary>
            If the Assigned value is one that depends on another value for its final value OR is <see cref="F:CssUI.CSS.CssValue.Auto"/> then
            Resets all values back to the Assigned and then recomputes them later
            </summary>
            <param name="ComputeNow">If <c>True</c> the final values will be computed now, In most cases leave this false</param>
        </member>
        <member name="M:CssUI.CssMultiValueProperty.UpdatePercentageOrAuto(System.Boolean)">
            <summary>
            If the Assigned value is a percentage OR is <see cref="F:CssUI.CSS.CssValue.Auto"/> then
            Resets all values back to the Assigned and then recomputes them later
            </summary>
            <param name="ComputeNow">If <c>True</c> the final values will be computed now, In most cases leave this false</param>
        </member>
        <member name="M:CssUI.CssMultiValueProperty.Handle_Unit_Change(CssUI.CSS.ECssUnit)">
            <summary>
            Allows external code to notify this property that a certain unit type has changed scale and if we have a value which uses that unit-type we need to fire our Changed event because our Computed value will be different
            </summary>
        </member>
        <member name="T:CssUI.StyleFunction">
            <summary>
            Holds a function name and a set of <see cref="T:CssUI.CSS.CssValue"/> arguments
            </summary>
        </member>
        <member name="F:CssUI.StyleFunction.Name">
            <summary>
            Function name
            </summary>
        </member>
        <member name="F:CssUI.StyleFunction.Args">
            <summary>
            Arguments
            </summary>
        </member>
        <member name="T:CssUI.CssUnitResolver">
            <summary>
            Provides scale resolution for StyleValue unit types
            </summary>
        </member>
        <member name="F:CssUI.CssUnitResolver.anchor_to_dpi">
            <summary>
            Determines how the physical units are determined.
            If <c>True</c> the physical units will be anchored to the device DPI
            </summary>
        </member>
        <member name="M:CssUI.CssUnitResolver.Compile_Table">
            <summary>
            Compiles the PX_RELATIVE_SCALE table
            </summary>
        </member>
        <member name="M:CssUI.CssUnitResolver.Resolve(System.Double,CssUI.CSS.ECssUnit)">
            <summary>
            Resolves a <paramref name="Value"/> from <paramref name="Unit"/> to its canonical form.
            </summary>
            <param name="Unit">Unit the value is specified in</param>
            <param name="Value">Value to convert</param>
        </member>
        <member name="M:CssUI.CssUnitResolver.Resolve(System.Double,CssUI.CSS.ECssUnit,CssUI.CSS.ECssUnit)">
            <summary>
            Resolves a <paramref name="value"/> from <paramref name="unitFrom"/> to <paramref name="unitTo"/>
            </summary>
            <param name="unitFrom">The unit the value is specified in</param>
            <param name="unitTo">The unit to convert to</param>
            <param name="value">Value to convert</param>
        </member>
        <member name="M:CssUI.CssUnitResolver.Get_Scale(CssUI.DOM.Document,CssUI.CSS.ECssUnit,System.Boolean)">
            <summary>
            Retreives the base scaling factor for the given unit relative to its canonical unit
            </summary>
            <param name="document"></param>
            <param name="Unit"></param>
            <returns></returns>
        </member>
        <member name="F:CssUI.Benchmark_Info.Name">
            <summary>
            Name of the execution method
            </summary>
        </member>
        <member name="F:CssUI.Benchmark_Info.Average">
            <summary>
            Average execution time
            </summary>
        </member>
        <member name="F:CssUI.Benchmark_Info.Low">
            <summary>
            Shortest execution time
            </summary>
        </member>
        <member name="F:CssUI.Benchmark_Info.High">
            <summary>
            Longest execution time
            </summary>
        </member>
        <member name="F:CssUI.Benchmark_Info.Total">
            <summary>
            Sum of all execution times
            </summary>
        </member>
        <member name="F:CssUI.Benchmark_Info.Count">
            <summary>
            Number of executions
            </summary>
        </member>
        <member name="T:CssUI.Benchmark">
            <summary>
            Makes gathering benchmark times en mass and computing their average, etc.
            </summary>
        </member>
        <member name="F:CssUI.Benchmark.Active">
            <summary>
            Stores a list of the ongoing benchmarks
            </summary>
        </member>
        <member name="F:CssUI.Benchmark.History">
            <summary>
            History of elapsed benchmark time values in seconds
            </summary>
        </member>
        <member name="F:CssUI.DebugOpts.Draw_Bounds">
            <summary>
            The element will outline all of it's block boxes
            </summary>
        </member>
        <member name="F:CssUI.DebugOpts.Draw_Child_Bounds">
            <summary>
            The element will outline all child elements block boxes
            </summary>
        </member>
        <member name="F:CssUI.DebugOpts.Draw_Size">
            <summary>
            The element will overlay text at it's top displaying it's current size.
            </summary>
        </member>
        <member name="M:CssUI.HTTP.HTTPCommon.Is_HTTP_Tab_Or_Space(System.Char)">
            <summary>
            Returns <c>True</c> if the given code point is an HTML tab or space character
            </summary>
            <param name="c">The character to check</param>
        </member>
        <member name="M:CssUI.HTTP.HTTPCommon.Is_HTTP_Whitespace(System.Char)">
            <summary>
            Returns <c>True</c> if the given code point is an HTTP whitespace character
            </summary>
            <param name="c">The character to check</param>
        </member>
        <member name="M:CssUI.HTTP.HTTPCommon.Is_HTTP_Token(System.Char)">
            <summary>
            Returns <c>True</c> if the given code point is an HTML token character
            </summary>
            <param name="c">The character to check</param>
        </member>
        <member name="M:CssUI.HTTP.HTTPCommon.Is_HTTP_Quoted_String_Token(System.Char)">
            <summary>
            Returns <c>True</c> if the given code point is an HTML quoted-string token character
            </summary>
            <param name="c">The character to check</param>
        </member>
        <member name="M:CssUI.HTTP.HTTPCommon.Is_HTTP_Newline_Byte(System.Byte)">
            <summary>
            Returns <c>True</c> if the given code point is an HTML newline(0x0A or 0x0D) byte
            </summary>
            <param name="b">The character to check</param>
        </member>
        <member name="M:CssUI.HTTP.HTTPCommon.Is_HTTP_Tab_Or_Space_Byte(System.Byte)">
            <summary>
            Returns <c>True</c> if the given code point is an HTML tab(0x09) or space(0x20) byte
            </summary>
            <param name="b">The character to check</param>
        </member>
        <member name="M:CssUI.HTTP.HTTPCommon.Is_HTTP_Whitepace_Byte(System.Byte)">
            <summary>
            Returns <c>True</c> if the given code point is an HTML whitespace byte
            </summary>
            <param name="b">The character to check</param>
        </member>
        <member name="M:CssUI.HTTP.HTTPCommon.Get_Output_Encoding(System.Text.Encoding)">
            <summary>
            Translates a given encoding into a valid one for HTTP Form submission or URL parsing
            </summary>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="F:CssUI.HTTP.Url.Scheme">
            <summary>
            
            </summary>
        </member>
        <member name="P:CssUI.HTTP.Url.DefaultPort">
            <summary>
            Returns the default port(if any) for the urls scheme
            </summary>
        </member>
        <member name="P:CssUI.HTTP.Url.IsSpecial">
            <summary>
            Returns <c>True</c> if this urls scheme is a special scheme
            </summary>
        </member>
        <member name="P:CssUI.HTTP.Url.IncludesCredentials">
            <summary>
            Returns <c>True</c> if this urls username or password are a non-empty string
            </summary>
        </member>
        <member name="P:CssUI.HTTP.Url.CannotHaveCredentials">
            <summary>
            A URL cannot have a username/password/port if its host is null or the empty string, its cannot-be-a-base-URL flag is set, or its scheme is "file".
            </summary>
        </member>
        <member name="M:CssUI.HTTP.Url.Is_Percent_Encoded_Byte(System.Char,System.Char,System.Char)">
            <summary>
            A percent-encoded byte is U+0025 (%), followed by two ASCII hex digits.
            </summary>
        </member>
        <member name="M:CssUI.HTTP.Url.Is_Percent_Encoded_Byte(System.ReadOnlyMemory{System.Char})">
            <summary>
            A percent-encoded byte is U+0025 (%), followed by two ASCII hex digits.
            </summary>
        </member>
        <member name="M:CssUI.HTTP.Url.Is_URL_Unit(System.Char,System.Char,System.Char)">
            <summary>
            The URL units are URL code points and percent-encoded bytes.
            </summary>
        </member>
        <member name="M:CssUI.HTTP.Url.Is_URL_Unit(System.ReadOnlyMemory{System.Char})">
            <summary>
            The URL units are URL code points and percent-encoded bytes.
            </summary>
        </member>
        <member name="M:CssUI.HTTP.Url.Is_URL_Unit_String(System.ReadOnlyMemory{System.Char})">
            <summary>
            Returns <c>True</c> if <paramref name="input"/> is a string containing only URL Units
            </summary>
        </member>
        <member name="M:CssUI.HTTP.Url.Is_Single_Dot_Path_Segment(System.ReadOnlyMemory{System.Char})">
            <summary>
            A single-dot path segment must be "." or an ASCII case-insensitive match for "%2e".
            </summary>
        </member>
        <member name="M:CssUI.HTTP.Url.Is_Double_Dot_Path_Segment(System.ReadOnlyMemory{System.Char})">
            <summary>
            A double-dot path segment must be ".." or an ASCII case-insensitive match for ".%2e", "%2e.", or "%2e%2e".
            </summary>
        </member>
        <member name="M:CssUI.HTTP.Url.Is_URL_Query_String(System.ReadOnlyMemory{System.Char})">
            <summary>
            A URL-query string must be zero or more URL units.
            </summary>
        </member>
        <member name="M:CssUI.HTTP.Url.Is_URL_Fragment_String(System.ReadOnlyMemory{System.Char})">
            <summary>
            A URL-fragment string must be zero or more URL units.
            </summary>
        </member>
        <member name="M:CssUI.HTTP.Url.Is_Windows_Drive_Letter(System.ReadOnlyMemory{System.Char})">
            <summary>
            A Windows drive letter is two code points, of which the first is an ASCII alpha and the second is either U+003A (:) or U+007C (|).
            </summary>
        </member>
        <member name="M:CssUI.HTTP.Url.Is_Normalized_Windows_Drive_Letter(System.ReadOnlyMemory{System.Char})">
            <summary>
            A normalized Windows drive letter is two code points, of which the first is an ASCII alpha and the second is U+003A (:).
            </summary>
        </member>
        <member name="T:CssUI.HTTP.IPV4Address">
            <summary>
            Contains 8-bit integers making up a single 32-bit integer which indicates a network address
            </summary>
        </member>
        <member name="T:CssUI.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CssUI.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CssUI.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CssUI.ExceptionMessages.ERROR_Attribute_Type_Mismatch">
            <summary>
              Looks up a localized string similar to This attribute&apos;s type does not match the one requested.
            </summary>
        </member>
        <member name="P:CssUI.ExceptionMessages.ERROR_Cannot_Insert_Node_Due_To_Recursion">
            <summary>
              Looks up a localized string similar to A node which contains another cannot be inserted into the node it contains.
            </summary>
        </member>
        <member name="P:CssUI.ExceptionMessages.ERROR_FormTarget_Invalid_Value">
            <summary>
              Looks up a localized string similar to InvalidValue: formtarget cannot accept the value: \&quot;{0}\&quot;.
            </summary>
        </member>
        <member name="P:CssUI.ExceptionMessages.ERROR_InputElement_InputType_Value_Must_Be_Empty">
            <summary>
              Looks up a localized string similar to The only valid value for this type of input element is an empty string.
            </summary>
        </member>
        <member name="P:CssUI.ExceptionMessages.ERROR_InputElement_Invalid_Attribute">
            <summary>
              Looks up a localized string similar to This attribute cannot be specified for an input element of this type({0}).
            </summary>
        </member>
        <member name="P:CssUI.ExceptionMessages.ERROR_InputElement_InvalidValue_Start_Greater_Than_End">
            <summary>
              Looks up a localized string similar to Start cannot be greater than end.
            </summary>
        </member>
        <member name="P:CssUI.ExceptionMessages.ERROR_InputElement_Method_Unsupported_By_InputType">
            <summary>
              Looks up a localized string similar to The input-type({0}) does not implement this method.
            </summary>
        </member>
        <member name="P:CssUI.ExceptionMessages.ERROR_InputElement_Missing_Allowed_Value_Step">
            <summary>
              Looks up a localized string similar to Input element has no allowed-value-step, step cannot be \&quot;any\&quot;.
            </summary>
        </member>
        <member name="P:CssUI.ExceptionMessages.ERROR_InputElement_Property_Unsupported_By_InputType">
            <summary>
              Looks up a localized string similar to This property is not valid for input elements of type \&quot;{0}\&quot;.
            </summary>
        </member>
        <member name="P:CssUI.ExceptionMessages.ERROR_InputElement_Value_Cannot_Convert">
            <summary>
              Looks up a localized string similar to The input-type({0}) value cannot be converted to the requested type.
            </summary>
        </member>
        <member name="P:CssUI.ExceptionMessages.ERROR_Invalid_Value_Infinity">
            <summary>
              Looks up a localized string similar to Value cannot be infinity.
            </summary>
        </member>
        <member name="P:CssUI.ExceptionMessages.ERROR_Node_No_Cloning_Logic">
            <summary>
              Looks up a localized string similar to Cloning logic for this node type has not been implemented.
            </summary>
        </member>
        <member name="P:CssUI.ExceptionMessages.ERROR_Node_Parent_Type_Invalid">
            <summary>
              Looks up a localized string similar to This parent node is not a valid type.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CssUI.Fonts.FontMetrics" -->
        <member name="T:CssUI.Rendering.RenderEngineBase">
            <summary>
            Provides an implementation of a basic render engine with a stack.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Begin">
            <summary>
            Prepares the engine to begin rendering a new frame.
            <para>Ensure that:</para>
            <para>DepthTesting = OFF</para>
            <para>Blending = ON</para>
            </summary>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.End">
            <summary>
            Releases the engine when it is done rendering the current frame.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Reset">
            <summary>
            Resets all states to their defaults
            </summary>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Push">
            <summary>
            Pushes a new copy of any stacking values onto their respective stacks, each UI element calls this at the start of it's rendering function
            EG: Blending color, clipping region, etc.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Pop">
            <summary>
            Pops the latest copy of any stacking values off of their respective stacks, each UI element calls this at the end of it's rendering function
            EG: Blending color, clipping region, etc.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.onStack_Value_Change">
            <summary>
            Fired anytime a value on our stack changes so we can update that data within whatever methods we are using to render.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Set_Matrix(CssUI.Matrix4)">
            <summary>
            Sets the latest matrix value in the stack.
            </summary>
            <param name="Matrix"></param>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Upload_Matrix(CssUI.Matrix4)">
            <summary>
            Uploads the current matrix value to whatever system is doing the rendering, be it DirectX, OpenGL, Vulkan, D3D, etc.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Set_Blending_Color(CssUI.Rendering.ReadOnlyColor)">
            <summary>
            Sets the value of the latest tint color value in the blending stack.
            The 'tint' color refers to the color which the base color multiplies against itsself to obtain the final color value to be used when rendering verticies.
            </summary>
            <param name="color">The tint color to multiply the base color by.</param>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Set_Color(CssUI.Rendering.ReadOnlyColor)">
            <summary>
            Sets the current color
            </summary>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Upload_Color(CssUI.Rendering.ReadOnlyColor)">
            <summary>
            Uploads the final, blended, color value to whatever system is doing the rendering, be it DirectX, OpenGL, Vulkan, D3D, etc.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Finalize_Color">
            <summary>
            Performs blending on the base color and then uploads it.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Set_Texture(CssUI.Rendering.GpuTexture)">
            <summary>
            Sets the current texture for whatever system is doing the rendering, be it DirectX, OpenGL, Vulkan, D3D, etc.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Create_Texture(System.ReadOnlySpan{System.Byte},CssUI.ReadOnlyRect2i,CssUI.EPixelFormat)">
            <summary>
            Creates a new texture object.
            </summary>
            <param name="Data">Pixel data for the texture</param>
            <param name="Size">Pixel dimensions of the texture</param>
            <param name="Format">Format for the pixels in Data</param>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Destroy_Texture(CssUI.Rendering.GpuTexture)">
            <summary>
            Destroy a texture, ensuring it cannot be used again unless recreated.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Draw_Line(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line between two given points
            </summary>
            <param name="LineThickness">Thickness of the line in pixels</param>
            <param name="x1">X-axis of the first point</param>
            <param name="y1">Y-axis of the first point</param>
            <param name="x2">X-axis of the second point</param>
            <param name="y2">Y-axis of the second point</param>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Draw_Line(System.Int32,CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i)">
            <summary>
            Draws a line between two given points
            </summary>
            <param name="LineThickness">Thickness of the line in pixels</param>
            <param name="v1">First vertex</param>
            <param name="v2">Second vertex</param>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Draw_Rect(System.Int32,CssUI.CSS.CssRect)">
            <summary>
            Outlines a rectangular area with the currently set color
            </summary>
            <param name="LineThickness">Thickness of the line in pixels</param>
            <param name="Rect">A rectangular area</param>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Draw_Rect(System.Int32,CssUI.ReadOnlyPoint2i,CssUI.ReadOnlyRect2i)">
            <summary>
            Outlines a rectangular area with the currently set color
            </summary>
            <param name="LineThickness">Thickness of the line in pixels</param>
            <param name="pos">Origin location of the area</param>
            <param name="size">Size of the area</param>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Draw_Rect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Outlines a rectangular area with the currently set color
            </summary>
            <param name="LineThickness">Thickness of the line in pixels</param>
            <param name="X">X-Axis origin location of the area</param>
            <param name="Y">Y-Axis origin location of the area</param>
            <param name="W">Width of the area</param>
            <param name="H">Height of the area</param>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Draw_Rect(System.Int32,CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i)">
            <summary>
            Outlines a rectangular area with the currently set color
            <para>Clockwise winding assumed for all verticies</para>
            </summary>
            <param name="LineThickness">Thickness of the line in pixels</param>
            <param name="v1">Top-Left vertex</param>
            <param name="v2">Top-Right vertex</param>
            <param name="v3">Bottom-Right vertex</param>
            <param name="v4">Bottom-Left vertex</param>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Draw_Tri(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Outlines a triangular area with the currently set color
            <para>Clockwise winding assumed for all verticies</para>
            </summary>
            <param name="LineThickness">Thickness of the line in pixels</param>
            <param name="x1">X-axis of the first point</param>
            <param name="y1">Y-axis of the first point</param>
            <param name="x2">X-axis of the second point</param>
            <param name="y2">Y-axis of the second point</param>
            <param name="x3">X-axis of the third point</param>
            <param name="y3">Y-axis of the third point</param>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Draw_Tri(System.Int32,CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i)">
            <summary>
            Outlines a triangular area with the currently set color
            <para>Clockwise winding assumed for all verticies</para>
            </summary>
            <param name="LineThickness">Thickness of the line in pixels</param>
            <param name="v1">First vertex</param>
            <param name="v2">Second vertex</param>
            <param name="v3">Third vertex</param>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Fill_Rect(CssUI.CSS.CssRect)">
            <summary>
            Fills a rectangular area with the currently set color
            </summary>
            <param name="Rect">A  rectangular area</param>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Fill_Rect(CssUI.ReadOnlyPoint2i,CssUI.ReadOnlyRect2i)">
            <summary>
            Fills a rectangular area with the currently set color
            </summary>
            <param name="pos">Origin location of the area</param>
            <param name="size">Size of the area</param>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Fill_Rect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills a rectangular area with the currently set color
            </summary>
            <param name="X">X-Axis origin location of the area</param>
            <param name="Y">Y-Axis origin location of the area</param>
            <param name="W">Width of the area</param>
            <param name="H">Height of the area</param>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Fill_Rect(CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i)">
            <summary>
            Fills a rectangular area with the currently set color
            <para>Clockwise winding assumed for all verticies</para>
            </summary>
            <param name="LineThickness">Thickness of the line in pixels</param>
            <param name="v1">Top-Left vertex</param>
            <param name="v2">Top-Right vertex</param>
            <param name="v3">Bottom-Right vertex</param>
            <param name="v4">Bottom-Left vertex</param>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Fill_Tri(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills a triangular area with the currently set color
            </summary>
            <param name="x1">X-axis of the first point</param>
            <param name="y1">Y-axis of the first point</param>
            <param name="x2">X-axis of the second point</param>
            <param name="y2">Y-axis of the second point</param>
            <param name="x3">X-axis of the third point</param>
            <param name="y3">Y-axis of the third point</param>
        </member>
        <member name="M:CssUI.Rendering.RenderEngineBase.Fill_Tri(CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i)">
            <summary>
            Fills a triangular area with the currently set color
            <para>Clockwise winding assumed for all verticies</para>
            </summary>
            <param name="v1">First vertex</param>
            <param name="v2">Second vertex</param>
            <param name="v3">Third vertex</param>
        </member>
        <member name="T:CssUI.Rendering.IRenderEngine">
            <summary>
            Represents a Rendering engine for displaying UI elements
            </summary>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Begin">
            <summary>
            Prepares the engine to begin rendering a new set of elements
            <para>Ensure that:</para>
            <para>DepthTesting = OFF</para>
            <para>Blending = ON</para>
            </summary>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.End">
            <summary>
            Releases the engine
            </summary>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Reset">
            <summary>
            Resets all states to their defaults
            </summary>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Push">
            <summary>
            Pushes a new copy of any stacking values onto their respective stacks, each UI element calls this at the start of it's rendering function
            EG: Blending color, clipping region, etc.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Pop">
            <summary>
            Pops the latest copy of any stacking values off of their respective stacks, each UI element calls this at the end of it's rendering function
            EG: Blending color, clipping region, etc.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Set_Matrix(CssUI.Matrix4)">
            <summary>
            Sets the current matrix value.
            </summary>
            <param name="Matrix">The matrix value to set</param>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Upload_Matrix(CssUI.Matrix4)">
            <summary>
            Uploads the current matrix value to whatever system is doing the rendering, be it DirectX, OpenGL, Vulkan, D3D, etc.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Set_Blending_Color(CssUI.Rendering.ReadOnlyColor)">
            <summary>
            Sets the value of the latest tint color value in the blending stack.
            The 'tint' color refers to the color which the base color multiplies against itsself to obtain the final color value to be used when rendering verticies.
            </summary>
            <param name="color">The tint color to multiply the base color by.</param>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Set_Color(CssUI.Rendering.ReadOnlyColor)">
            <summary>
            Sets the current color.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Set_Color(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the current color.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Upload_Color(CssUI.Rendering.ReadOnlyColor)">
            <summary>
            Uploads the final, blended, color value to whatever system is doing the rendering, be it DirectX, OpenGL, Vulkan, D3D, etc.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Set_Texture(CssUI.Rendering.GpuTexture)">
            <summary>
            Sets the current texture for whatever system is doing the rendering, be it DirectX, OpenGL, Vulkan, D3D, etc.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Create_Texture(System.ReadOnlySpan{System.Byte},CssUI.ReadOnlyRect2i,CssUI.EPixelFormat)">
            <summary>
            Creates a new texture object.
            </summary>
            <param name="Data">Pixel data for the texture</param>
            <param name="Size">Pixel dimensions of the texture</param>
            <param name="Format">Format for the pixels in Data</param>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Destroy_Texture(CssUI.Rendering.GpuTexture)">
            <summary>
            Destroy a texture, ensuring it cannot be used again unless recreated.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Draw_Line(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line between two given points
            </summary>
            <param name="LineThickness">Thickness of the line in pixels</param>
            <param name="x1">X-axis of the first point</param>
            <param name="y1">Y-axis of the first point</param>
            <param name="x2">X-axis of the second point</param>
            <param name="y2">Y-axis of the second point</param>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Draw_Line(System.Int32,CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i)">
            <summary>
            Draws a line between two given points
            </summary>
            <param name="LineThickness">Thickness of the line in pixels</param>
            <param name="v1">First vertex</param>
            <param name="v2">Second vertex</param>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Draw_Rect(System.Int32,CssUI.CSS.CssRect)">
            <summary>
            Outlines a rectangular area with the currently set color
            </summary>
            <param name="LineThickness">Thickness of the line in pixels</param>
            <param name="block">An element block which describes the rectangular area</param>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Draw_Rect(System.Int32,CssUI.ReadOnlyPoint2i,CssUI.ReadOnlyRect2i)">
            <summary>
            Outlines a rectangular area with the currently set color
            </summary>
            <param name="LineThickness">Thickness of the line in pixels</param>
            <param name="pos">Origin location of the area</param>
            <param name="size">Size of the area</param>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Draw_Rect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Outlines a rectangular area with the currently set color
            </summary>
            <param name="LineThickness">Thickness of the line in pixels</param>
            <param name="X">X-Axis origin location of the area</param>
            <param name="Y">Y-Axis origin location of the area</param>
            <param name="W">Width of the area</param>
            <param name="H">Height of the area</param>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Draw_Rect(System.Int32,CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i)">
            <summary>
            Outlines a rectangular area with the currently set color
            <para>Clockwise winding assumed for all verticies</para>
            </summary>
            <param name="LineThickness">Thickness of the line in pixels</param>
            <param name="v1">Top-Left vertex</param>
            <param name="v2">Top-Right vertex</param>
            <param name="v3">Bottom-Right vertex</param>
            <param name="v4">Bottom-Left vertex</param>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Draw_Tri(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Outlines a triangular area with the currently set color
            <para>Clockwise winding assumed for all verticies</para>
            </summary>
            <param name="LineThickness">Thickness of the line in pixels</param>
            <param name="x1">X-axis of the first point</param>
            <param name="y1">Y-axis of the first point</param>
            <param name="x2">X-axis of the second point</param>
            <param name="y2">Y-axis of the second point</param>
            <param name="x3">X-axis of the third point</param>
            <param name="y3">Y-axis of the third point</param>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Draw_Tri(System.Int32,CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i)">
            <summary>
            Outlines a triangular area with the currently set color
            <para>Clockwise winding assumed for all verticies</para>
            </summary>
            <param name="LineThickness">Thickness of the line in pixels</param>
            <param name="v1">First vertex</param>
            <param name="v2">Second vertex</param>
            <param name="v3">Third vertex</param>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Fill_Rect(CssUI.CSS.CssRect)">
            <summary>
            Fills a rectangular area with the currently set color
            </summary>
            <param name="Rect">An element block which describes the rectangular area</param>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Fill_Rect(CssUI.ReadOnlyPoint2i,CssUI.ReadOnlyRect2i)">
            <summary>
            Fills a rectangular area with the currently set color
            </summary>
            <param name="pos">Origin location of the area</param>
            <param name="size">Size of the area</param>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Fill_Rect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills a rectangular area with the currently set color
            </summary>
            <param name="X">X-Axis origin location of the area</param>
            <param name="Y">Y-Axis origin location of the area</param>
            <param name="W">Width of the area</param>
            <param name="H">Height of the area</param>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Fill_Rect(CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i)">
            <summary>
            Fills a rectangular area with the currently set color
            <para>Clockwise winding assumed for all verticies</para>
            </summary>
            <param name="LineThickness">Thickness of the line in pixels</param>
            <param name="v1">Top-Left vertex</param>
            <param name="v2">Top-Right vertex</param>
            <param name="v3">Bottom-Right vertex</param>
            <param name="v4">Bottom-Left vertex</param>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Fill_Tri(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills a triangular area with the currently set color
            </summary>
            <param name="x1">X-axis of the first point</param>
            <param name="y1">Y-axis of the first point</param>
            <param name="x2">X-axis of the second point</param>
            <param name="y2">Y-axis of the second point</param>
            <param name="x3">X-axis of the third point</param>
            <param name="y3">Y-axis of the third point</param>
        </member>
        <member name="M:CssUI.Rendering.IRenderEngine.Fill_Tri(CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i,CssUI.CSS.Vertex2i)">
            <summary>
            Fills a triangular area with the currently set color
            <para>Clockwise winding assumed for all verticies</para>
            </summary>
            <param name="v1">First vertex</param>
            <param name="v2">Second vertex</param>
            <param name="v3">Third vertex</param>
        </member>
        <member name="T:CssUI.Rendering.GpuTexture">
            <summary>
            Abstracted representation of a multi-frame animated texture used by UI elements.
            </summary>
        </member>
        <member name="F:CssUI.Rendering.GpuTexture.CurrentFrame">
            <summary>
            The current frame number of the animation
            </summary>
        </member>
        <member name="F:CssUI.Rendering.GpuTexture.Time">
            <summary>
            Current progress (in seconds) of the animation.
            </summary>
        </member>
        <member name="F:CssUI.Rendering.GpuTexture.Timeline">
            <summary>
            Stores the number of seconds each frame starts at.
            </summary>
        </member>
        <member name="F:CssUI.Rendering.GpuTexture.Duration">
            <summary>
            Total sum duration of all frames for this texture
            </summary>
        </member>
        <member name="F:CssUI.Rendering.GpuTexture.FrameAtlas">
            <summary>
            All frames for this (possibly animated) image texture...
            </summary>
        </member>
        <member name="P:CssUI.Rendering.GpuTexture.Frame">
            <summary>
            Returns the frame object which should be currently displayed for this texture.
            </summary>
        </member>
        <member name="F:CssUI.Rendering.GpuTexture.Size">
            <summary>
            Size of the current texture
            </summary>
        </member>
        <member name="M:CssUI.Rendering.GpuTexture.fromData(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Creates a new GPU texture by decoding the given image data
            </summary>
        </member>
        <member name="M:CssUI.Rendering.GpuTexture.Update(System.Single)">
            <summary>
            Progresses the current frame number based on the number of seconds which have passed since it was last updated, given by deltaTime
            </summary>
            <param name="deltaTime">Time (in seconds) to progress the animation by</param>
        </member>
        <member name="M:CssUI.Rendering.GpuTexture.Build_Timeline">
            <summary>
            Rebuilds the timeline of all our frames.
            </summary>
        </member>
        <member name="T:CssUI.Rendering.GpuTextureFrame">
            <summary>
            Single frame of a <see cref="T:CssUI.Rendering.GpuTexture"/> instance.
            Effectively just serves as a convenient pass-through between RGBA pixel-data and the UI's current <see cref="T:CssUI.Rendering.IRenderEngine"/> implementation, which actually does all the handling/uploading of image data
            For example; an OpenGL rendering engine implementation would store a texture ID as an integer within a frame's <see cref="P:CssUI.Rendering.GpuTextureFrame.Handle"/> instance, while some other engine might store something else which it uses to draw the image.
            </summary>
        </member>
        <member name="P:CssUI.Rendering.GpuTextureFrame.Handle">
            <summary>
            Instance object given to us by the <see cref="T:CssUI.Rendering.IRenderEngine"/> implementation, which it uses to actually handle the texture.
            </summary>
        </member>
        <member name="F:CssUI.Rendering.GpuTextureFrame.Duration">
            <summary>
            Time (in seconds) this frame should be onscreen for
            </summary>
        </member>
        <member name="P:CssUI.Rendering.GpuTextureFrame.IsReady">
            <summary>
            Returns whether this frame is ready for the <see cref="T:CssUI.Rendering.IRenderEngine"/> instance to draw it, or if it still needs to be created.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.IColorObject.GetVector">
            <summary>
            Returns 4 RGBA values in the range [0.0 - 1.0]
            </summary>
        </member>
        <member name="M:CssUI.Rendering.IColorObject.SetVector(System.Numerics.Vector4)">
            <summary>
            Scales up the given RGBA values from [0.0 - 1.0] to [0 - 255] and then assigns those values to the color.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.IColorObject.AsInteger">
            <summary>
            Interprets a set of RGBA values as a 32-bit integer.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.IColorObject_Extensions.Scale(CssUI.Rendering.IColorObject,System.Single)">
            <summary>
            Scales this color instances RGBA values by the given factor
            </summary>
        </member>
        <member name="M:CssUI.Rendering.IColorObject_Extensions.Scale(CssUI.Rendering.IColorObject,System.Double)">
            <summary>
            Scales this color instances RGBA values by the given factor
            </summary>
        </member>
        <member name="M:CssUI.Rendering.IColorObject_Extensions.Scale(CssUI.Rendering.IColorObject,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Scales this color instances RGBA values by the given factors
            </summary>
        </member>
        <member name="M:CssUI.Rendering.IColorObject_Extensions.Scale(CssUI.Rendering.IColorObject,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Scales this color instances RGBA values by the given factors
            </summary>
        </member>
        <member name="M:CssUI.Rendering.IColorObject_Extensions.Scale(CssUI.Rendering.IColorObject,System.Single,System.Single)">
            <summary>
            Scales this color instances RGBA values by the given factors
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.Rendering.IColorObject_Extensions.Scale(CssUI.Rendering.IColorObject,System.Double,System.Double)">
            <summary>
            Scales this color instances RGBA values by the given factors
            </summary>
            <returns></returns>
        </member>
        <member name="M:CssUI.Rendering.IColorObject_Extensions.ScaleAlpha(CssUI.Rendering.IColorObject,System.Single)">
            <summary>
            Scales this color instances alpha value by the given factor
            </summary>
        </member>
        <member name="M:CssUI.Rendering.IColorObject_Extensions.ScaleAlpha(CssUI.Rendering.IColorObject,System.Double)">
            <summary>
            Scales this color instances alpha value by the given factor
            </summary>
        </member>
        <member name="F:CssUI.Rendering.ReadOnlyColor.red">
            <summary>Red channel value in the range [0-255]</summary>
        </member>
        <member name="F:CssUI.Rendering.ReadOnlyColor.green">
            <summary>Green channel value in the range [0-255]</summary>
        </member>
        <member name="F:CssUI.Rendering.ReadOnlyColor.blue">
            <summary>Blue channel value in the range [0-255]</summary>
        </member>
        <member name="F:CssUI.Rendering.ReadOnlyColor.alpha">
            <summary>Alpha channel value in the range [0-255]</summary>
        </member>
        <member name="M:CssUI.Rendering.ReadOnlyColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new color instance from the given values.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.ReadOnlyColor.#ctor(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates a new color instance from the given values.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.ReadOnlyColor.#ctor(CssUI.Rendering.Rgba)">
            <summary>
            Instantiates a new color object with the given RGBA values
            </summary>
            <param name="data">Values to populate the new color object with</param>
        </member>
        <member name="M:CssUI.Rendering.ReadOnlyColor.#ctor(System.Numerics.Vector4)">
            <summary>
            Returns a new color instance from the given RGBA values scaled from [0-1] to [0-255].
            </summary>
        </member>
        <member name="M:CssUI.Rendering.ReadOnlyColor.#ctor(System.Single,System.Single,System.Single,System.Nullable{System.Single})">
            <summary>
            Returns a new color instance from the given RGBA values scaled from [0-1] to [0-255].
            </summary>
        </member>
        <member name="M:CssUI.Rendering.ReadOnlyColor.GetVector">
            <summary>
            Returns the RGBA values scaled down to a range of [0.0 - 1.0]
            </summary>
        </member>
        <member name="M:CssUI.Rendering.ReadOnlyColor.SetVector(System.Numerics.Vector4)">
            <summary>
            Scales up the given RGBA values from a range of [0.0 - 1.0] to [0 - 255] and then assigns those values to the color.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.ReadOnlyColor.AsInteger">
            <summary>
            Interprets a set of RGBA values as a 32-bit integer.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.ReadOnlyColor.FromInt(System.UInt32)">
            <summary>
            Interprets a 32-bit integer as a set of RGBA values.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.ReadOnlyColor.ToHexRGB">
            <summary>
            Converts the color to a hexadecimal RGB color string
            </summary>
        </member>
        <member name="M:CssUI.Rendering.ReadOnlyColor.ToHexRGBA">
            <summary>
            Converts the color to a hexadecimal RGBA color string
            </summary>
        </member>
        <member name="M:CssUI.Rendering.Rgba.Pack">
            <summary>
            Views the 8-bit RGBA values at this objects address as a 32-bit integer.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.Rgba.Unpack(System.UInt32)">
            <summary>
            Packs a set of 8-bit RGBA values into a 32-bit integer.
            </summary>
        </member>
        <member name="T:CssUI.Rendering.Color">
            <summary>
            Encapsulates an RGBA color.
            </summary>
        </member>
        <member name="F:CssUI.Rendering.Color.red">
            <summary>Red channel value in the range [0-255]</summary>
        </member>
        <member name="F:CssUI.Rendering.Color.green">
            <summary>Green channel value in the range [0-255]</summary>
        </member>
        <member name="F:CssUI.Rendering.Color.blue">
            <summary>Blue channel value in the range [0-255]</summary>
        </member>
        <member name="F:CssUI.Rendering.Color.alpha">
            <summary>Alpha channel value in the range [0-255]</summary>
        </member>
        <member name="M:CssUI.Rendering.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new color instance from the given values.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new color instance from the given values.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.Color.#ctor(System.UInt32)">
            <summary>
            Instantiates a new color object with the given packed RGBA values
            </summary>
            <param name="packed">4 bytes packed into a single 32-bit integer representing RGBA values</param>
        </member>
        <member name="M:CssUI.Rendering.Color.#ctor(CssUI.Rendering.Rgba)">
            <summary>
            Instantiates a new color object with the given RGBA values
            </summary>
            <param name="data">Values to populate the new color object with</param>
        </member>
        <member name="M:CssUI.Rendering.Color.#ctor(System.Numerics.Vector4)">
            <summary>
            Returns a new color instance from the given RGBA values scaled from [0-1] to [0-255].
            </summary>
        </member>
        <member name="M:CssUI.Rendering.Color.#ctor(System.Single,System.Single,System.Single,System.Nullable{System.Single})">
            <summary>
            Returns a new color instance from the given RGBA values scaled from [0-1] to [0-255].
            </summary>
        </member>
        <member name="M:CssUI.Rendering.Color.GetVector">
            <summary>
            Returns the RGBA values in vector form
            </summary>
        </member>
        <member name="M:CssUI.Rendering.Color.SetVector(System.Numerics.Vector4)">
            <summary>
            Converts the given vector into proper RGBA form and overwrites this instances values.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.Color.AsInteger">
            <summary>
            Interprets a set of RGBA values as a 32-bit integer.
            </summary>
        </member>
        <member name="M:CssUI.Rendering.Color.From(System.UInt32)">
            <summary>
            Interprets a 32-bit integer as a set of RGBA values
            </summary>
        </member>
        <member name="M:CssUI.Rendering.Color.ToHexRGB">
            <summary>
            Converts the color to a hexadecimal RGB color string
            </summary>
        </member>
        <member name="M:CssUI.Rendering.Color.ToHexRGBA">
            <summary>
            Converts the color to a hexadecimal RGBA color string
            </summary>
        </member>
        <member name="M:CssUI.Rendering.ColorObject`1.Mix(CssUI.Rendering.IColorObject,System.Single)">
            <summary>
            Linearly interpolates between this color and another using the given <paramref name="blendFactor"/>.
            </summary>
            <param name="right">The color to interpolate toward</param>
            <param name="blendFactor">[0-1] range factor for interpolation</param>
        </member>
        <member name="M:CssUI.Rendering.ColorObject`1.MixAlpha(System.Single)">
            <summary>
            Returns a clone of this color with the alpha scaled by the given amount.
            </summary>
            <param name="Factor">Factor to multiply the alpha by</param>
            <returns></returns>
        </member>
        <member name="T:CssUI.RenderStack">
            <summary>
            Holds and manages all of the stacking values for an <see cref="T:CssUI.Rendering.IRenderEngine"/> implementation.
            </summary>
        </member>
        <member name="M:CssUI.RenderStack.Set_Color(CssUI.Rendering.Color,System.Boolean)">
            <summary>
            Sets the current color for the most recent stack item (this color is NOT blended by the stack)
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:CssUI.RenderStack.Set_Blend(CssUI.Rendering.ReadOnlyColor,System.Boolean)">
            <summary>
            Sets the current blend color for the most recent stack item (this color is blended with all the blending colors before it)
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:CssUI.RenderStack.Push_All">
            <summary>
            Push a new instance onto each of our stacks
            </summary>
        </member>
        <member name="M:CssUI.RenderStack.Pop_All">
            <summary>
            Pop the last instance off of all our stacks
            </summary>
        </member>
        <member name="M:CssUI.SimpleColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new color instance from the given values.
            </summary>
        </member>
        <member name="M:CssUI.SimpleColor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new color instance from the given values.
            </summary>
        </member>
        <member name="M:CssUI.SimpleColor.#ctor(CssUI.Rendering.Rgba)">
            <summary>
            Instantiates a new color object with the given values
            </summary>
            <param name="data">Values to populate the new color object with</param>
        </member>
        <member name="M:CssUI.SimpleColor.#ctor(System.Numerics.Vector4)">
            <summary>
            Returns a new color instance from the given RGBA values scaled from [0-1] to [0-255].
            </summary>
        </member>
        <member name="M:CssUI.SimpleColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Returns a new color instance from the given RGBA values scaled from [0-1] to [0-255].
            </summary>
        </member>
        <member name="M:CssUI.SimpleColor.GetVector">
            <summary>
            Returns the RGBA values scaled down to a range of [0.0 - 1.0]
            </summary>
        </member>
        <member name="M:CssUI.SimpleColor.SetVector(System.Numerics.Vector4)">
            <summary>
            Scales up the given RGBA values from a range of [0.0 - 1.0] to [0 - 255] and then assigns those values to the color.
            </summary>
        </member>
        <member name="M:CssUI.SimpleColor.AsInteger">
            <summary>
            Interprets a set of RGB values as a 32-bit integer.
            </summary>
        </member>
        <member name="M:CssUI.SimpleColor.From(System.UInt32)">
            <summary>
            Interprets a 32-bit integer as a set of RGB values.
            </summary>
        </member>
        <member name="M:CssUI.SimpleColor.ToHexRGB">
            <summary>
            Converts the color to a hexadecimal RGB color string
            </summary>
        </member>
    </members>
</doc>
